
livestock-monitoring-LSU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002568  08002568  00003568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002584  08002584  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002584  08002584  00003584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800258c  0800258c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800258c  0800258c  0000358c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002590  08002590  00003590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002594  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000000c  080025a0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080025a0  0000408c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d01  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001702  00000000  00000000  00008d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000578  00000000  00000000  0000a438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003f0  00000000  00000000  0000a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000108a9  00000000  00000000  0000ada0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008959  00000000  00000000  0001b649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061f77  00000000  00000000  00023fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00085f19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001120  00000000  00000000  00085f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0008707c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002550 	.word	0x08002550

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002550 	.word	0x08002550

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <ADC_Init>:
ADC_HandleTypeDef    hadc;
ADC_ChannelConfTypeDef        sConfig;

/* ADC Configuration */
void ADC_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0



	  ADC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f002 f81e 	bl	80024f8 <memset>


	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc.Instance = ADC1;
 80004bc:	4b30      	ldr	r3, [pc, #192]	@ (8000580 <ADC_Init+0xd8>)
 80004be:	4a31      	ldr	r2, [pc, #196]	@ (8000584 <ADC_Init+0xdc>)
 80004c0:	601a      	str	r2, [r3, #0]
	  hadc.Init.OversamplingMode = DISABLE;
 80004c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <ADC_Init+0xd8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000580 <ADC_Init+0xd8>)
 80004ca:	2280      	movs	r2, #128	@ 0x80
 80004cc:	05d2      	lsls	r2, r2, #23
 80004ce:	605a      	str	r2, [r3, #4]
	  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000580 <ADC_Init+0xd8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
	  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 80004d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000580 <ADC_Init+0xd8>)
 80004d8:	2201      	movs	r2, #1
 80004da:	639a      	str	r2, [r3, #56]	@ 0x38
	  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004dc:	4b28      	ldr	r3, [pc, #160]	@ (8000580 <ADC_Init+0xd8>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
	  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e2:	4b27      	ldr	r3, [pc, #156]	@ (8000580 <ADC_Init+0xd8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
	  hadc.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <ADC_Init+0xd8>)
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	5499      	strb	r1, [r3, r2]
	  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <ADC_Init+0xd8>)
 80004f2:	2221      	movs	r2, #33	@ 0x21
 80004f4:	2100      	movs	r1, #0
 80004f6:	5499      	strb	r1, [r3, r2]
	  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f8:	4b21      	ldr	r3, [pc, #132]	@ (8000580 <ADC_Init+0xd8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <ADC_Init+0xd8>)
 8000500:	22c2      	movs	r2, #194	@ 0xc2
 8000502:	32ff      	adds	r2, #255	@ 0xff
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
	  hadc.Init.DMAContinuousRequests = DISABLE;
 8000506:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <ADC_Init+0xd8>)
 8000508:	222c      	movs	r2, #44	@ 0x2c
 800050a:	2100      	movs	r1, #0
 800050c:	5499      	strb	r1, [r3, r2]
	  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <ADC_Init+0xd8>)
 8000510:	2204      	movs	r2, #4
 8000512:	615a      	str	r2, [r3, #20]
	  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000514:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <ADC_Init+0xd8>)
 8000516:	2200      	movs	r2, #0
 8000518:	631a      	str	r2, [r3, #48]	@ 0x30
	  hadc.Init.LowPowerAutoWait = ENABLE;
 800051a:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <ADC_Init+0xd8>)
 800051c:	2201      	movs	r2, #1
 800051e:	619a      	str	r2, [r3, #24]
	  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <ADC_Init+0xd8>)
 8000522:	2201      	movs	r2, #1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000526:	4b16      	ldr	r3, [pc, #88]	@ (8000580 <ADC_Init+0xd8>)
 8000528:	2201      	movs	r2, #1
 800052a:	61da      	str	r2, [r3, #28]
	  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <ADC_Init+0xd8>)
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fa9a 	bl	8000a68 <HAL_ADC_Init>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <ADC_Init+0x94>
	  {
	    Error_Handler();
 8000538:	f000 f9cc 	bl	80008d4 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel to be converted.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 800053c:	003b      	movs	r3, r7
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <ADC_Init+0xe0>)
 8000540:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000542:	003b      	movs	r3, r7
 8000544:	2280      	movs	r2, #128	@ 0x80
 8000546:	0152      	lsls	r2, r2, #5
 8000548:	605a      	str	r2, [r3, #4]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800054a:	003a      	movs	r2, r7
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <ADC_Init+0xd8>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 fd39 	bl	8000fc8 <HAL_ADC_ConfigChannel>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <ADC_Init+0xb6>
	  {
	    Error_Handler();
 800055a:	f000 f9bb 	bl	80008d4 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel to be converted.
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 800055e:	003b      	movs	r3, r7
 8000560:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <ADC_Init+0xe4>)
 8000562:	601a      	str	r2, [r3, #0]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000564:	003a      	movs	r2, r7
 8000566:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <ADC_Init+0xd8>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 fd2c 	bl	8000fc8 <HAL_ADC_ConfigChannel>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <ADC_Init+0xd0>
	  {
	    Error_Handler();
 8000574:	f000 f9ae 	bl	80008d4 <Error_Handler>
	  }


}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000028 	.word	0x20000028
 8000584:	40012400 	.word	0x40012400
 8000588:	10000010 	.word	0x10000010
 800058c:	14000020 	.word	0x14000020

08000590 <Get_ADC_Val>:


/* Get the last converted ADC value */
void Get_ADC_Val(uint16_t* adc_values) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    // Verificar que el puntero no sea NULL
    if (adc_values == NULL) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d02b      	beq.n	80005f6 <Get_ADC_Val+0x66>
        return;  // Si el puntero es NULL, no hacemos nada
    }

    // Iniciar la conversión para el primer canal (Channel 4)
    HAL_ADC_Start(&hadc);
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <Get_ADC_Val+0x70>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fbd5 	bl	8000d50 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80005a6:	2301      	movs	r3, #1
 80005a8:	425a      	negs	r2, r3
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 fc62 	bl	8000e78 <HAL_ADC_PollForConversion>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d107      	bne.n	80005c8 <Get_ADC_Val+0x38>
        adc_values[0] = HAL_ADC_GetValue(&hadc);  // Obtener el valor de Channel 0
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fcf8 	bl	8000fb0 <HAL_ADC_GetValue>
 80005c0:	0003      	movs	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	801a      	strh	r2, [r3, #0]
    }

    // Iniciar la conversión para el segundo canal (Channel 5)
    if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80005c8:	2301      	movs	r3, #1
 80005ca:	425a      	negs	r2, r3
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ce:	0011      	movs	r1, r2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fc51 	bl	8000e78 <HAL_ADC_PollForConversion>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d108      	bne.n	80005ec <Get_ADC_Val+0x5c>
        adc_values[1] = HAL_ADC_GetValue(&hadc);  // Obtener el valor de Channel 1
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <Get_ADC_Val+0x70>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fce7 	bl	8000fb0 <HAL_ADC_GetValue>
 80005e2:	0002      	movs	r2, r0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3302      	adds	r3, #2
 80005e8:	b292      	uxth	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
    }

    // Detener la conversión
    HAL_ADC_Stop(&hadc);
 80005ec:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fc02 	bl	8000df8 <HAL_ADC_Stop>
 80005f4:	e000      	b.n	80005f8 <Get_ADC_Val+0x68>
        return;  // Si el puntero es NULL, no hacemos nada
 80005f6:	46c0      	nop			@ (mov r8, r8)
}
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	20000028 	.word	0x20000028

08000604 <fsm_mode>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void fsm_mode(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0


  while (1)
  {
  //TODO MEF Principal, en la kl46 usabamos systick para los timers, pensar que hacemos aca.
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);//LED ON
 800060a:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <fsm_mode+0x50>)
 800060c:	2201      	movs	r2, #1
 800060e:	2108      	movs	r1, #8
 8000610:	0018      	movs	r0, r3
 8000612:	f001 f8bd 	bl	8001790 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000616:	23fa      	movs	r3, #250	@ 0xfa
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fa00 	bl	8000a20 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);//LED OFF
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <fsm_mode+0x50>)
 8000622:	2200      	movs	r2, #0
 8000624:	2108      	movs	r1, #8
 8000626:	0018      	movs	r0, r3
 8000628:	f001 f8b2 	bl	8001790 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800062c:	23fa      	movs	r3, #250	@ 0xfa
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f9f5 	bl	8000a20 <HAL_Delay>


  Get_ADC_Val(adc_values);
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <fsm_mode+0x54>)
 8000638:	0018      	movs	r0, r3
 800063a:	f7ff ffa9 	bl	8000590 <Get_ADC_Val>
  uint16_t channel_4_value = adc_values[0];  //A3 - PA_4
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	4a05      	ldr	r2, [pc, #20]	@ (8000658 <fsm_mode+0x54>)
 8000642:	8812      	ldrh	r2, [r2, #0]
 8000644:	801a      	strh	r2, [r3, #0]
  uint16_t channel_5_value = adc_values[1];  //A4 - PA_5
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4a03      	ldr	r2, [pc, #12]	@ (8000658 <fsm_mode+0x54>)
 800064a:	8852      	ldrh	r2, [r2, #2]
 800064c:	801a      	strh	r2, [r3, #0]
  {
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	e7db      	b.n	800060a <fsm_mode+0x6>
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	50000400 	.word	0x50000400
 8000658:	20000084 	.word	0x20000084

0800065c <GPIO_Init>:
/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/

void GPIO_Init(void)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b089      	sub	sp, #36	@ 0x24
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	240c      	movs	r4, #12
 8000664:	193b      	adds	r3, r7, r4
 8000666:	0018      	movs	r0, r3
 8000668:	2314      	movs	r3, #20
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f001 ff43 	bl	80024f8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <GPIO_Init+0x98>)
 8000674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <GPIO_Init+0x98>)
 8000678:	2104      	movs	r1, #4
 800067a:	430a      	orrs	r2, r1
 800067c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <GPIO_Init+0x98>)
 8000680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000682:	2204      	movs	r2, #4
 8000684:	4013      	ands	r3, r2
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <GPIO_Init+0x98>)
 800068c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <GPIO_Init+0x98>)
 8000690:	2101      	movs	r1, #1
 8000692:	430a      	orrs	r2, r1
 8000694:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000696:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <GPIO_Init+0x98>)
 8000698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <GPIO_Init+0x98>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <GPIO_Init+0x98>)
 80006a8:	2102      	movs	r1, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <GPIO_Init+0x98>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006b2:	2202      	movs	r2, #2
 80006b4:	4013      	ands	r3, r2
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <GPIO_Init+0x9c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	2108      	movs	r1, #8
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 f865 	bl	8001790 <HAL_GPIO_WritePin>



  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006c6:	0021      	movs	r1, r4
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2208      	movs	r2, #8
 80006cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2201      	movs	r2, #1
 80006d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <GPIO_Init+0x9c>)
 80006e4:	0019      	movs	r1, r3
 80006e6:	0010      	movs	r0, r2
 80006e8:	f000 fee4 	bl	80014b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b009      	add	sp, #36	@ 0x24
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	50000400 	.word	0x50000400

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000700:	f000 f91e 	bl	8000940 <HAL_Init>
  /* Configure the system clock */
  SystemClock_Config();
 8000704:	f000 f872 	bl	80007ec <SystemClock_Config>
  /* Initialize all configured peripherals */
  GPIO_Init();
 8000708:	f7ff ffa8 	bl	800065c <GPIO_Init>
  ADC_Init();
 800070c:	f7ff fecc 	bl	80004a8 <ADC_Init>


  /* Infinite loop */
  while (1)
  {
	fsm_mode();
 8000710:	f7ff ff78 	bl	8000604 <fsm_mode>
 8000714:	e7fc      	b.n	8000710 <main+0x14>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <HAL_MspInit+0x24>)
 800071e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_MspInit+0x24>)
 8000722:	2101      	movs	r1, #1
 8000724:	430a      	orrs	r2, r1
 8000726:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <HAL_MspInit+0x24>)
 800072a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800072c:	4b03      	ldr	r3, [pc, #12]	@ (800073c <HAL_MspInit+0x24>)
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	0549      	lsls	r1, r1, #21
 8000732:	430a      	orrs	r2, r1
 8000734:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000

08000740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b089      	sub	sp, #36	@ 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	240c      	movs	r4, #12
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f001 fed0 	bl	80024f8 <memset>
  if(hadc->Instance==ADC1)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <HAL_ADC_MspInit+0x70>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d122      	bne.n	80007a8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0x74>)
 8000764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <HAL_ADC_MspInit+0x74>)
 8000768:	2180      	movs	r1, #128	@ 0x80
 800076a:	0089      	lsls	r1, r1, #2
 800076c:	430a      	orrs	r2, r1
 800076e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <HAL_ADC_MspInit+0x74>)
 8000772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0x74>)
 8000776:	2101      	movs	r1, #1
 8000778:	430a      	orrs	r2, r1
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800077c:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <HAL_ADC_MspInit+0x74>)
 800077e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000780:	2201      	movs	r2, #1
 8000782:	4013      	ands	r3, r2
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000788:	193b      	adds	r3, r7, r4
 800078a:	2230      	movs	r2, #48	@ 0x30
 800078c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800078e:	193b      	adds	r3, r7, r4
 8000790:	2203      	movs	r2, #3
 8000792:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079a:	193a      	adds	r2, r7, r4
 800079c:	23a0      	movs	r3, #160	@ 0xa0
 800079e:	05db      	lsls	r3, r3, #23
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fe86 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b009      	add	sp, #36	@ 0x24
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	40012400 	.word	0x40012400
 80007b4:	40021000 	.word	0x40021000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	46c0      	nop			@ (mov r8, r8)
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f902 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b099      	sub	sp, #100	@ 0x64
 80007f0:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	242c      	movs	r4, #44	@ 0x2c
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	0018      	movs	r0, r3
 80007f8:	2334      	movs	r3, #52	@ 0x34
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f001 fe7b 	bl	80024f8 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000802:	2318      	movs	r3, #24
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	0018      	movs	r0, r3
 8000808:	2314      	movs	r3, #20
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f001 fe73 	bl	80024f8 <memset>
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000812:	003b      	movs	r3, r7
 8000814:	0018      	movs	r0, r3
 8000816:	2318      	movs	r3, #24
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f001 fe6c 	bl	80024f8 <memset>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000820:	4b2a      	ldr	r3, [pc, #168]	@ (80008cc <SystemClock_Config+0xe0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a2a      	ldr	r2, [pc, #168]	@ (80008d0 <SystemClock_Config+0xe4>)
 8000826:	401a      	ands	r2, r3
 8000828:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <SystemClock_Config+0xe0>)
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	0109      	lsls	r1, r1, #4
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000832:	0021      	movs	r1, r4
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2202      	movs	r2, #2
 8000838:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2210      	movs	r2, #16
 8000844:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2280      	movs	r2, #128	@ 0x80
 8000856:	02d2      	lsls	r2, r2, #11
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
	  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800085a:	187b      	adds	r3, r7, r1
 800085c:	2280      	movs	r2, #128	@ 0x80
 800085e:	03d2      	lsls	r2, r2, #15
 8000860:	631a      	str	r2, [r3, #48]	@ 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	187b      	adds	r3, r7, r1
 8000864:	0018      	movs	r0, r3
 8000866:	f000 ffb1 	bl	80017cc <HAL_RCC_OscConfig>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x86>
	  {
	    Error_Handler();
 800086e:	f000 f831 	bl	80008d4 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	2118      	movs	r1, #24
 8000874:	187b      	adds	r3, r7, r1
 8000876:	220f      	movs	r2, #15
 8000878:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2203      	movs	r2, #3
 800087e:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	22e0      	movs	r2, #224	@ 0xe0
 800088a:	00d2      	lsls	r2, r2, #3
 800088c:	60da      	str	r2, [r3, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	22e0      	movs	r2, #224	@ 0xe0
 8000892:	00d2      	lsls	r2, r2, #3
 8000894:	611a      	str	r2, [r3, #16]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2101      	movs	r1, #1
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fb12 	bl	8001ec4 <HAL_RCC_ClockConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xbc>
	  {
	    Error_Handler();
 80008a4:	f000 f816 	bl	80008d4 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2202      	movs	r2, #2
 80008ac:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ae:	003b      	movs	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	003b      	movs	r3, r7
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fcf2 	bl	80022a0 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xd8>
	  {
	    Error_Handler();
 80008c0:	f000 f808 	bl	80008d4 <Error_Handler>
	  }
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b019      	add	sp, #100	@ 0x64
 80008ca:	bd90      	pop	{r4, r7, pc}
 80008cc:	40007000 	.word	0x40007000
 80008d0:	ffffe7ff 	.word	0xffffe7ff

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	46c0      	nop			@ (mov r8, r8)

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	46c0      	nop			@ (mov r8, r8)
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	46c0      	nop			@ (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008ec:	480d      	ldr	r0, [pc, #52]	@ (8000924 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008ee:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f0:	f7ff fff6 	bl	80008e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	@ (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f001 fdf5 	bl	8002508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091e:	f7ff feed 	bl	80006fc <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
   ldr   r0, =_estack
 8000924:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000930:	08002594 	.word	0x08002594
  ldr r2, =_sbss
 8000934:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000938:	2000008c 	.word	0x2000008c

0800093c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_COMP_IRQHandler>
	...

08000940 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	2200      	movs	r2, #0
 800094a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <HAL_Init+0x3c>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_Init+0x3c>)
 8000952:	2140      	movs	r1, #64	@ 0x40
 8000954:	430a      	orrs	r2, r1
 8000956:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000958:	2000      	movs	r0, #0
 800095a:	f000 f811 	bl	8000980 <HAL_InitTick>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d003      	beq.n	800096a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
 8000968:	e001      	b.n	800096e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800096a:	f7ff fed5 	bl	8000718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b002      	add	sp, #8
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			@ (mov r8, r8)
 800097c:	40022000 	.word	0x40022000

08000980 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000988:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <HAL_InitTick+0x5c>)
 800098a:	681c      	ldr	r4, [r3, #0]
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <HAL_InitTick+0x60>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	0019      	movs	r1, r3
 8000992:	23fa      	movs	r3, #250	@ 0xfa
 8000994:	0098      	lsls	r0, r3, #2
 8000996:	f7ff fbb7 	bl	8000108 <__udivsi3>
 800099a:	0003      	movs	r3, r0
 800099c:	0019      	movs	r1, r3
 800099e:	0020      	movs	r0, r4
 80009a0:	f7ff fbb2 	bl	8000108 <__udivsi3>
 80009a4:	0003      	movs	r3, r0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fd77 	bl	800149a <HAL_SYSTICK_Config>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e00f      	b.n	80009d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d80b      	bhi.n	80009d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	2301      	movs	r3, #1
 80009be:	425b      	negs	r3, r3
 80009c0:	2200      	movs	r2, #0
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fd54 	bl	8001470 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_InitTick+0x64>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b003      	add	sp, #12
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <HAL_IncTick+0x1c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	001a      	movs	r2, r3
 80009f2:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <HAL_IncTick+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	18d2      	adds	r2, r2, r3
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <HAL_IncTick+0x20>)
 80009fa:	601a      	str	r2, [r3, #0]
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000088 	.word	0x20000088

08000a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b02      	ldr	r3, [pc, #8]	@ (8000a1c <HAL_GetTick+0x10>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	20000088 	.word	0x20000088

08000a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff fff0 	bl	8000a0c <HAL_GetTick>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	d005      	beq.n	8000a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a64 <HAL_Delay+0x44>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	001a      	movs	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	189b      	adds	r3, r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	f7ff ffe0 	bl	8000a0c <HAL_GetTick>
 8000a4c:	0002      	movs	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f7      	bhi.n	8000a48 <HAL_Delay+0x28>
  {
  }
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b004      	add	sp, #16
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	20000008 	.word	0x20000008

08000a68 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	e159      	b.n	8000d2e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10a      	bne.n	8000a98 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2250      	movs	r2, #80	@ 0x50
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fe54 	bl	8000740 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a9c:	2210      	movs	r2, #16
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b10      	cmp	r3, #16
 8000aa2:	d005      	beq.n	8000ab0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	2204      	movs	r2, #4
 8000aac:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000aae:	d00b      	beq.n	8000ac8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ab4:	2210      	movs	r2, #16
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2250      	movs	r2, #80	@ 0x50
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e132      	b.n	8000d2e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000acc:	4a9a      	ldr	r2, [pc, #616]	@ (8000d38 <HAL_ADC_Init+0x2d0>)
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	2203      	movs	r2, #3
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d108      	bne.n	8000af8 <HAL_ADC_Init+0x90>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2201      	movs	r2, #1
 8000aee:	4013      	ands	r3, r2
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d101      	bne.n	8000af8 <HAL_ADC_Init+0x90>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <HAL_ADC_Init+0x92>
 8000af8:	2300      	movs	r3, #0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d149      	bne.n	8000b92 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	23c0      	movs	r3, #192	@ 0xc0
 8000b04:	061b      	lsls	r3, r3, #24
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d00b      	beq.n	8000b22 <HAL_ADC_Init+0xba>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	@ 0x80
 8000b10:	05db      	lsls	r3, r3, #23
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d005      	beq.n	8000b22 <HAL_ADC_Init+0xba>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	685a      	ldr	r2, [r3, #4]
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	061b      	lsls	r3, r3, #24
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d111      	bne.n	8000b46 <HAL_ADC_Init+0xde>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	691a      	ldr	r2, [r3, #16]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0092      	lsls	r2, r2, #2
 8000b2e:	0892      	lsrs	r2, r2, #2
 8000b30:	611a      	str	r2, [r3, #16]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6919      	ldr	r1, [r3, #16]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	430a      	orrs	r2, r1
 8000b42:	611a      	str	r2, [r3, #16]
 8000b44:	e014      	b.n	8000b70 <HAL_ADC_Init+0x108>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	691a      	ldr	r2, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	0092      	lsls	r2, r2, #2
 8000b52:	0892      	lsrs	r2, r2, #2
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	4b79      	ldr	r3, [pc, #484]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b78      	ldr	r3, [pc, #480]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000b5c:	4978      	ldr	r1, [pc, #480]	@ (8000d40 <HAL_ADC_Init+0x2d8>)
 8000b5e:	400a      	ands	r2, r1
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	4b76      	ldr	r3, [pc, #472]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685a      	ldr	r2, [r3, #4]
 8000b6a:	4b74      	ldr	r3, [pc, #464]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2118      	movs	r1, #24
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68d9      	ldr	r1, [r3, #12]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000b92:	4b6a      	ldr	r3, [pc, #424]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	4b69      	ldr	r3, [pc, #420]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000b98:	496a      	ldr	r1, [pc, #424]	@ (8000d44 <HAL_ADC_Init+0x2dc>)
 8000b9a:	400a      	ands	r2, r1
 8000b9c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000b9e:	4b67      	ldr	r3, [pc, #412]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000ba0:	6819      	ldr	r1, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba6:	065a      	lsls	r2, r3, #25
 8000ba8:	4b64      	ldr	r3, [pc, #400]	@ (8000d3c <HAL_ADC_Init+0x2d4>)
 8000baa:	430a      	orrs	r2, r1
 8000bac:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	2380      	movs	r3, #128	@ 0x80
 8000bb6:	055b      	lsls	r3, r3, #21
 8000bb8:	4013      	ands	r3, r2
 8000bba:	d108      	bne.n	8000bce <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	0549      	lsls	r1, r1, #21
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	495b      	ldr	r1, [pc, #364]	@ (8000d48 <HAL_ADC_Init+0x2e0>)
 8000bda:	400a      	ands	r2, r1
 8000bdc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68d9      	ldr	r1, [r3, #12]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d101      	bne.n	8000bf4 <HAL_ADC_Init+0x18c>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	e000      	b.n	8000bf6 <HAL_ADC_Init+0x18e>
 8000bf4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000bf6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2020      	movs	r0, #32
 8000bfc:	5c1b      	ldrb	r3, [r3, r0]
 8000bfe:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c00:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	202c      	movs	r0, #44	@ 0x2c
 8000c06:	5c1b      	ldrb	r3, [r3, r0]
 8000c08:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c0a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000c18:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c20:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000c2e:	23c2      	movs	r3, #194	@ 0xc2
 8000c30:	33ff      	adds	r3, #255	@ 0xff
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d00b      	beq.n	8000c4e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68d9      	ldr	r1, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000c44:	431a      	orrs	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2221      	movs	r2, #33	@ 0x21
 8000c52:	5c9b      	ldrb	r3, [r3, r2]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d11a      	bne.n	8000c8e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2220      	movs	r2, #32
 8000c5c:	5c9b      	ldrb	r3, [r3, r2]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d109      	bne.n	8000c76 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2180      	movs	r1, #128	@ 0x80
 8000c6e:	0249      	lsls	r1, r1, #9
 8000c70:	430a      	orrs	r2, r1
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	e00b      	b.n	8000c8e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c86:	2201      	movs	r2, #1
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d11f      	bne.n	8000cd6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	691a      	ldr	r2, [r3, #16]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	492a      	ldr	r1, [pc, #168]	@ (8000d4c <HAL_ADC_Init+0x2e4>)
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6919      	ldr	r1, [r3, #16]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000cb4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000cba:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2101      	movs	r1, #1
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	e00e      	b.n	8000cf4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	691b      	ldr	r3, [r3, #16]
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4013      	ands	r3, r2
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d107      	bne.n	8000cf4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	691a      	ldr	r2, [r3, #16]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2101      	movs	r1, #1
 8000cf0:	438a      	bics	r2, r1
 8000cf2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2107      	movs	r1, #7
 8000d00:	438a      	bics	r2, r1
 8000d02:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6959      	ldr	r1, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	430a      	orrs	r2, r1
 8000d14:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d20:	2203      	movs	r2, #3
 8000d22:	4393      	bics	r3, r2
 8000d24:	2201      	movs	r2, #1
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	fffffefd 	.word	0xfffffefd
 8000d3c:	40012708 	.word	0x40012708
 8000d40:	ffc3ffff 	.word	0xffc3ffff
 8000d44:	fdffffff 	.word	0xfdffffff
 8000d48:	fffe0219 	.word	0xfffe0219
 8000d4c:	fffffc03 	.word	0xfffffc03

08000d50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d58:	230f      	movs	r3, #15
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2204      	movs	r2, #4
 8000d68:	4013      	ands	r3, r2
 8000d6a:	d138      	bne.n	8000dde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2250      	movs	r2, #80	@ 0x50
 8000d70:	5c9b      	ldrb	r3, [r3, r2]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d101      	bne.n	8000d7a <HAL_ADC_Start+0x2a>
 8000d76:	2302      	movs	r3, #2
 8000d78:	e038      	b.n	8000dec <HAL_ADC_Start+0x9c>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2250      	movs	r2, #80	@ 0x50
 8000d7e:	2101      	movs	r1, #1
 8000d80:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d007      	beq.n	8000d9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d8a:	230f      	movs	r3, #15
 8000d8c:	18fc      	adds	r4, r7, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 f99f 	bl	80010d4 <ADC_Enable>
 8000d96:	0003      	movs	r3, r0
 8000d98:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fb      	adds	r3, r7, r3
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d120      	bne.n	8000de6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000da8:	4a12      	ldr	r2, [pc, #72]	@ (8000df4 <HAL_ADC_Start+0xa4>)
 8000daa:	4013      	ands	r3, r2
 8000dac:	2280      	movs	r2, #128	@ 0x80
 8000dae:	0052      	lsls	r2, r2, #1
 8000db0:	431a      	orrs	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2250      	movs	r2, #80	@ 0x50
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	221c      	movs	r2, #28
 8000dca:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689a      	ldr	r2, [r3, #8]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2104      	movs	r1, #4
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	e003      	b.n	8000de6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dde:	230f      	movs	r3, #15
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000de6:	230f      	movs	r3, #15
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b005      	add	sp, #20
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	fffff0fe 	.word	0xfffff0fe

08000df8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000df8:	b5b0      	push	{r4, r5, r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2250      	movs	r2, #80	@ 0x50
 8000e0c:	5c9b      	ldrb	r3, [r3, r2]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d101      	bne.n	8000e16 <HAL_ADC_Stop+0x1e>
 8000e12:	2302      	movs	r3, #2
 8000e14:	e029      	b.n	8000e6a <HAL_ADC_Stop+0x72>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2250      	movs	r2, #80	@ 0x50
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000e1e:	250f      	movs	r5, #15
 8000e20:	197c      	adds	r4, r7, r5
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fa24 	bl	8001272 <ADC_ConversionStop>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d112      	bne.n	8000e5c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e36:	197c      	adds	r4, r7, r5
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 f9b2 	bl	80011a4 <ADC_Disable>
 8000e40:	0003      	movs	r3, r0
 8000e42:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e44:	197b      	adds	r3, r7, r5
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d107      	bne.n	8000e5c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e50:	4a08      	ldr	r2, [pc, #32]	@ (8000e74 <HAL_ADC_Stop+0x7c>)
 8000e52:	4013      	ands	r3, r2
 8000e54:	2201      	movs	r2, #1
 8000e56:	431a      	orrs	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2250      	movs	r2, #80	@ 0x50
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b004      	add	sp, #16
 8000e70:	bdb0      	pop	{r4, r5, r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	fffffefe 	.word	0xfffffefe

08000e78 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d102      	bne.n	8000e98 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e92:	2308      	movs	r3, #8
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	e014      	b.n	8000ec2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d10b      	bne.n	8000ebe <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eaa:	2220      	movs	r2, #32
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2250      	movs	r2, #80	@ 0x50
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e072      	b.n	8000fa4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000ec2:	f7ff fda3 	bl	8000a0c <HAL_GetTick>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000eca:	e01f      	b.n	8000f0c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	d01c      	beq.n	8000f0c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d007      	beq.n	8000ee8 <HAL_ADC_PollForConversion+0x70>
 8000ed8:	f7ff fd98 	bl	8000a0c <HAL_GetTick>
 8000edc:	0002      	movs	r2, r0
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d211      	bcs.n	8000f0c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d10b      	bne.n	8000f0c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ef8:	2204      	movs	r2, #4
 8000efa:	431a      	orrs	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2250      	movs	r2, #80	@ 0x50
 8000f04:	2100      	movs	r1, #0
 8000f06:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e04b      	b.n	8000fa4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4013      	ands	r3, r2
 8000f16:	d0d9      	beq.n	8000ecc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f1c:	2280      	movs	r2, #128	@ 0x80
 8000f1e:	0092      	lsls	r2, r2, #2
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	23c0      	movs	r3, #192	@ 0xc0
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4013      	ands	r3, r2
 8000f32:	d12e      	bne.n	8000f92 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2220      	movs	r2, #32
 8000f38:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d129      	bne.n	8000f92 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2208      	movs	r2, #8
 8000f46:	4013      	ands	r3, r2
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d122      	bne.n	8000f92 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2204      	movs	r2, #4
 8000f54:	4013      	ands	r3, r2
 8000f56:	d110      	bne.n	8000f7a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685a      	ldr	r2, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	210c      	movs	r1, #12
 8000f64:	438a      	bics	r2, r1
 8000f66:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <HAL_ADC_PollForConversion+0x134>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2201      	movs	r2, #1
 8000f72:	431a      	orrs	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f78:	e00b      	b.n	8000f92 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f7e:	2220      	movs	r2, #32
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b004      	add	sp, #16
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	fffffefe 	.word	0xfffffefe

08000fb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2250      	movs	r2, #80	@ 0x50
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x18>
 8000fdc:	2302      	movs	r3, #2
 8000fde:	e06c      	b.n	80010ba <HAL_ADC_ConfigChannel+0xf2>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2250      	movs	r2, #80	@ 0x50
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2204      	movs	r2, #4
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d00b      	beq.n	800100c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff8:	2220      	movs	r2, #32
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2250      	movs	r2, #80	@ 0x50
 8001004:	2100      	movs	r1, #0
 8001006:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e056      	b.n	80010ba <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	4a2c      	ldr	r2, [pc, #176]	@ (80010c4 <HAL_ADC_ConfigChannel+0xfc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d028      	beq.n	8001068 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	035b      	lsls	r3, r3, #13
 8001022:	0b5a      	lsrs	r2, r3, #13
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	02db      	lsls	r3, r3, #11
 8001034:	4013      	ands	r3, r2
 8001036:	d009      	beq.n	800104c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001038:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 800103e:	2180      	movs	r1, #128	@ 0x80
 8001040:	0409      	lsls	r1, r1, #16
 8001042:	430a      	orrs	r2, r1
 8001044:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001046:	200a      	movs	r0, #10
 8001048:	f000 f960 	bl	800130c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	@ 0x80
 8001052:	029b      	lsls	r3, r3, #10
 8001054:	4013      	ands	r3, r2
 8001056:	d02b      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 800105e:	2180      	movs	r1, #128	@ 0x80
 8001060:	03c9      	lsls	r1, r1, #15
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e023      	b.n	80010b0 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	035b      	lsls	r3, r3, #13
 8001074:	0b5b      	lsrs	r3, r3, #13
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	400a      	ands	r2, r1
 800107e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	2380      	movs	r3, #128	@ 0x80
 8001086:	02db      	lsls	r3, r3, #11
 8001088:	4013      	ands	r3, r2
 800108a:	d005      	beq.n	8001098 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 8001092:	490e      	ldr	r1, [pc, #56]	@ (80010cc <HAL_ADC_ConfigChannel+0x104>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2380      	movs	r3, #128	@ 0x80
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	4013      	ands	r3, r2
 80010a2:	d005      	beq.n	80010b0 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <HAL_ADC_ConfigChannel+0x100>)
 80010aa:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <HAL_ADC_ConfigChannel+0x108>)
 80010ac:	400a      	ands	r2, r1
 80010ae:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2250      	movs	r2, #80	@ 0x50
 80010b4:	2100      	movs	r1, #0
 80010b6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	00001001 	.word	0x00001001
 80010c8:	40012708 	.word	0x40012708
 80010cc:	ff7fffff 	.word	0xff7fffff
 80010d0:	ffbfffff 	.word	0xffbfffff

080010d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2203      	movs	r2, #3
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <ADC_Enable+0x2c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <ADC_Enable+0x2c>
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <ADC_Enable+0x2e>
 8001100:	2300      	movs	r3, #0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d146      	bne.n	8001194 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4a24      	ldr	r2, [pc, #144]	@ (80011a0 <ADC_Enable+0xcc>)
 800110e:	4013      	ands	r3, r2
 8001110:	d00d      	beq.n	800112e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	2210      	movs	r2, #16
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001122:	2201      	movs	r2, #1
 8001124:	431a      	orrs	r2, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e033      	b.n	8001196 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2101      	movs	r1, #1
 800113a:	430a      	orrs	r2, r1
 800113c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800113e:	2001      	movs	r0, #1
 8001140:	f000 f8e4 	bl	800130c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001144:	f7ff fc62 	bl	8000a0c <HAL_GetTick>
 8001148:	0003      	movs	r3, r0
 800114a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800114c:	e01b      	b.n	8001186 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800114e:	f7ff fc5d 	bl	8000a0c <HAL_GetTick>
 8001152:	0002      	movs	r2, r0
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b0a      	cmp	r3, #10
 800115a:	d914      	bls.n	8001186 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	2b01      	cmp	r3, #1
 8001168:	d00d      	beq.n	8001186 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800116e:	2210      	movs	r2, #16
 8001170:	431a      	orrs	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117a:	2201      	movs	r2, #1
 800117c:	431a      	orrs	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e007      	b.n	8001196 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	4013      	ands	r3, r2
 8001190:	2b01      	cmp	r3, #1
 8001192:	d1dc      	bne.n	800114e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	0018      	movs	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	b004      	add	sp, #16
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	80000017 	.word	0x80000017

080011a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2203      	movs	r2, #3
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <ADC_Disable+0x2c>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <ADC_Disable+0x2c>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <ADC_Disable+0x2e>
 80011d0:	2300      	movs	r3, #0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d048      	beq.n	8001268 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2205      	movs	r2, #5
 80011de:	4013      	ands	r3, r2
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d110      	bne.n	8001206 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2102      	movs	r1, #2
 80011f0:	430a      	orrs	r2, r1
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2203      	movs	r2, #3
 80011fa:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011fc:	f7ff fc06 	bl	8000a0c <HAL_GetTick>
 8001200:	0003      	movs	r3, r0
 8001202:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001204:	e029      	b.n	800125a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800120a:	2210      	movs	r2, #16
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001216:	2201      	movs	r2, #1
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e023      	b.n	800126a <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001222:	f7ff fbf3 	bl	8000a0c <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b0a      	cmp	r3, #10
 800122e:	d914      	bls.n	800125a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2201      	movs	r2, #1
 8001238:	4013      	ands	r3, r2
 800123a:	2b01      	cmp	r3, #1
 800123c:	d10d      	bne.n	800125a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001242:	2210      	movs	r2, #16
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	2201      	movs	r2, #1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e007      	b.n	800126a <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2201      	movs	r2, #1
 8001262:	4013      	ands	r3, r2
 8001264:	2b01      	cmp	r3, #1
 8001266:	d0dc      	beq.n	8001222 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}

08001272 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2204      	movs	r2, #4
 8001286:	4013      	ands	r3, r2
 8001288:	d03a      	beq.n	8001300 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2204      	movs	r2, #4
 8001292:	4013      	ands	r3, r2
 8001294:	2b04      	cmp	r3, #4
 8001296:	d10d      	bne.n	80012b4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2202      	movs	r2, #2
 80012a0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80012a2:	d107      	bne.n	80012b4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2110      	movs	r1, #16
 80012b0:	430a      	orrs	r2, r1
 80012b2:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012b4:	f7ff fbaa 	bl	8000a0c <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80012bc:	e01a      	b.n	80012f4 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80012be:	f7ff fba5 	bl	8000a0c <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b0a      	cmp	r3, #10
 80012ca:	d913      	bls.n	80012f4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2204      	movs	r2, #4
 80012d4:	4013      	ands	r3, r2
 80012d6:	d00d      	beq.n	80012f4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012dc:	2210      	movs	r2, #16
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e8:	2201      	movs	r2, #1
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e006      	b.n	8001302 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4013      	ands	r3, r2
 80012fe:	d1de      	bne.n	80012be <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	0018      	movs	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <ADC_DelayMicroSecond+0x38>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	490b      	ldr	r1, [pc, #44]	@ (8001348 <ADC_DelayMicroSecond+0x3c>)
 800131a:	0018      	movs	r0, r3
 800131c:	f7fe fef4 	bl	8000108 <__udivsi3>
 8001320:	0003      	movs	r3, r0
 8001322:	001a      	movs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4353      	muls	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800132a:	e002      	b.n	8001332 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b01      	subs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <ADC_DelayMicroSecond+0x20>
  }
}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46c0      	nop			@ (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b004      	add	sp, #16
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	20000000 	.word	0x20000000
 8001348:	000f4240 	.word	0x000f4240

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001360:	d828      	bhi.n	80013b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001362:	4a2f      	ldr	r2, [pc, #188]	@ (8001420 <__NVIC_SetPriority+0xd4>)
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b25b      	sxtb	r3, r3
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	33c0      	adds	r3, #192	@ 0xc0
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	589b      	ldr	r3, [r3, r2]
 8001372:	1dfa      	adds	r2, r7, #7
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	0011      	movs	r1, r2
 8001378:	2203      	movs	r2, #3
 800137a:	400a      	ands	r2, r1
 800137c:	00d2      	lsls	r2, r2, #3
 800137e:	21ff      	movs	r1, #255	@ 0xff
 8001380:	4091      	lsls	r1, r2
 8001382:	000a      	movs	r2, r1
 8001384:	43d2      	mvns	r2, r2
 8001386:	401a      	ands	r2, r3
 8001388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	019b      	lsls	r3, r3, #6
 800138e:	22ff      	movs	r2, #255	@ 0xff
 8001390:	401a      	ands	r2, r3
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	0018      	movs	r0, r3
 8001398:	2303      	movs	r3, #3
 800139a:	4003      	ands	r3, r0
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a0:	481f      	ldr	r0, [pc, #124]	@ (8001420 <__NVIC_SetPriority+0xd4>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	430a      	orrs	r2, r1
 80013ac:	33c0      	adds	r3, #192	@ 0xc0
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013b2:	e031      	b.n	8001418 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001424 <__NVIC_SetPriority+0xd8>)
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	0019      	movs	r1, r3
 80013bc:	230f      	movs	r3, #15
 80013be:	400b      	ands	r3, r1
 80013c0:	3b08      	subs	r3, #8
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	3306      	adds	r3, #6
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	18d3      	adds	r3, r2, r3
 80013ca:	3304      	adds	r3, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	1dfa      	adds	r2, r7, #7
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	0011      	movs	r1, r2
 80013d4:	2203      	movs	r2, #3
 80013d6:	400a      	ands	r2, r1
 80013d8:	00d2      	lsls	r2, r2, #3
 80013da:	21ff      	movs	r1, #255	@ 0xff
 80013dc:	4091      	lsls	r1, r2
 80013de:	000a      	movs	r2, r1
 80013e0:	43d2      	mvns	r2, r2
 80013e2:	401a      	ands	r2, r3
 80013e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	019b      	lsls	r3, r3, #6
 80013ea:	22ff      	movs	r2, #255	@ 0xff
 80013ec:	401a      	ands	r2, r3
 80013ee:	1dfb      	adds	r3, r7, #7
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	0018      	movs	r0, r3
 80013f4:	2303      	movs	r3, #3
 80013f6:	4003      	ands	r3, r0
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013fc:	4809      	ldr	r0, [pc, #36]	@ (8001424 <__NVIC_SetPriority+0xd8>)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	001c      	movs	r4, r3
 8001404:	230f      	movs	r3, #15
 8001406:	4023      	ands	r3, r4
 8001408:	3b08      	subs	r3, #8
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	430a      	orrs	r2, r1
 800140e:	3306      	adds	r3, #6
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	18c3      	adds	r3, r0, r3
 8001414:	3304      	adds	r3, #4
 8001416:	601a      	str	r2, [r3, #0]
}
 8001418:	46c0      	nop			@ (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	b003      	add	sp, #12
 800141e:	bd90      	pop	{r4, r7, pc}
 8001420:	e000e100 	.word	0xe000e100
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	1e5a      	subs	r2, r3, #1
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	045b      	lsls	r3, r3, #17
 8001438:	429a      	cmp	r2, r3
 800143a:	d301      	bcc.n	8001440 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143c:	2301      	movs	r3, #1
 800143e:	e010      	b.n	8001462 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <SysTick_Config+0x44>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	3a01      	subs	r2, #1
 8001446:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001448:	2301      	movs	r3, #1
 800144a:	425b      	negs	r3, r3
 800144c:	2103      	movs	r1, #3
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff ff7c 	bl	800134c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	@ (800146c <SysTick_Config+0x44>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	@ (800146c <SysTick_Config+0x44>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b002      	add	sp, #8
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	210f      	movs	r1, #15
 800147c:	187b      	adds	r3, r7, r1
 800147e:	1c02      	adds	r2, r0, #0
 8001480:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001482:	68ba      	ldr	r2, [r7, #8]
 8001484:	187b      	adds	r3, r7, r1
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f7ff ff5d 	bl	800134c <__NVIC_SetPriority>
}
 8001492:	46c0      	nop			@ (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	b004      	add	sp, #16
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	0018      	movs	r0, r3
 80014a6:	f7ff ffbf 	bl	8001428 <SysTick_Config>
 80014aa:	0003      	movs	r3, r0
}
 80014ac:	0018      	movs	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	b002      	add	sp, #8
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ca:	e149      	b.n	8001760 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2101      	movs	r1, #1
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	4091      	lsls	r1, r2
 80014d6:	000a      	movs	r2, r1
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d100      	bne.n	80014e4 <HAL_GPIO_Init+0x30>
 80014e2:	e13a      	b.n	800175a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2203      	movs	r2, #3
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d005      	beq.n	80014fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d130      	bne.n	800155e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	409a      	lsls	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	43da      	mvns	r2, r3
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	68da      	ldr	r2, [r3, #12]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	409a      	lsls	r2, r3
 800151e:	0013      	movs	r3, r2
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001532:	2201      	movs	r2, #1
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	091b      	lsrs	r3, r3, #4
 8001548:	2201      	movs	r2, #1
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	4013      	ands	r3, r2
 8001566:	2b03      	cmp	r3, #3
 8001568:	d017      	beq.n	800159a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	409a      	lsls	r2, r3
 8001578:	0013      	movs	r3, r2
 800157a:	43da      	mvns	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2203      	movs	r2, #3
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d123      	bne.n	80015ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	58d3      	ldr	r3, [r2, r3]
 80015b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	2207      	movs	r2, #7
 80015b8:	4013      	ands	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	409a      	lsls	r2, r3
 80015c0:	0013      	movs	r3, r2
 80015c2:	43da      	mvns	r2, r3
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	691a      	ldr	r2, [r3, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2107      	movs	r1, #7
 80015d2:	400b      	ands	r3, r1
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	409a      	lsls	r2, r3
 80015d8:	0013      	movs	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	6939      	ldr	r1, [r7, #16]
 80015ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	2203      	movs	r2, #3
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	43da      	mvns	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2203      	movs	r2, #3
 800160c:	401a      	ands	r2, r3
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	23c0      	movs	r3, #192	@ 0xc0
 8001628:	029b      	lsls	r3, r3, #10
 800162a:	4013      	ands	r3, r2
 800162c:	d100      	bne.n	8001630 <HAL_GPIO_Init+0x17c>
 800162e:	e094      	b.n	800175a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001630:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 8001632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001634:	4b50      	ldr	r3, [pc, #320]	@ (8001778 <HAL_GPIO_Init+0x2c4>)
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800163c:	4a4f      	ldr	r2, [pc, #316]	@ (800177c <HAL_GPIO_Init+0x2c8>)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	089b      	lsrs	r3, r3, #2
 8001642:	3302      	adds	r3, #2
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	589b      	ldr	r3, [r3, r2]
 8001648:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2203      	movs	r2, #3
 800164e:	4013      	ands	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	220f      	movs	r2, #15
 8001654:	409a      	lsls	r2, r3
 8001656:	0013      	movs	r3, r2
 8001658:	43da      	mvns	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	23a0      	movs	r3, #160	@ 0xa0
 8001664:	05db      	lsls	r3, r3, #23
 8001666:	429a      	cmp	r2, r3
 8001668:	d013      	beq.n	8001692 <HAL_GPIO_Init+0x1de>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a44      	ldr	r2, [pc, #272]	@ (8001780 <HAL_GPIO_Init+0x2cc>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d00d      	beq.n	800168e <HAL_GPIO_Init+0x1da>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a43      	ldr	r2, [pc, #268]	@ (8001784 <HAL_GPIO_Init+0x2d0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d007      	beq.n	800168a <HAL_GPIO_Init+0x1d6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a42      	ldr	r2, [pc, #264]	@ (8001788 <HAL_GPIO_Init+0x2d4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d101      	bne.n	8001686 <HAL_GPIO_Init+0x1d2>
 8001682:	2305      	movs	r3, #5
 8001684:	e006      	b.n	8001694 <HAL_GPIO_Init+0x1e0>
 8001686:	2306      	movs	r3, #6
 8001688:	e004      	b.n	8001694 <HAL_GPIO_Init+0x1e0>
 800168a:	2302      	movs	r3, #2
 800168c:	e002      	b.n	8001694 <HAL_GPIO_Init+0x1e0>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <HAL_GPIO_Init+0x1e0>
 8001692:	2300      	movs	r3, #0
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	2103      	movs	r1, #3
 8001698:	400a      	ands	r2, r1
 800169a:	0092      	lsls	r2, r2, #2
 800169c:	4093      	lsls	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016a4:	4935      	ldr	r1, [pc, #212]	@ (800177c <HAL_GPIO_Init+0x2c8>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016b2:	4b36      	ldr	r3, [pc, #216]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	43da      	mvns	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	035b      	lsls	r3, r3, #13
 80016ca:	4013      	ands	r3, r2
 80016cc:	d003      	beq.n	80016d6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016dc:	4b2b      	ldr	r3, [pc, #172]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	43da      	mvns	r2, r3
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	039b      	lsls	r3, r3, #14
 80016f4:	4013      	ands	r3, r2
 80016f6:	d003      	beq.n	8001700 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001706:	4b21      	ldr	r3, [pc, #132]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	43da      	mvns	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	2380      	movs	r3, #128	@ 0x80
 800171c:	029b      	lsls	r3, r3, #10
 800171e:	4013      	ands	r3, r2
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001730:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	43da      	mvns	r2, r3
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	2380      	movs	r3, #128	@ 0x80
 8001746:	025b      	lsls	r3, r3, #9
 8001748:	4013      	ands	r3, r2
 800174a:	d003      	beq.n	8001754 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001754:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_GPIO_Init+0x2d8>)
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	40da      	lsrs	r2, r3
 8001768:	1e13      	subs	r3, r2, #0
 800176a:	d000      	beq.n	800176e <HAL_GPIO_Init+0x2ba>
 800176c:	e6ae      	b.n	80014cc <HAL_GPIO_Init+0x18>
  }
}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	46c0      	nop			@ (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	b006      	add	sp, #24
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	50000400 	.word	0x50000400
 8001784:	50000800 	.word	0x50000800
 8001788:	50001c00 	.word	0x50001c00
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	0008      	movs	r0, r1
 800179a:	0011      	movs	r1, r2
 800179c:	1cbb      	adds	r3, r7, #2
 800179e:	1c02      	adds	r2, r0, #0
 80017a0:	801a      	strh	r2, [r3, #0]
 80017a2:	1c7b      	adds	r3, r7, #1
 80017a4:	1c0a      	adds	r2, r1, #0
 80017a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a8:	1c7b      	adds	r3, r7, #1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b0:	1cbb      	adds	r3, r7, #2
 80017b2:	881a      	ldrh	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017b8:	e003      	b.n	80017c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017ba:	1cbb      	adds	r3, r7, #2
 80017bc:	881a      	ldrh	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	46bd      	mov	sp, r7
 80017c6:	b002      	add	sp, #8
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	f000 fb6c 	bl	8001eb8 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e0:	4bc8      	ldr	r3, [pc, #800]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	220c      	movs	r2, #12
 80017e6:	4013      	ands	r3, r2
 80017e8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017ea:	4bc6      	ldr	r3, [pc, #792]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80017ec:	68da      	ldr	r2, [r3, #12]
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4013      	ands	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d100      	bne.n	8001802 <HAL_RCC_OscConfig+0x36>
 8001800:	e07d      	b.n	80018fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d007      	beq.n	8001818 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	2b0c      	cmp	r3, #12
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x68>
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	025b      	lsls	r3, r3, #9
 8001814:	429a      	cmp	r2, r3
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001818:	4bba      	ldr	r3, [pc, #744]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2380      	movs	r3, #128	@ 0x80
 800181e:	029b      	lsls	r3, r3, #10
 8001820:	4013      	ands	r3, r2
 8001822:	d100      	bne.n	8001826 <HAL_RCC_OscConfig+0x5a>
 8001824:	e06a      	b.n	80018fc <HAL_RCC_OscConfig+0x130>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d166      	bne.n	80018fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	f000 fb42 	bl	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	025b      	lsls	r3, r3, #9
 800183c:	429a      	cmp	r2, r3
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x84>
 8001840:	4bb0      	ldr	r3, [pc, #704]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	4baf      	ldr	r3, [pc, #700]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001846:	2180      	movs	r1, #128	@ 0x80
 8001848:	0249      	lsls	r1, r1, #9
 800184a:	430a      	orrs	r2, r1
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	e027      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	23a0      	movs	r3, #160	@ 0xa0
 8001856:	02db      	lsls	r3, r3, #11
 8001858:	429a      	cmp	r2, r3
 800185a:	d10e      	bne.n	800187a <HAL_RCC_OscConfig+0xae>
 800185c:	4ba9      	ldr	r3, [pc, #676]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4ba8      	ldr	r3, [pc, #672]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	02c9      	lsls	r1, r1, #11
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	4ba6      	ldr	r3, [pc, #664]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4ba5      	ldr	r3, [pc, #660]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	0249      	lsls	r1, r1, #9
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e012      	b.n	80018a0 <HAL_RCC_OscConfig+0xd4>
 800187a:	4ba2      	ldr	r3, [pc, #648]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4ba1      	ldr	r3, [pc, #644]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001880:	49a1      	ldr	r1, [pc, #644]	@ (8001b08 <HAL_RCC_OscConfig+0x33c>)
 8001882:	400a      	ands	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	4b9f      	ldr	r3, [pc, #636]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	@ 0x80
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4b9b      	ldr	r3, [pc, #620]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b9a      	ldr	r3, [pc, #616]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800189a:	499c      	ldr	r1, [pc, #624]	@ (8001b0c <HAL_RCC_OscConfig+0x340>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d014      	beq.n	80018d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff f8b0 	bl	8000a0c <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b2:	f7ff f8ab 	bl	8000a0c <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	@ 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e2f9      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	2380      	movs	r3, #128	@ 0x80
 80018ca:	029b      	lsls	r3, r3, #10
 80018cc:	4013      	ands	r3, r2
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0xe6>
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff f89b 	bl	8000a0c <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f896 	bl	8000a0c <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e2e4      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ee:	4b85      	ldr	r3, [pc, #532]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	029b      	lsls	r3, r3, #10
 80018f6:	4013      	ands	r3, r2
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x110>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d100      	bne.n	800190a <HAL_RCC_OscConfig+0x13e>
 8001908:	e099      	b.n	8001a3e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	2220      	movs	r2, #32
 8001914:	4013      	ands	r3, r2
 8001916:	d009      	beq.n	800192c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001918:	4b7a      	ldr	r3, [pc, #488]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b79      	ldr	r3, [pc, #484]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800191e:	2120      	movs	r1, #32
 8001920:	430a      	orrs	r2, r1
 8001922:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	2220      	movs	r2, #32
 8001928:	4393      	bics	r3, r2
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b04      	cmp	r3, #4
 8001930:	d005      	beq.n	800193e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	2b0c      	cmp	r3, #12
 8001936:	d13e      	bne.n	80019b6 <HAL_RCC_OscConfig+0x1ea>
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d13b      	bne.n	80019b6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800193e:	4b71      	ldr	r3, [pc, #452]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2204      	movs	r2, #4
 8001944:	4013      	ands	r3, r2
 8001946:	d004      	beq.n	8001952 <HAL_RCC_OscConfig+0x186>
 8001948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e2b2      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	4b6c      	ldr	r3, [pc, #432]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	4a6e      	ldr	r2, [pc, #440]	@ (8001b10 <HAL_RCC_OscConfig+0x344>)
 8001958:	4013      	ands	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	021a      	lsls	r2, r3, #8
 8001962:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2209      	movs	r2, #9
 800196e:	4393      	bics	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	4b64      	ldr	r3, [pc, #400]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197a:	f000 fbeb 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 800197e:	0001      	movs	r1, r0
 8001980:	4b60      	ldr	r3, [pc, #384]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	220f      	movs	r2, #15
 8001988:	4013      	ands	r3, r2
 800198a:	4a62      	ldr	r2, [pc, #392]	@ (8001b14 <HAL_RCC_OscConfig+0x348>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	000a      	movs	r2, r1
 8001990:	40da      	lsrs	r2, r3
 8001992:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <HAL_RCC_OscConfig+0x34c>)
 8001994:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001996:	4b61      	ldr	r3, [pc, #388]	@ (8001b1c <HAL_RCC_OscConfig+0x350>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2513      	movs	r5, #19
 800199c:	197c      	adds	r4, r7, r5
 800199e:	0018      	movs	r0, r3
 80019a0:	f7fe ffee 	bl	8000980 <HAL_InitTick>
 80019a4:	0003      	movs	r3, r0
 80019a6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80019a8:	197b      	adds	r3, r7, r5
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d046      	beq.n	8001a3e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80019b0:	197b      	adds	r3, r7, r5
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	e280      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d027      	beq.n	8001a0c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019bc:	4b51      	ldr	r3, [pc, #324]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2209      	movs	r2, #9
 80019c2:	4393      	bics	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff f81d 	bl	8000a0c <HAL_GetTick>
 80019d2:	0003      	movs	r3, r0
 80019d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff f818 	bl	8000a0c <HAL_GetTick>
 80019dc:	0002      	movs	r2, r0
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e266      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2204      	movs	r2, #4
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f1      	beq.n	80019d8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b43      	ldr	r3, [pc, #268]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	4a45      	ldr	r2, [pc, #276]	@ (8001b10 <HAL_RCC_OscConfig+0x344>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	021a      	lsls	r2, r3, #8
 8001a04:	4b3f      	ldr	r3, [pc, #252]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a06:	430a      	orrs	r2, r1
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	e018      	b.n	8001a3e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b3c      	ldr	r3, [pc, #240]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7fe fff8 	bl	8000a0c <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a22:	f7fe fff3 	bl	8000a0c <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e241      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a34:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d1f1      	bne.n	8001a22 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2210      	movs	r2, #16
 8001a44:	4013      	ands	r3, r2
 8001a46:	d100      	bne.n	8001a4a <HAL_RCC_OscConfig+0x27e>
 8001a48:	e0a1      	b.n	8001b8e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d140      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a50:	4b2c      	ldr	r3, [pc, #176]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	@ 0x80
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_OscConfig+0x29c>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e227      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a68:	4b26      	ldr	r3, [pc, #152]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001b20 <HAL_RCC_OscConfig+0x354>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	0019      	movs	r1, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	4b23      	ldr	r3, [pc, #140]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7c:	4b21      	ldr	r3, [pc, #132]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	0a19      	lsrs	r1, r3, #8
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	061a      	lsls	r2, r3, #24
 8001a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	0b5b      	lsrs	r3, r3, #13
 8001a96:	3301      	adds	r3, #1
 8001a98:	2280      	movs	r2, #128	@ 0x80
 8001a9a:	0212      	lsls	r2, r2, #8
 8001a9c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	091b      	lsrs	r3, r3, #4
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	491a      	ldr	r1, [pc, #104]	@ (8001b14 <HAL_RCC_OscConfig+0x348>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_RCC_OscConfig+0x34c>)
 8001ab0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_RCC_OscConfig+0x350>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2513      	movs	r5, #19
 8001ab8:	197c      	adds	r4, r7, r5
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7fe ff60 	bl	8000980 <HAL_InitTick>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ac4:	197b      	adds	r3, r7, r5
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d060      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001acc:	197b      	adds	r3, r7, r5
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	e1f2      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03f      	beq.n	8001b5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	0049      	lsls	r1, r1, #1
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7fe ff90 	bl	8000a0c <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001af0:	e018      	b.n	8001b24 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af2:	f7fe ff8b 	bl	8000a0c <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d911      	bls.n	8001b24 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1d9      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
 8001b04:	40021000 	.word	0x40021000
 8001b08:	fffeffff 	.word	0xfffeffff
 8001b0c:	fffbffff 	.word	0xfffbffff
 8001b10:	ffffe0ff 	.word	0xffffe0ff
 8001b14:	08002568 	.word	0x08002568
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b24:	4bc9      	ldr	r3, [pc, #804]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0e0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	4bc6      	ldr	r3, [pc, #792]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4ac6      	ldr	r2, [pc, #792]	@ (8001e50 <HAL_RCC_OscConfig+0x684>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	4bc3      	ldr	r3, [pc, #780]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b44:	4bc1      	ldr	r3, [pc, #772]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	0a19      	lsrs	r1, r3, #8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	061a      	lsls	r2, r3, #24
 8001b52:	4bbe      	ldr	r3, [pc, #760]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	e019      	b.n	8001b8e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b5a:	4bbc      	ldr	r3, [pc, #752]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4bbb      	ldr	r3, [pc, #748]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b60:	49bc      	ldr	r1, [pc, #752]	@ (8001e54 <HAL_RCC_OscConfig+0x688>)
 8001b62:	400a      	ands	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7fe ff51 	bl	8000a0c <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b70:	f7fe ff4c 	bl	8000a0c <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e19a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b82:	4bb2      	ldr	r3, [pc, #712]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2208      	movs	r2, #8
 8001b94:	4013      	ands	r3, r2
 8001b96:	d036      	beq.n	8001c06 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	4baa      	ldr	r3, [pc, #680]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001ba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ba4:	4ba9      	ldr	r3, [pc, #676]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7fe ff2e 	bl	8000a0c <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7fe ff29 	bl	8000a0c <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e177      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc8:	4ba0      	ldr	r3, [pc, #640]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0f1      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3ea>
 8001bd2:	e018      	b.n	8001c06 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b9d      	ldr	r3, [pc, #628]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001bd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bd8:	4b9c      	ldr	r3, [pc, #624]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	438a      	bics	r2, r1
 8001bde:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7fe ff14 	bl	8000a0c <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bea:	f7fe ff0f 	bl	8000a0c <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e15d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bfc:	4b93      	ldr	r3, [pc, #588]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f1      	bne.n	8001bea <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <HAL_RCC_OscConfig+0x446>
 8001c10:	e0ae      	b.n	8001d70 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2023      	movs	r0, #35	@ 0x23
 8001c14:	183b      	adds	r3, r7, r0
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b8c      	ldr	r3, [pc, #560]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	055b      	lsls	r3, r3, #21
 8001c22:	4013      	ands	r3, r2
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b89      	ldr	r3, [pc, #548]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001c28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c2a:	4b88      	ldr	r3, [pc, #544]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001c2c:	2180      	movs	r1, #128	@ 0x80
 8001c2e:	0549      	lsls	r1, r1, #21
 8001c30:	430a      	orrs	r2, r1
 8001c32:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001c34:	183b      	adds	r3, r7, r0
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b87      	ldr	r3, [pc, #540]	@ (8001e58 <HAL_RCC_OscConfig+0x68c>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	d11a      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c46:	4b84      	ldr	r3, [pc, #528]	@ (8001e58 <HAL_RCC_OscConfig+0x68c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b83      	ldr	r3, [pc, #524]	@ (8001e58 <HAL_RCC_OscConfig+0x68c>)
 8001c4c:	2180      	movs	r1, #128	@ 0x80
 8001c4e:	0049      	lsls	r1, r1, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c54:	f7fe feda 	bl	8000a0c <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7fe fed5 	bl	8000a0c <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	@ 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e123      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b79      	ldr	r3, [pc, #484]	@ (8001e58 <HAL_RCC_OscConfig+0x68c>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	@ 0x80
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	2380      	movs	r3, #128	@ 0x80
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4cc>
 8001c88:	4b70      	ldr	r3, [pc, #448]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001c8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001c8e:	2180      	movs	r1, #128	@ 0x80
 8001c90:	0049      	lsls	r1, r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	651a      	str	r2, [r3, #80]	@ 0x50
 8001c96:	e031      	b.n	8001cfc <HAL_RCC_OscConfig+0x530>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x4ee>
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001ca2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ca4:	4b69      	ldr	r3, [pc, #420]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001ca6:	496b      	ldr	r1, [pc, #428]	@ (8001e54 <HAL_RCC_OscConfig+0x688>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cac:	4b67      	ldr	r3, [pc, #412]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cb0:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cb2:	496a      	ldr	r1, [pc, #424]	@ (8001e5c <HAL_RCC_OscConfig+0x690>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cb8:	e020      	b.n	8001cfc <HAL_RCC_OscConfig+0x530>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	23a0      	movs	r3, #160	@ 0xa0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x518>
 8001cc6:	4b61      	ldr	r3, [pc, #388]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cca:	4b60      	ldr	r3, [pc, #384]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001ccc:	2180      	movs	r1, #128	@ 0x80
 8001cce:	00c9      	lsls	r1, r1, #3
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cd6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0049      	lsls	r1, r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0x530>
 8001ce4:	4b59      	ldr	r3, [pc, #356]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ce8:	4b58      	ldr	r3, [pc, #352]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cea:	495a      	ldr	r1, [pc, #360]	@ (8001e54 <HAL_RCC_OscConfig+0x688>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	651a      	str	r2, [r3, #80]	@ 0x50
 8001cf0:	4b56      	ldr	r3, [pc, #344]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cf4:	4b55      	ldr	r3, [pc, #340]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001cf6:	4959      	ldr	r1, [pc, #356]	@ (8001e5c <HAL_RCC_OscConfig+0x690>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d015      	beq.n	8001d30 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7fe fe82 	bl	8000a0c <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7fe fe7d 	bl	8000a0c <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a51      	ldr	r2, [pc, #324]	@ (8001e60 <HAL_RCC_OscConfig+0x694>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0ca      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d22:	4b4a      	ldr	r3, [pc, #296]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001d24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d26:	2380      	movs	r3, #128	@ 0x80
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d0ef      	beq.n	8001d0e <HAL_RCC_OscConfig+0x542>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7fe fe6c 	bl	8000a0c <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7fe fe67 	bl	8000a0c <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a46      	ldr	r2, [pc, #280]	@ (8001e60 <HAL_RCC_OscConfig+0x694>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0b4      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d1ef      	bne.n	8001d3a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d5a:	2323      	movs	r3, #35	@ 0x23
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b39      	ldr	r3, [pc, #228]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001d66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d68:	4b38      	ldr	r3, [pc, #224]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001d6a:	493e      	ldr	r1, [pc, #248]	@ (8001e64 <HAL_RCC_OscConfig+0x698>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d100      	bne.n	8001d7a <HAL_RCC_OscConfig+0x5ae>
 8001d78:	e09d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d100      	bne.n	8001d82 <HAL_RCC_OscConfig+0x5b6>
 8001d80:	e076      	b.n	8001e70 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d145      	bne.n	8001e16 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b30      	ldr	r3, [pc, #192]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001d90:	4935      	ldr	r1, [pc, #212]	@ (8001e68 <HAL_RCC_OscConfig+0x69c>)
 8001d92:	400a      	ands	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fe39 	bl	8000a0c <HAL_GetTick>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe fe34 	bl	8000a0c <HAL_GetTick>
 8001da4:	0002      	movs	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e082      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001db2:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	2380      	movs	r3, #128	@ 0x80
 8001db8:	049b      	lsls	r3, r3, #18
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e6c <HAL_RCC_OscConfig+0x6a0>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	0019      	movs	r1, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dde:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	0449      	lsls	r1, r1, #17
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dec:	f7fe fe0e 	bl	8000a0c <HAL_GetTick>
 8001df0:	0003      	movs	r3, r0
 8001df2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df6:	f7fe fe09 	bl	8000a0c <HAL_GetTick>
 8001dfa:	0002      	movs	r2, r0
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e057      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001e08:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	049b      	lsls	r3, r3, #18
 8001e10:	4013      	ands	r3, r2
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x62a>
 8001e14:	e04f      	b.n	8001eb6 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001e1c:	4912      	ldr	r1, [pc, #72]	@ (8001e68 <HAL_RCC_OscConfig+0x69c>)
 8001e1e:	400a      	ands	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7fe fdf3 	bl	8000a0c <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7fe fdee 	bl	8000a0c <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e03c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e3e:	4b03      	ldr	r3, [pc, #12]	@ (8001e4c <HAL_RCC_OscConfig+0x680>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	049b      	lsls	r3, r3, #18
 8001e46:	4013      	ands	r3, r2
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x660>
 8001e4a:	e034      	b.n	8001eb6 <HAL_RCC_OscConfig+0x6ea>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	ffff1fff 	.word	0xffff1fff
 8001e54:	fffffeff 	.word	0xfffffeff
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	fffffbff 	.word	0xfffffbff
 8001e60:	00001388 	.word	0x00001388
 8001e64:	efffffff 	.word	0xefffffff
 8001e68:	feffffff 	.word	0xfeffffff
 8001e6c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_RCC_OscConfig+0x6f4>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	2380      	movs	r3, #128	@ 0x80
 8001e86:	025b      	lsls	r3, r3, #9
 8001e88:	401a      	ands	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d10f      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	23f0      	movs	r3, #240	@ 0xf0
 8001e96:	039b      	lsls	r3, r3, #14
 8001e98:	401a      	ands	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	23c0      	movs	r3, #192	@ 0xc0
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	0018      	movs	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b00a      	add	sp, #40	@ 0x28
 8001ebe:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e128      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b96      	ldr	r3, [pc, #600]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d91e      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b93      	ldr	r3, [pc, #588]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4393      	bics	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	4b90      	ldr	r3, [pc, #576]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef8:	f7fe fd88 	bl	8000a0c <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f00:	e009      	b.n	8001f16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f02:	f7fe fd83 	bl	8000a0c <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	4a8a      	ldr	r2, [pc, #552]	@ (8002138 <HAL_RCC_ClockConfig+0x274>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e109      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b87      	ldr	r3, [pc, #540]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2e:	4b83      	ldr	r3, [pc, #524]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	22f0      	movs	r2, #240	@ 0xf0
 8001f34:	4393      	bics	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b7f      	ldr	r3, [pc, #508]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2201      	movs	r2, #1
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d100      	bne.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
 8001f4c:	e089      	b.n	8002062 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f56:	4b79      	ldr	r3, [pc, #484]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	@ 0x80
 8001f5c:	029b      	lsls	r3, r3, #10
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d120      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0e1      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f6e:	4b73      	ldr	r3, [pc, #460]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	049b      	lsls	r3, r3, #18
 8001f76:	4013      	ands	r3, r2
 8001f78:	d114      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0d5      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d106      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f86:	4b6d      	ldr	r3, [pc, #436]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d109      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0ca      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f94:	4b69      	ldr	r3, [pc, #420]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	@ 0x80
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0c2      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa4:	4b65      	ldr	r3, [pc, #404]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	4393      	bics	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	4b62      	ldr	r3, [pc, #392]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fd28 	bl	8000a0c <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d111      	bne.n	8001fec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	e009      	b.n	8001fde <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fca:	f7fe fd1f 	bl	8000a0c <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	4a58      	ldr	r2, [pc, #352]	@ (8002138 <HAL_RCC_ClockConfig+0x274>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e0a5      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fde:	4b57      	ldr	r3, [pc, #348]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b08      	cmp	r3, #8
 8001fe8:	d1ef      	bne.n	8001fca <HAL_RCC_ClockConfig+0x106>
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d111      	bne.n	8002018 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff4:	e009      	b.n	800200a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff6:	f7fe fd09 	bl	8000a0c <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	4a4d      	ldr	r2, [pc, #308]	@ (8002138 <HAL_RCC_ClockConfig+0x274>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d901      	bls.n	800200a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e08f      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800200a:	4b4c      	ldr	r3, [pc, #304]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	220c      	movs	r2, #12
 8002010:	4013      	ands	r3, r2
 8002012:	2b0c      	cmp	r3, #12
 8002014:	d1ef      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x132>
 8002016:	e024      	b.n	8002062 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d11b      	bne.n	8002058 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002020:	e009      	b.n	8002036 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002022:	f7fe fcf3 	bl	8000a0c <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	4a42      	ldr	r2, [pc, #264]	@ (8002138 <HAL_RCC_ClockConfig+0x274>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e079      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002036:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	220c      	movs	r2, #12
 800203c:	4013      	ands	r3, r2
 800203e:	2b04      	cmp	r3, #4
 8002040:	d1ef      	bne.n	8002022 <HAL_RCC_ClockConfig+0x15e>
 8002042:	e00e      	b.n	8002062 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe fce2 	bl	8000a0c <HAL_GetTick>
 8002048:	0002      	movs	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	4a3a      	ldr	r2, [pc, #232]	@ (8002138 <HAL_RCC_ClockConfig+0x274>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e068      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002058:	4b38      	ldr	r3, [pc, #224]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	220c      	movs	r2, #12
 800205e:	4013      	ands	r3, r2
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002062:	4b34      	ldr	r3, [pc, #208]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2201      	movs	r2, #1
 8002068:	4013      	ands	r3, r2
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	429a      	cmp	r2, r3
 800206e:	d21e      	bcs.n	80020ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002070:	4b30      	ldr	r3, [pc, #192]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4393      	bics	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	4b2e      	ldr	r3, [pc, #184]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002082:	f7fe fcc3 	bl	8000a0c <HAL_GetTick>
 8002086:	0003      	movs	r3, r0
 8002088:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	e009      	b.n	80020a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7fe fcbe 	bl	8000a0c <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	4a28      	ldr	r2, [pc, #160]	@ (8002138 <HAL_RCC_ClockConfig+0x274>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e044      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a0:	4b24      	ldr	r3, [pc, #144]	@ (8002134 <HAL_RCC_ClockConfig+0x270>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	4013      	ands	r3, r2
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d1ee      	bne.n	800208c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2204      	movs	r2, #4
 80020b4:	4013      	ands	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b8:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a20      	ldr	r2, [pc, #128]	@ (8002140 <HAL_RCC_ClockConfig+0x27c>)
 80020be:	4013      	ands	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	4b1d      	ldr	r3, [pc, #116]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2208      	movs	r2, #8
 80020d2:	4013      	ands	r3, r2
 80020d4:	d00a      	beq.n	80020ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020d6:	4b19      	ldr	r3, [pc, #100]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	4a1a      	ldr	r2, [pc, #104]	@ (8002144 <HAL_RCC_ClockConfig+0x280>)
 80020dc:	4013      	ands	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	00da      	lsls	r2, r3, #3
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020ec:	f000 f832 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 80020f0:	0001      	movs	r1, r0
 80020f2:	4b12      	ldr	r3, [pc, #72]	@ (800213c <HAL_RCC_ClockConfig+0x278>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	220f      	movs	r2, #15
 80020fa:	4013      	ands	r3, r2
 80020fc:	4a12      	ldr	r2, [pc, #72]	@ (8002148 <HAL_RCC_ClockConfig+0x284>)
 80020fe:	5cd3      	ldrb	r3, [r2, r3]
 8002100:	000a      	movs	r2, r1
 8002102:	40da      	lsrs	r2, r3
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_RCC_ClockConfig+0x288>)
 8002106:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002108:	4b11      	ldr	r3, [pc, #68]	@ (8002150 <HAL_RCC_ClockConfig+0x28c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	250b      	movs	r5, #11
 800210e:	197c      	adds	r4, r7, r5
 8002110:	0018      	movs	r0, r3
 8002112:	f7fe fc35 	bl	8000980 <HAL_InitTick>
 8002116:	0003      	movs	r3, r0
 8002118:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800211a:	197b      	adds	r3, r7, r5
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d002      	beq.n	8002128 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002122:	197b      	adds	r3, r7, r5
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	e000      	b.n	800212a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bdb0      	pop	{r4, r5, r7, pc}
 8002132:	46c0      	nop			@ (mov r8, r8)
 8002134:	40022000 	.word	0x40022000
 8002138:	00001388 	.word	0x00001388
 800213c:	40021000 	.word	0x40021000
 8002140:	fffff8ff 	.word	0xfffff8ff
 8002144:	ffffc7ff 	.word	0xffffc7ff
 8002148:	08002568 	.word	0x08002568
 800214c:	20000000 	.word	0x20000000
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b08e      	sub	sp, #56	@ 0x38
 8002158:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800215a:	4b4c      	ldr	r3, [pc, #304]	@ (800228c <HAL_RCC_GetSysClockFreq+0x138>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002160:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002162:	230c      	movs	r3, #12
 8002164:	4013      	ands	r3, r2
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d014      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x40>
 800216a:	d900      	bls.n	800216e <HAL_RCC_GetSysClockFreq+0x1a>
 800216c:	e07b      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x112>
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x24>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d00b      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x3a>
 8002176:	e076      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002178:	4b44      	ldr	r3, [pc, #272]	@ (800228c <HAL_RCC_GetSysClockFreq+0x138>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2210      	movs	r2, #16
 800217e:	4013      	ands	r3, r2
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002182:	4b43      	ldr	r3, [pc, #268]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002184:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002186:	e07c      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002188:	4b42      	ldr	r3, [pc, #264]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x140>)
 800218a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800218c:	e079      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800218e:	4b42      	ldr	r3, [pc, #264]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x144>)
 8002190:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002192:	e076      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	0c9a      	lsrs	r2, r3, #18
 8002198:	230f      	movs	r3, #15
 800219a:	401a      	ands	r2, r3
 800219c:	4b3f      	ldr	r3, [pc, #252]	@ (800229c <HAL_RCC_GetSysClockFreq+0x148>)
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a4:	0d9a      	lsrs	r2, r3, #22
 80021a6:	2303      	movs	r3, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	3301      	adds	r3, #1
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ae:	4b37      	ldr	r3, [pc, #220]	@ (800228c <HAL_RCC_GetSysClockFreq+0x138>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	025b      	lsls	r3, r3, #9
 80021b6:	4013      	ands	r3, r2
 80021b8:	d01a      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
 80021c2:	4a35      	ldr	r2, [pc, #212]	@ (8002298 <HAL_RCC_GetSysClockFreq+0x144>)
 80021c4:	2300      	movs	r3, #0
 80021c6:	69b8      	ldr	r0, [r7, #24]
 80021c8:	69f9      	ldr	r1, [r7, #28]
 80021ca:	f7fe f849 	bl	8000260 <__aeabi_lmul>
 80021ce:	0002      	movs	r2, r0
 80021d0:	000b      	movs	r3, r1
 80021d2:	0010      	movs	r0, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f7fe f81d 	bl	8000220 <__aeabi_uldivmod>
 80021e6:	0002      	movs	r2, r0
 80021e8:	000b      	movs	r3, r1
 80021ea:	0013      	movs	r3, r2
 80021ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ee:	e037      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021f0:	4b26      	ldr	r3, [pc, #152]	@ (800228c <HAL_RCC_GetSysClockFreq+0x138>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2210      	movs	r2, #16
 80021f6:	4013      	ands	r3, r2
 80021f8:	d01a      	beq.n	8002230 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80021fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4a23      	ldr	r2, [pc, #140]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002204:	2300      	movs	r3, #0
 8002206:	68b8      	ldr	r0, [r7, #8]
 8002208:	68f9      	ldr	r1, [r7, #12]
 800220a:	f7fe f829 	bl	8000260 <__aeabi_lmul>
 800220e:	0002      	movs	r2, r0
 8002210:	000b      	movs	r3, r1
 8002212:	0010      	movs	r0, r2
 8002214:	0019      	movs	r1, r3
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	603b      	str	r3, [r7, #0]
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f7fd fffd 	bl	8000220 <__aeabi_uldivmod>
 8002226:	0002      	movs	r2, r0
 8002228:	000b      	movs	r3, r1
 800222a:	0013      	movs	r3, r2
 800222c:	637b      	str	r3, [r7, #52]	@ 0x34
 800222e:	e017      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002232:	0018      	movs	r0, r3
 8002234:	2300      	movs	r3, #0
 8002236:	0019      	movs	r1, r3
 8002238:	4a16      	ldr	r2, [pc, #88]	@ (8002294 <HAL_RCC_GetSysClockFreq+0x140>)
 800223a:	2300      	movs	r3, #0
 800223c:	f7fe f810 	bl	8000260 <__aeabi_lmul>
 8002240:	0002      	movs	r2, r0
 8002242:	000b      	movs	r3, r1
 8002244:	0010      	movs	r0, r2
 8002246:	0019      	movs	r1, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224a:	001c      	movs	r4, r3
 800224c:	2300      	movs	r3, #0
 800224e:	001d      	movs	r5, r3
 8002250:	0022      	movs	r2, r4
 8002252:	002b      	movs	r3, r5
 8002254:	f7fd ffe4 	bl	8000220 <__aeabi_uldivmod>
 8002258:	0002      	movs	r2, r0
 800225a:	000b      	movs	r3, r1
 800225c:	0013      	movs	r3, r2
 800225e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002262:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002264:	e00d      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_RCC_GetSysClockFreq+0x138>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0b5b      	lsrs	r3, r3, #13
 800226c:	2207      	movs	r2, #7
 800226e:	4013      	ands	r3, r2
 8002270:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	3301      	adds	r3, #1
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	0212      	lsls	r2, r2, #8
 800227a:	409a      	lsls	r2, r3
 800227c:	0013      	movs	r3, r2
 800227e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002280:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b00e      	add	sp, #56	@ 0x38
 800228a:	bdb0      	pop	{r4, r5, r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	003d0900 	.word	0x003d0900
 8002294:	00f42400 	.word	0x00f42400
 8002298:	007a1200 	.word	0x007a1200
 800229c:	08002578 	.word	0x08002578

080022a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80022a8:	2017      	movs	r0, #23
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2220      	movs	r2, #32
 80022b6:	4013      	ands	r3, r2
 80022b8:	d100      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80022ba:	e0c7      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022bc:	4b84      	ldr	r3, [pc, #528]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	055b      	lsls	r3, r3, #21
 80022c4:	4013      	ands	r3, r2
 80022c6:	d109      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b81      	ldr	r3, [pc, #516]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022cc:	4b80      	ldr	r3, [pc, #512]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022ce:	2180      	movs	r1, #128	@ 0x80
 80022d0:	0549      	lsls	r1, r1, #21
 80022d2:	430a      	orrs	r2, r1
 80022d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80022d6:	183b      	adds	r3, r7, r0
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	4b7d      	ldr	r3, [pc, #500]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	2380      	movs	r3, #128	@ 0x80
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	d11a      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e8:	4b7a      	ldr	r3, [pc, #488]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b79      	ldr	r3, [pc, #484]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80022ee:	2180      	movs	r1, #128	@ 0x80
 80022f0:	0049      	lsls	r1, r1, #1
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f6:	f7fe fb89 	bl	8000a0c <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	e008      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002300:	f7fe fb84 	bl	8000a0c <HAL_GetTick>
 8002304:	0002      	movs	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0d9      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002312:	4b70      	ldr	r3, [pc, #448]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	4013      	ands	r3, r2
 800231c:	d0f0      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800231e:	4b6c      	ldr	r3, [pc, #432]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	23c0      	movs	r3, #192	@ 0xc0
 8002324:	039b      	lsls	r3, r3, #14
 8002326:	4013      	ands	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	23c0      	movs	r3, #192	@ 0xc0
 8002330:	039b      	lsls	r3, r3, #14
 8002332:	4013      	ands	r3, r2
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	429a      	cmp	r2, r3
 8002338:	d013      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	23c0      	movs	r3, #192	@ 0xc0
 8002340:	029b      	lsls	r3, r3, #10
 8002342:	401a      	ands	r2, r3
 8002344:	23c0      	movs	r3, #192	@ 0xc0
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	429a      	cmp	r2, r3
 800234a:	d10a      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800234c:	4b60      	ldr	r3, [pc, #384]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	029b      	lsls	r3, r3, #10
 8002354:	401a      	ands	r2, r3
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	029b      	lsls	r3, r3, #10
 800235a:	429a      	cmp	r2, r3
 800235c:	d101      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e0b1      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002362:	4b5b      	ldr	r3, [pc, #364]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002364:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002366:	23c0      	movs	r3, #192	@ 0xc0
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	4013      	ands	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d03b      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	23c0      	movs	r3, #192	@ 0xc0
 800237a:	029b      	lsls	r3, r3, #10
 800237c:	4013      	ands	r3, r2
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	429a      	cmp	r2, r3
 8002382:	d033      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2220      	movs	r2, #32
 800238a:	4013      	ands	r3, r2
 800238c:	d02e      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800238e:	4b50      	ldr	r3, [pc, #320]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002392:	4a51      	ldr	r2, [pc, #324]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002398:	4b4d      	ldr	r3, [pc, #308]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800239a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800239c:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800239e:	2180      	movs	r1, #128	@ 0x80
 80023a0:	0309      	lsls	r1, r1, #12
 80023a2:	430a      	orrs	r2, r1
 80023a4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023a6:	4b4a      	ldr	r3, [pc, #296]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023aa:	4b49      	ldr	r3, [pc, #292]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023ac:	494b      	ldr	r1, [pc, #300]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80023ae:	400a      	ands	r2, r1
 80023b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80023b2:	4b47      	ldr	r3, [pc, #284]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4013      	ands	r3, r2
 80023c0:	d014      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe fb23 	bl	8000a0c <HAL_GetTick>
 80023c6:	0003      	movs	r3, r0
 80023c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ca:	e009      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe fb1e 	bl	8000a0c <HAL_GetTick>
 80023d0:	0002      	movs	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	4a42      	ldr	r2, [pc, #264]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e072      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023e0:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4013      	ands	r3, r2
 80023ea:	d0ef      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2220      	movs	r2, #32
 80023f2:	4013      	ands	r3, r2
 80023f4:	d01f      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	23c0      	movs	r3, #192	@ 0xc0
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	401a      	ands	r2, r3
 8002400:	23c0      	movs	r3, #192	@ 0xc0
 8002402:	029b      	lsls	r3, r3, #10
 8002404:	429a      	cmp	r2, r3
 8002406:	d10c      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002408:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a35      	ldr	r2, [pc, #212]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	23c0      	movs	r3, #192	@ 0xc0
 8002418:	039b      	lsls	r3, r3, #14
 800241a:	401a      	ands	r2, r3
 800241c:	4b2c      	ldr	r3, [pc, #176]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800241e:	430a      	orrs	r2, r1
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	4b2b      	ldr	r3, [pc, #172]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002424:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	23c0      	movs	r3, #192	@ 0xc0
 800242c:	029b      	lsls	r3, r3, #10
 800242e:	401a      	ands	r2, r3
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002432:	430a      	orrs	r2, r1
 8002434:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002436:	2317      	movs	r3, #23
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002440:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002444:	4b22      	ldr	r3, [pc, #136]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002446:	4928      	ldr	r1, [pc, #160]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002448:	400a      	ands	r2, r1
 800244a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002456:	4b1e      	ldr	r3, [pc, #120]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	220c      	movs	r2, #12
 800245c:	4393      	bics	r3, r2
 800245e:	0019      	movs	r1, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002466:	430a      	orrs	r2, r1
 8002468:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2204      	movs	r2, #4
 8002470:	4013      	ands	r3, r2
 8002472:	d009      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800247a:	4013      	ands	r3, r2
 800247c:	0019      	movs	r1, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b13      	ldr	r3, [pc, #76]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002484:	430a      	orrs	r2, r1
 8002486:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2208      	movs	r2, #8
 800248e:	4013      	ands	r3, r2
 8002490:	d009      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002492:	4b0f      	ldr	r3, [pc, #60]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002496:	4a16      	ldr	r2, [pc, #88]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002498:	4013      	ands	r3, r2
 800249a:	0019      	movs	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691a      	ldr	r2, [r3, #16]
 80024a0:	4b0b      	ldr	r3, [pc, #44]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024a2:	430a      	orrs	r2, r1
 80024a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2280      	movs	r2, #128	@ 0x80
 80024ac:	4013      	ands	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80024b0:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b4:	4a0f      	ldr	r2, [pc, #60]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	0019      	movs	r1, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695a      	ldr	r2, [r3, #20]
 80024be:	4b04      	ldr	r3, [pc, #16]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b006      	add	sp, #24
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40007000 	.word	0x40007000
 80024d8:	fffcffff 	.word	0xfffcffff
 80024dc:	fff7ffff 	.word	0xfff7ffff
 80024e0:	00001388 	.word	0x00001388
 80024e4:	ffcfffff 	.word	0xffcfffff
 80024e8:	efffffff 	.word	0xefffffff
 80024ec:	fffff3ff 	.word	0xfffff3ff
 80024f0:	ffffcfff 	.word	0xffffcfff
 80024f4:	fff3ffff 	.word	0xfff3ffff

080024f8 <memset>:
 80024f8:	0003      	movs	r3, r0
 80024fa:	1882      	adds	r2, r0, r2
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d100      	bne.n	8002502 <memset+0xa>
 8002500:	4770      	bx	lr
 8002502:	7019      	strb	r1, [r3, #0]
 8002504:	3301      	adds	r3, #1
 8002506:	e7f9      	b.n	80024fc <memset+0x4>

08002508 <__libc_init_array>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	2600      	movs	r6, #0
 800250c:	4c0c      	ldr	r4, [pc, #48]	@ (8002540 <__libc_init_array+0x38>)
 800250e:	4d0d      	ldr	r5, [pc, #52]	@ (8002544 <__libc_init_array+0x3c>)
 8002510:	1b64      	subs	r4, r4, r5
 8002512:	10a4      	asrs	r4, r4, #2
 8002514:	42a6      	cmp	r6, r4
 8002516:	d109      	bne.n	800252c <__libc_init_array+0x24>
 8002518:	2600      	movs	r6, #0
 800251a:	f000 f819 	bl	8002550 <_init>
 800251e:	4c0a      	ldr	r4, [pc, #40]	@ (8002548 <__libc_init_array+0x40>)
 8002520:	4d0a      	ldr	r5, [pc, #40]	@ (800254c <__libc_init_array+0x44>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	42a6      	cmp	r6, r4
 8002528:	d105      	bne.n	8002536 <__libc_init_array+0x2e>
 800252a:	bd70      	pop	{r4, r5, r6, pc}
 800252c:	00b3      	lsls	r3, r6, #2
 800252e:	58eb      	ldr	r3, [r5, r3]
 8002530:	4798      	blx	r3
 8002532:	3601      	adds	r6, #1
 8002534:	e7ee      	b.n	8002514 <__libc_init_array+0xc>
 8002536:	00b3      	lsls	r3, r6, #2
 8002538:	58eb      	ldr	r3, [r5, r3]
 800253a:	4798      	blx	r3
 800253c:	3601      	adds	r6, #1
 800253e:	e7f2      	b.n	8002526 <__libc_init_array+0x1e>
 8002540:	0800258c 	.word	0x0800258c
 8002544:	0800258c 	.word	0x0800258c
 8002548:	08002590 	.word	0x08002590
 800254c:	0800258c 	.word	0x0800258c

08002550 <_init>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr

0800255c <_fini>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr
