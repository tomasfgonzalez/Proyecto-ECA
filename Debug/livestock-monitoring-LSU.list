
livestock-monitoring-LSU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b50  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003c10  08003c10  00004c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c88  08003c88  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003c88  08003c88  00004c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c90  08003c90  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c90  08003c90  00004c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c94  08003c94  00004c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003c98  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000010  08003ca8  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003ca8  0000522c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a94b  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022af  00000000  00000000  0000f983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b8  00000000  00000000  00011c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069a  00000000  00000000  000124f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f36  00000000  00000000  00012b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d884  00000000  00000000  00024ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069fcc  00000000  00000000  00032344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cdc  00000000  00000000  0009c354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0009e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bf8 	.word	0x08003bf8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003bf8 	.word	0x08003bf8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <ADC_Init>:
ADC_HandleTypeDef    hadc;
ADC_ChannelConfTypeDef        sConfig;

/* ADC Configuration */
void ADC_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0



	  ADC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f003 fb71 	bl	8003b9e <memset>


	  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	  */
	  hadc.Instance = ADC1;
 80004bc:	4b30      	ldr	r3, [pc, #192]	@ (8000580 <ADC_Init+0xd8>)
 80004be:	4a31      	ldr	r2, [pc, #196]	@ (8000584 <ADC_Init+0xdc>)
 80004c0:	601a      	str	r2, [r3, #0]
	  hadc.Init.OversamplingMode = DISABLE;
 80004c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <ADC_Init+0xd8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000580 <ADC_Init+0xd8>)
 80004ca:	2280      	movs	r2, #128	@ 0x80
 80004cc:	05d2      	lsls	r2, r2, #23
 80004ce:	605a      	str	r2, [r3, #4]
	  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000580 <ADC_Init+0xd8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
	  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 80004d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000580 <ADC_Init+0xd8>)
 80004d8:	2201      	movs	r2, #1
 80004da:	639a      	str	r2, [r3, #56]	@ 0x38
	  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004dc:	4b28      	ldr	r3, [pc, #160]	@ (8000580 <ADC_Init+0xd8>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
	  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e2:	4b27      	ldr	r3, [pc, #156]	@ (8000580 <ADC_Init+0xd8>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
	  hadc.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <ADC_Init+0xd8>)
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	5499      	strb	r1, [r3, r2]
	  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b23      	ldr	r3, [pc, #140]	@ (8000580 <ADC_Init+0xd8>)
 80004f2:	2221      	movs	r2, #33	@ 0x21
 80004f4:	2100      	movs	r1, #0
 80004f6:	5499      	strb	r1, [r3, r2]
	  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f8:	4b21      	ldr	r3, [pc, #132]	@ (8000580 <ADC_Init+0xd8>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
	  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b20      	ldr	r3, [pc, #128]	@ (8000580 <ADC_Init+0xd8>)
 8000500:	22c2      	movs	r2, #194	@ 0xc2
 8000502:	32ff      	adds	r2, #255	@ 0xff
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
	  hadc.Init.DMAContinuousRequests = DISABLE;
 8000506:	4b1e      	ldr	r3, [pc, #120]	@ (8000580 <ADC_Init+0xd8>)
 8000508:	222c      	movs	r2, #44	@ 0x2c
 800050a:	2100      	movs	r1, #0
 800050c:	5499      	strb	r1, [r3, r2]
	  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <ADC_Init+0xd8>)
 8000510:	2204      	movs	r2, #4
 8000512:	615a      	str	r2, [r3, #20]
	  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000514:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <ADC_Init+0xd8>)
 8000516:	2200      	movs	r2, #0
 8000518:	631a      	str	r2, [r3, #48]	@ 0x30
	  hadc.Init.LowPowerAutoWait = ENABLE;
 800051a:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <ADC_Init+0xd8>)
 800051c:	2201      	movs	r2, #1
 800051e:	619a      	str	r2, [r3, #24]
	  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <ADC_Init+0xd8>)
 8000522:	2201      	movs	r2, #1
 8000524:	635a      	str	r2, [r3, #52]	@ 0x34
	  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000526:	4b16      	ldr	r3, [pc, #88]	@ (8000580 <ADC_Init+0xd8>)
 8000528:	2201      	movs	r2, #1
 800052a:	61da      	str	r2, [r3, #28]
	  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <ADC_Init+0xd8>)
 800052e:	0018      	movs	r0, r3
 8000530:	f000 fce2 	bl	8000ef8 <HAL_ADC_Init>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <ADC_Init+0x94>
	  {
	    Error_Handler();
 8000538:	f000 fb92 	bl	8000c60 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel to be converted.
	  */
	  sConfig.Channel = ADC_CHANNEL_4;
 800053c:	003b      	movs	r3, r7
 800053e:	4a12      	ldr	r2, [pc, #72]	@ (8000588 <ADC_Init+0xe0>)
 8000540:	601a      	str	r2, [r3, #0]
	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000542:	003b      	movs	r3, r7
 8000544:	2280      	movs	r2, #128	@ 0x80
 8000546:	0152      	lsls	r2, r2, #5
 8000548:	605a      	str	r2, [r3, #4]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800054a:	003a      	movs	r2, r7
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <ADC_Init+0xd8>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 ff81 	bl	8001458 <HAL_ADC_ConfigChannel>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <ADC_Init+0xb6>
	  {
	    Error_Handler();
 800055a:	f000 fb81 	bl	8000c60 <Error_Handler>
	  }

	  /** Configure for the selected ADC regular channel to be converted.
	  */
	  sConfig.Channel = ADC_CHANNEL_5;
 800055e:	003b      	movs	r3, r7
 8000560:	4a0a      	ldr	r2, [pc, #40]	@ (800058c <ADC_Init+0xe4>)
 8000562:	601a      	str	r2, [r3, #0]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000564:	003a      	movs	r2, r7
 8000566:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <ADC_Init+0xd8>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 ff74 	bl	8001458 <HAL_ADC_ConfigChannel>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <ADC_Init+0xd0>
	  {
	    Error_Handler();
 8000574:	f000 fb74 	bl	8000c60 <Error_Handler>
	  }


}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}
 8000580:	2000002c 	.word	0x2000002c
 8000584:	40012400 	.word	0x40012400
 8000588:	10000010 	.word	0x10000010
 800058c:	14000020 	.word	0x14000020

08000590 <Get_ADC_Val>:


/* Get the last converted ADC value */
void Get_ADC_Val(uint16_t* adc_values) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    // Verificar que el puntero no sea NULL
    if (adc_values == NULL) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d02b      	beq.n	80005f6 <Get_ADC_Val+0x66>
        return;  // Si el puntero es NULL, no hacemos nada
    }

    // Iniciar la conversión para el primer canal (Channel 4)
    HAL_ADC_Start(&hadc);
 800059e:	4b18      	ldr	r3, [pc, #96]	@ (8000600 <Get_ADC_Val+0x70>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fe1d 	bl	80011e0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80005a6:	2301      	movs	r3, #1
 80005a8:	425a      	negs	r2, r3
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ac:	0011      	movs	r1, r2
 80005ae:	0018      	movs	r0, r3
 80005b0:	f000 feaa 	bl	8001308 <HAL_ADC_PollForConversion>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d107      	bne.n	80005c8 <Get_ADC_Val+0x38>
        adc_values[0] = HAL_ADC_GetValue(&hadc);  // Obtener el valor de Channel 4
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 ff40 	bl	8001440 <HAL_ADC_GetValue>
 80005c0:	0003      	movs	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	801a      	strh	r2, [r3, #0]
    }

    // Iniciar la conversión para el segundo canal (Channel 5)
    if (HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY) == HAL_OK) {
 80005c8:	2301      	movs	r3, #1
 80005ca:	425a      	negs	r2, r3
 80005cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ce:	0011      	movs	r1, r2
 80005d0:	0018      	movs	r0, r3
 80005d2:	f000 fe99 	bl	8001308 <HAL_ADC_PollForConversion>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d108      	bne.n	80005ec <Get_ADC_Val+0x5c>
        adc_values[1] = HAL_ADC_GetValue(&hadc);  // Obtener el valor de Channel 5
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <Get_ADC_Val+0x70>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 ff2f 	bl	8001440 <HAL_ADC_GetValue>
 80005e2:	0002      	movs	r2, r0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3302      	adds	r3, #2
 80005e8:	b292      	uxth	r2, r2
 80005ea:	801a      	strh	r2, [r3, #0]
    }

    // Detener la conversión
    HAL_ADC_Stop(&hadc);
 80005ec:	4b04      	ldr	r3, [pc, #16]	@ (8000600 <Get_ADC_Val+0x70>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fe4a 	bl	8001288 <HAL_ADC_Stop>
 80005f4:	e000      	b.n	80005f8 <Get_ADC_Val+0x68>
        return;  // Si el puntero es NULL, no hacemos nada
 80005f6:	46c0      	nop			@ (mov r8, r8)
}
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	2000002c 	.word	0x2000002c

08000604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_DMA_Init+0x38>)
 800060c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_DMA_Init+0x38>)
 8000610:	2101      	movs	r1, #1
 8000612:	430a      	orrs	r2, r1
 8000614:	631a      	str	r2, [r3, #48]	@ 0x30
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_DMA_Init+0x38>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	200b      	movs	r0, #11
 8000628:	f001 f984 	bl	8001934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800062c:	200b      	movs	r0, #11
 800062e:	f001 f996 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	40021000 	.word	0x40021000

08000640 <GPIO_Init>:
/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/

void GPIO_Init(void)
{
 8000640:	b590      	push	{r4, r7, lr}
 8000642:	b089      	sub	sp, #36	@ 0x24
 8000644:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	240c      	movs	r4, #12
 8000648:	193b      	adds	r3, r7, r4
 800064a:	0018      	movs	r0, r3
 800064c:	2314      	movs	r3, #20
 800064e:	001a      	movs	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f003 faa4 	bl	8003b9e <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <GPIO_Init+0x98>)
 8000658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800065a:	4b1f      	ldr	r3, [pc, #124]	@ (80006d8 <GPIO_Init+0x98>)
 800065c:	2104      	movs	r1, #4
 800065e:	430a      	orrs	r2, r1
 8000660:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <GPIO_Init+0x98>)
 8000664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000666:	2204      	movs	r2, #4
 8000668:	4013      	ands	r3, r2
 800066a:	60bb      	str	r3, [r7, #8]
 800066c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <GPIO_Init+0x98>)
 8000670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000672:	4b19      	ldr	r3, [pc, #100]	@ (80006d8 <GPIO_Init+0x98>)
 8000674:	2101      	movs	r1, #1
 8000676:	430a      	orrs	r2, r1
 8000678:	62da      	str	r2, [r3, #44]	@ 0x2c
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <GPIO_Init+0x98>)
 800067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067e:	2201      	movs	r2, #1
 8000680:	4013      	ands	r3, r2
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <GPIO_Init+0x98>)
 8000688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800068a:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <GPIO_Init+0x98>)
 800068c:	2102      	movs	r1, #2
 800068e:	430a      	orrs	r2, r1
 8000690:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <GPIO_Init+0x98>)
 8000694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000696:	2202      	movs	r2, #2
 8000698:	4013      	ands	r3, r2
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <GPIO_Init+0x9c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fc9f 	bl	8001fe8 <HAL_GPIO_WritePin>



  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2208      	movs	r2, #8
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <GPIO_Init+0x9c>)
 80006c8:	0019      	movs	r1, r3
 80006ca:	0010      	movs	r0, r2
 80006cc:	f001 fb1e 	bl	8001d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b009      	add	sp, #36	@ 0x24
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	50000400 	.word	0x50000400

080006e0 <calcChecksum>:



UBXMessage ubxMessage;

void calcChecksum(uint8_t* CK, int msgSize) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]
  memset(CK, 0, 2);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2202      	movs	r2, #2
 80006ee:	2100      	movs	r1, #0
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 fa54 	bl	8003b9e <memset>
  for (int i = 0; i < msgSize; i++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e016      	b.n	800072a <calcChecksum+0x4a>
    CK[0] += ((uint8_t*)(&ubxMessage))[i];
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	68f9      	ldr	r1, [r7, #12]
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <calcChecksum+0x5c>)
 8000704:	18cb      	adds	r3, r1, r3
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	b2da      	uxtb	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	701a      	strb	r2, [r3, #0]
    CK[1] += CK[0];
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3301      	adds	r3, #1
 8000714:	7819      	ldrb	r1, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	3301      	adds	r3, #1
 800071e:	188a      	adds	r2, r1, r2
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < msgSize; i++) {
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	3301      	adds	r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	429a      	cmp	r2, r3
 8000730:	dbe4      	blt.n	80006fc <calcChecksum+0x1c>
  }
}
 8000732:	46c0      	nop			@ (mov r8, r8)
 8000734:	46c0      	nop			@ (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b004      	add	sp, #16
 800073a:	bd80      	pop	{r7, pc}
 800073c:	200000c0 	.word	0x200000c0

08000740 <compareMsgHeader>:

bool compareMsgHeader(const uint8_t* msgHeader) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = (uint8_t*)(&ubxMessage);
 8000748:	4b0d      	ldr	r3, [pc, #52]	@ (8000780 <compareMsgHeader+0x40>)
 800074a:	60fb      	str	r3, [r7, #12]
  return ptr[0] == msgHeader[0] && ptr[1] == msgHeader[1];
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	429a      	cmp	r2, r3
 8000756:	d109      	bne.n	800076c <compareMsgHeader+0x2c>
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	3301      	adds	r3, #1
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d101      	bne.n	800076c <compareMsgHeader+0x2c>
 8000768:	2301      	movs	r3, #1
 800076a:	e000      	b.n	800076e <compareMsgHeader+0x2e>
 800076c:	2300      	movs	r3, #0
 800076e:	1c1a      	adds	r2, r3, #0
 8000770:	2301      	movs	r3, #1
 8000772:	4013      	ands	r3, r2
 8000774:	b2db      	uxtb	r3, r3
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b004      	add	sp, #16
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	200000c0 	.word	0x200000c0

08000784 <processUBXData>:


void processUBXData(uint8_t* data, uint16_t size) {
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	000a      	movs	r2, r1
 800078e:	1cbb      	adds	r3, r7, #2
 8000790:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	e01e      	b.n	80007d6 <processUBXData+0x52>
        ubxMsgType msgType = processGPS(data[i]);  // Procesa byte por byte
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	220b      	movs	r2, #11
 80007a2:	18bc      	adds	r4, r7, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 f843 	bl	8000830 <processGPS>
 80007aa:	0003      	movs	r3, r0
 80007ac:	7023      	strb	r3, [r4, #0]

        // Verificar si se han recibido ambas tramas
        if (isNavPosllhReceived && isNavStatusReceived) {
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <processUBXData+0x68>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d00c      	beq.n	80007d0 <processUBXData+0x4c>
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <processUBXData+0x6c>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d008      	beq.n	80007d0 <processUBXData+0x4c>
            // Ambas tramas han sido recibidas, procesar los datos
            // Reiniciar los indicadores
            isNavPosllhReceived = false;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <processUBXData+0x68>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
            isNavStatusReceived = false;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <processUBXData+0x6c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
        i=size; // break
 80007ca:	1cbb      	adds	r3, r7, #2
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	1cbb      	adds	r3, r7, #2
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dbdb      	blt.n	8000798 <processUBXData+0x14>
        }
    }

}
 80007e0:	46c0      	nop			@ (mov r8, r8)
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	b005      	add	sp, #20
 80007e8:	bd90      	pop	{r4, r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	200000bc 	.word	0x200000bc
 80007f0:	200000bd 	.word	0x200000bd

080007f4 <get_UBX_LatLon>:

void get_UBX_LatLon(int32_t* UBX_Lat, int32_t* UBX_Lon) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
	  *UBX_Lat = navPosllhData.lat;
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <get_UBX_LatLon+0x24>)
 8000800:	68da      	ldr	r2, [r3, #12]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
	  *UBX_Lon = navPosllhData.lon;
 8000806:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <get_UBX_LatLon+0x24>)
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	601a      	str	r2, [r3, #0]
}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b002      	add	sp, #8
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	20000088 	.word	0x20000088

0800081c <get_UBX_GpsFixStatus>:

uint8_t get_UBX_GpsFixStatus(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
    return navStatusData.gpsFix;
 8000820:	4b02      	ldr	r3, [pc, #8]	@ (800082c <get_UBX_GpsFixStatus+0x10>)
 8000822:	7a1b      	ldrb	r3, [r3, #8]
}
 8000824:	0018      	movs	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	200000a8 	.word	0x200000a8

08000830 <processGPS>:



ubxMsgType processGPS(uint8_t c) {
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	0002      	movs	r2, r0
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	701a      	strb	r2, [r3, #0]
  static int fpos = 0;
  static uint8_t checksum[2];
  static ubxMsgType currentMsgType = MT_NONE;
  static int payloadSize = sizeof(UBXMessage);

  if (fpos < 2) {
 800083c:	4b55      	ldr	r3, [pc, #340]	@ (8000994 <processGPS+0x164>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	dc11      	bgt.n	8000868 <processGPS+0x38>
    // Buscamos el header UBX (0xB5, 0x62)
    if (c == UBX_HEADER[fpos])
 8000844:	4b53      	ldr	r3, [pc, #332]	@ (8000994 <processGPS+0x164>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a53      	ldr	r2, [pc, #332]	@ (8000998 <processGPS+0x168>)
 800084a:	5cd3      	ldrb	r3, [r2, r3]
 800084c:	1dfa      	adds	r2, r7, #7
 800084e:	7812      	ldrb	r2, [r2, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d105      	bne.n	8000860 <processGPS+0x30>
      fpos++;
 8000854:	4b4f      	ldr	r3, [pc, #316]	@ (8000994 <processGPS+0x164>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	1c5a      	adds	r2, r3, #1
 800085a:	4b4e      	ldr	r3, [pc, #312]	@ (8000994 <processGPS+0x164>)
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	e094      	b.n	800098a <processGPS+0x15a>
    else
      fpos = 0;  // Reiniciamos si no coincide
 8000860:	4b4c      	ldr	r3, [pc, #304]	@ (8000994 <processGPS+0x164>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e090      	b.n	800098a <processGPS+0x15a>
  } else {
    // Si ya tenemos el header, procesamos el payload
    if ((fpos - 2) < payloadSize)
 8000868:	4b4a      	ldr	r3, [pc, #296]	@ (8000994 <processGPS+0x164>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	1e5a      	subs	r2, r3, #1
 800086e:	4b4b      	ldr	r3, [pc, #300]	@ (800099c <processGPS+0x16c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	429a      	cmp	r2, r3
 8000874:	dc07      	bgt.n	8000886 <processGPS+0x56>
      ((uint8_t*)(&ubxMessage))[fpos - 2] = c;
 8000876:	4b47      	ldr	r3, [pc, #284]	@ (8000994 <processGPS+0x164>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1e9a      	subs	r2, r3, #2
 800087c:	4b48      	ldr	r3, [pc, #288]	@ (80009a0 <processGPS+0x170>)
 800087e:	18d3      	adds	r3, r2, r3
 8000880:	1dfa      	adds	r2, r7, #7
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	701a      	strb	r2, [r3, #0]

    fpos++;
 8000886:	4b43      	ldr	r3, [pc, #268]	@ (8000994 <processGPS+0x164>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	4b41      	ldr	r3, [pc, #260]	@ (8000994 <processGPS+0x164>)
 800088e:	601a      	str	r2, [r3, #0]

    if (fpos == 4) {
 8000890:	4b40      	ldr	r3, [pc, #256]	@ (8000994 <processGPS+0x164>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d11e      	bne.n	80008d6 <processGPS+0xa6>
      // Determinamos el tipo de mensaje basado en el header
      if (compareMsgHeader(NAV_POSLLH_HEADER)) {
 8000898:	4b42      	ldr	r3, [pc, #264]	@ (80009a4 <processGPS+0x174>)
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff ff50 	bl	8000740 <compareMsgHeader>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d006      	beq.n	80008b2 <processGPS+0x82>
        currentMsgType = MT_NAV_POSLLH;
 80008a4:	4b40      	ldr	r3, [pc, #256]	@ (80009a8 <processGPS+0x178>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
        payloadSize = sizeof(NAV_POSLLH);
 80008aa:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <processGPS+0x16c>)
 80008ac:	2220      	movs	r2, #32
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	e011      	b.n	80008d6 <processGPS+0xa6>
      } else if (compareMsgHeader(NAV_STATUS_HEADER)) {
 80008b2:	4b3e      	ldr	r3, [pc, #248]	@ (80009ac <processGPS+0x17c>)
 80008b4:	0018      	movs	r0, r3
 80008b6:	f7ff ff43 	bl	8000740 <compareMsgHeader>
 80008ba:	1e03      	subs	r3, r0, #0
 80008bc:	d006      	beq.n	80008cc <processGPS+0x9c>
        currentMsgType = MT_NAV_STATUS;
 80008be:	4b3a      	ldr	r3, [pc, #232]	@ (80009a8 <processGPS+0x178>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	701a      	strb	r2, [r3, #0]
        payloadSize = sizeof(NAV_STATUS);
 80008c4:	4b35      	ldr	r3, [pc, #212]	@ (800099c <processGPS+0x16c>)
 80008c6:	2214      	movs	r2, #20
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e004      	b.n	80008d6 <processGPS+0xa6>
      } else {
        // Mensaje desconocido, reiniciamos
        fpos = 0;
 80008cc:	4b31      	ldr	r3, [pc, #196]	@ (8000994 <processGPS+0x164>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
        return MT_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	e05a      	b.n	800098c <processGPS+0x15c>
      }
    }

    if (fpos == (payloadSize + 2)) {
 80008d6:	4b31      	ldr	r3, [pc, #196]	@ (800099c <processGPS+0x16c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	1c9a      	adds	r2, r3, #2
 80008dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000994 <processGPS+0x164>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	429a      	cmp	r2, r3
 80008e2:	d107      	bne.n	80008f4 <processGPS+0xc4>
      // Calculamos el checksum
      calcChecksum(checksum, payloadSize);
 80008e4:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <processGPS+0x16c>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b31      	ldr	r3, [pc, #196]	@ (80009b0 <processGPS+0x180>)
 80008ea:	0011      	movs	r1, r2
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fef7 	bl	80006e0 <calcChecksum>
 80008f2:	e04a      	b.n	800098a <processGPS+0x15a>
    } else if (fpos == (payloadSize + 3)) {
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <processGPS+0x16c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	1cda      	adds	r2, r3, #3
 80008fa:	4b26      	ldr	r3, [pc, #152]	@ (8000994 <processGPS+0x164>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d109      	bne.n	8000916 <processGPS+0xe6>
      // Verificamos el primer byte del checksum
      if (c != checksum[0]) {
 8000902:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <processGPS+0x180>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	1dfa      	adds	r2, r7, #7
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	429a      	cmp	r2, r3
 800090c:	d03d      	beq.n	800098a <processGPS+0x15a>
        fpos = 0;  // Reiniciamos si no coincide
 800090e:	4b21      	ldr	r3, [pc, #132]	@ (8000994 <processGPS+0x164>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	e039      	b.n	800098a <processGPS+0x15a>
      }
    } else if (fpos == (payloadSize + 4)) {
 8000916:	4b21      	ldr	r3, [pc, #132]	@ (800099c <processGPS+0x16c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	1d1a      	adds	r2, r3, #4
 800091c:	4b1d      	ldr	r3, [pc, #116]	@ (8000994 <processGPS+0x164>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	429a      	cmp	r2, r3
 8000922:	d128      	bne.n	8000976 <processGPS+0x146>
      // Verificamos el segundo byte del checksum
      fpos = 0;  // Reiniciamos en cualquier caso
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <processGPS+0x164>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
      if (c == checksum[1]) {
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <processGPS+0x180>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	1dfa      	adds	r2, r7, #7
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	429a      	cmp	r2, r3
 8000934:	d129      	bne.n	800098a <processGPS+0x15a>
        // Copiamos los datos a la estructura global correspondiente
        if (currentMsgType == MT_NAV_POSLLH) {
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <processGPS+0x178>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d10b      	bne.n	8000956 <processGPS+0x126>
          navPosllhData = ubxMessage.navPosllh;
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <processGPS+0x184>)
 8000940:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <processGPS+0x170>)
 8000942:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000944:	c313      	stmia	r3!, {r0, r1, r4}
 8000946:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000948:	c313      	stmia	r3!, {r0, r1, r4}
 800094a:	ca03      	ldmia	r2!, {r0, r1}
 800094c:	c303      	stmia	r3!, {r0, r1}
          isNavPosllhReceived = true;
 800094e:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <processGPS+0x188>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e00c      	b.n	8000970 <processGPS+0x140>
        } else if (currentMsgType == MT_NAV_STATUS) {
 8000956:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <processGPS+0x178>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d108      	bne.n	8000970 <processGPS+0x140>
          navStatusData = ubxMessage.navStatus;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <processGPS+0x18c>)
 8000960:	4a0f      	ldr	r2, [pc, #60]	@ (80009a0 <processGPS+0x170>)
 8000962:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000964:	c313      	stmia	r3!, {r0, r1, r4}
 8000966:	ca03      	ldmia	r2!, {r0, r1}
 8000968:	c303      	stmia	r3!, {r0, r1}
          isNavStatusReceived = true;
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <processGPS+0x190>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
        }
        return currentMsgType;  // Mensaje válido
 8000970:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <processGPS+0x178>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	e00a      	b.n	800098c <processGPS+0x15c>
      }
    } else if (fpos > (payloadSize + 4)) {
 8000976:	4b09      	ldr	r3, [pc, #36]	@ (800099c <processGPS+0x16c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1d1a      	adds	r2, r3, #4
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <processGPS+0x164>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	da02      	bge.n	800098a <processGPS+0x15a>
      // Error: reiniciamos
      fpos = 0;
 8000984:	4b03      	ldr	r3, [pc, #12]	@ (8000994 <processGPS+0x164>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
    }
  }

  return MT_NONE;  // No hay mensaje completo aún
 800098a:	2300      	movs	r3, #0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b003      	add	sp, #12
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	200000e0 	.word	0x200000e0
 8000998:	08003c10 	.word	0x08003c10
 800099c:	20000000 	.word	0x20000000
 80009a0:	200000c0 	.word	0x200000c0
 80009a4:	08003c14 	.word	0x08003c14
 80009a8:	200000e4 	.word	0x200000e4
 80009ac:	08003c18 	.word	0x08003c18
 80009b0:	200000e8 	.word	0x200000e8
 80009b4:	20000088 	.word	0x20000088
 80009b8:	200000bc 	.word	0x200000bc
 80009bc:	200000a8 	.word	0x200000a8
 80009c0:	200000bd 	.word	0x200000bd

080009c4 <HAL_UART_RxHalfCpltCallback>:

#define UBX_Rx_Size 2*sizeof(NAV_STATUS)+2*sizeof(NAV_POSLLH)
uint8_t UBX_Rx_Data[UBX_Rx_Size];


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b087      	sub	sp, #28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]


    if (huart == &huart2) {  // Verifica que la interrupción proviene de USART2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	4b10      	ldr	r3, [pc, #64]	@ (8000a20 <HAL_UART_RxCpltCallback+0x4c>)
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d118      	bne.n	8000a16 <HAL_UART_RxCpltCallback+0x42>

    	int32_t Lat, Lon;
        // Procesa los datos en el buffer UBX_Rx_Data
        processUBXData(&UBX_Rx_Data, UBX_Rx_Size);
 80009e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <HAL_UART_RxCpltCallback+0x50>)
 80009e6:	2168      	movs	r1, #104	@ 0x68
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff fecb 	bl	8000784 <processUBXData>

        // Obtener latitud y longitud
        get_UBX_LatLon(&Lat, &Lon);
 80009ee:	230c      	movs	r3, #12
 80009f0:	18fa      	adds	r2, r7, r3
 80009f2:	2310      	movs	r3, #16
 80009f4:	18fb      	adds	r3, r7, r3
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fefb 	bl	80007f4 <get_UBX_LatLon>

        // GPS FIX STATUS: 0 NO FIX, 1 DEAD RECKONING ONLY, 2 2D FIX, 3 3D FIX, 4 GPS + DEAD RECKONING COMBINED 5 TIME ONLY FIX
        uint8_t fixStatus = get_UBX_GpsFixStatus();
 80009fe:	2317      	movs	r3, #23
 8000a00:	18fc      	adds	r4, r7, r3
 8000a02:	f7ff ff0b 	bl	800081c <get_UBX_GpsFixStatus>
 8000a06:	0003      	movs	r3, r0
 8000a08:	7023      	strb	r3, [r4, #0]

        // Reinicia la recepción DMA
        HAL_UART_Receive_DMA(&huart2, UBX_Rx_Data, UBX_Rx_Size);
 8000a0a:	4906      	ldr	r1, [pc, #24]	@ (8000a24 <HAL_UART_RxCpltCallback+0x50>)
 8000a0c:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <HAL_UART_RxCpltCallback+0x4c>)
 8000a0e:	2268      	movs	r2, #104	@ 0x68
 8000a10:	0018      	movs	r0, r3
 8000a12:	f002 fa27 	bl	8002e64 <HAL_UART_Receive_DMA>
    }
}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b007      	add	sp, #28
 8000a1c:	bd90      	pop	{r4, r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	20000158 	.word	0x20000158
 8000a24:	200000ec 	.word	0x200000ec

08000a28 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 while(1){
	 huart->ErrorCode;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2284      	movs	r2, #132	@ 0x84
 8000a34:	589b      	ldr	r3, [r3, r2]
 8000a36:	e7fb      	b.n	8000a30 <HAL_UART_ErrorCallback+0x8>

08000a38 <main>:




int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0



  HAL_Init();
 8000a3e:	f000 f9eb 	bl	8000e18 <HAL_Init>

  SystemClock_Config();
 8000a42:	f000 f899 	bl	8000b78 <SystemClock_Config>

  GPIO_Init();
 8000a46:	f7ff fdfb 	bl	8000640 <GPIO_Init>

  ADC_Init();
 8000a4a:	f7ff fd2d 	bl	80004a8 <ADC_Init>


  MX_DMA_Init();
 8000a4e:	f7ff fdd9 	bl	8000604 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a52:	f000 f911 	bl	8000c78 <MX_USART2_UART_Init>

  //Lanza una Conv. DMA
  HAL_UART_Receive_DMA(&huart2, UBX_Rx_Data, UBX_Rx_Data);
 8000a56:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <main+0x48>)
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4909      	ldr	r1, [pc, #36]	@ (8000a80 <main+0x48>)
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <main+0x4c>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 fa00 	bl	8002e64 <HAL_UART_Receive_DMA>



	  //TODO TEST PARA EL ADC Si llega una transferencia DMA se pijean los datos

	  Get_ADC_Val(adc_values);
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <main+0x50>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f7ff fd92 	bl	8000590 <Get_ADC_Val>
	   uint16_t channel_4_value = adc_values[0];  //A3 - PA_4
 8000a6c:	1dbb      	adds	r3, r7, #6
 8000a6e:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <main+0x50>)
 8000a70:	8812      	ldrh	r2, [r2, #0]
 8000a72:	801a      	strh	r2, [r3, #0]
	   uint16_t channel_5_value = adc_values[1];  //A4 - PA_5
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <main+0x50>)
 8000a78:	8852      	ldrh	r2, [r2, #2]
 8000a7a:	801a      	strh	r2, [r3, #0]
  while (1) {
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	e7f1      	b.n	8000a64 <main+0x2c>
 8000a80:	200000ec 	.word	0x200000ec
 8000a84:	20000158 	.word	0x20000158
 8000a88:	20000154 	.word	0x20000154

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <HAL_MspInit+0x24>)
 8000a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <HAL_MspInit+0x24>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <HAL_MspInit+0x24>)
 8000a9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <HAL_MspInit+0x24>)
 8000aa2:	2180      	movs	r1, #128	@ 0x80
 8000aa4:	0549      	lsls	r1, r1, #21
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b089      	sub	sp, #36	@ 0x24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	240c      	movs	r4, #12
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2314      	movs	r3, #20
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f003 f869 	bl	8003b9e <memset>
  if(hadc->Instance==ADC1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a14      	ldr	r2, [pc, #80]	@ (8000b24 <HAL_ADC_MspInit+0x70>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d122      	bne.n	8000b1c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ad6:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <HAL_ADC_MspInit+0x74>)
 8000ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <HAL_ADC_MspInit+0x74>)
 8000adc:	2180      	movs	r1, #128	@ 0x80
 8000ade:	0089      	lsls	r1, r1, #2
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <HAL_ADC_MspInit+0x74>)
 8000ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_ADC_MspInit+0x74>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	430a      	orrs	r2, r1
 8000aee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000af0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <HAL_ADC_MspInit+0x74>)
 8000af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af4:	2201      	movs	r2, #1
 8000af6:	4013      	ands	r3, r2
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2230      	movs	r2, #48	@ 0x30
 8000b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2203      	movs	r2, #3
 8000b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	193a      	adds	r2, r7, r4
 8000b10:	23a0      	movs	r3, #160	@ 0xa0
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 f8f8 	bl	8001d0c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b1c:	46c0      	nop			@ (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b009      	add	sp, #36	@ 0x24
 8000b22:	bd90      	pop	{r4, r7, pc}
 8000b24:	40012400 	.word	0x40012400
 8000b28:	40021000 	.word	0x40021000

08000b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	e7fd      	b.n	8000b30 <NMI_Handler+0x4>

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	e7fd      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b40:	46c0      	nop			@ (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f9b4 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b64:	4b03      	ldr	r3, [pc, #12]	@ (8000b74 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 fff4 	bl	8001b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	200001e0 	.word	0x200001e0

08000b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b099      	sub	sp, #100	@ 0x64
 8000b7c:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7e:	242c      	movs	r4, #44	@ 0x2c
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	0018      	movs	r0, r3
 8000b84:	2334      	movs	r3, #52	@ 0x34
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f003 f808 	bl	8003b9e <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b8e:	2318      	movs	r3, #24
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	0018      	movs	r0, r3
 8000b94:	2314      	movs	r3, #20
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f003 f800 	bl	8003b9e <memset>
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	2318      	movs	r3, #24
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f002 fff9 	bl	8003b9e <memset>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bac:	4b2a      	ldr	r3, [pc, #168]	@ (8000c58 <SystemClock_Config+0xe0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a2a      	ldr	r2, [pc, #168]	@ (8000c5c <SystemClock_Config+0xe4>)
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <SystemClock_Config+0xe0>)
 8000bb6:	2180      	movs	r1, #128	@ 0x80
 8000bb8:	0109      	lsls	r1, r1, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	601a      	str	r2, [r3, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbe:	0021      	movs	r1, r4
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2201      	movs	r2, #1
 8000bca:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2210      	movs	r2, #16
 8000bd0:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	625a      	str	r2, [r3, #36]	@ 0x24
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2280      	movs	r2, #128	@ 0x80
 8000be2:	02d2      	lsls	r2, r2, #11
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
	  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	03d2      	lsls	r2, r2, #15
 8000bec:	631a      	str	r2, [r3, #48]	@ 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 fa17 	bl	8002024 <HAL_RCC_OscConfig>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x86>
	  {
	    Error_Handler();
 8000bfa:	f000 f831 	bl	8000c60 <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	2118      	movs	r1, #24
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	220f      	movs	r2, #15
 8000c04:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	22e0      	movs	r2, #224	@ 0xe0
 8000c16:	00d2      	lsls	r2, r2, #3
 8000c18:	60da      	str	r2, [r3, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000c1a:	187b      	adds	r3, r7, r1
 8000c1c:	22e0      	movs	r2, #224	@ 0xe0
 8000c1e:	00d2      	lsls	r2, r2, #3
 8000c20:	611a      	str	r2, [r3, #16]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2101      	movs	r1, #1
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 fd78 	bl	800271c <HAL_RCC_ClockConfig>
 8000c2c:	1e03      	subs	r3, r0, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xbc>
	  {
	    Error_Handler();
 8000c30:	f000 f816 	bl	8000c60 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c34:	003b      	movs	r3, r7
 8000c36:	2202      	movs	r2, #2
 8000c38:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c40:	003b      	movs	r3, r7
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 ff8e 	bl	8002b64 <HAL_RCCEx_PeriphCLKConfig>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0xd8>
	  {
	    Error_Handler();
 8000c4c:	f000 f808 	bl	8000c60 <Error_Handler>
	  }
}
 8000c50:	46c0      	nop			@ (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b019      	add	sp, #100	@ 0x64
 8000c56:	bd90      	pop	{r4, r7, pc}
 8000c58:	40007000 	.word	0x40007000
 8000c5c:	ffffe7ff 	.word	0xffffe7ff

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	46c0      	nop			@ (mov r8, r8)

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	e7fd      	b.n	8000c68 <Error_Handler+0x8>

08000c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000c7e:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <MX_USART2_UART_Init+0x64>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000c84:	2296      	movs	r2, #150	@ 0x96
 8000c86:	0192      	lsls	r2, r2, #6
 8000c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000cbc:	2280      	movs	r2, #128	@ 0x80
 8000cbe:	0152      	lsls	r2, r2, #5
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	4b05      	ldr	r3, [pc, #20]	@ (8000cd8 <MX_USART2_UART_Init+0x60>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f002 f879 	bl	8002dbc <HAL_UART_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000cce:	f7ff ffc7 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000158 	.word	0x20000158
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	@ 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	240c      	movs	r4, #12
 8000cea:	193b      	adds	r3, r7, r4
 8000cec:	0018      	movs	r0, r3
 8000cee:	2314      	movs	r3, #20
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f002 ff53 	bl	8003b9e <memset>
  if(uartHandle->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8000db4 <HAL_UART_MspInit+0xd4>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d153      	bne.n	8000daa <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <HAL_UART_MspInit+0xd8>)
 8000d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d06:	4b2c      	ldr	r3, [pc, #176]	@ (8000db8 <HAL_UART_MspInit+0xd8>)
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0289      	lsls	r1, r1, #10
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b29      	ldr	r3, [pc, #164]	@ (8000db8 <HAL_UART_MspInit+0xd8>)
 8000d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d14:	4b28      	ldr	r3, [pc, #160]	@ (8000db8 <HAL_UART_MspInit+0xd8>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d1c:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <HAL_UART_MspInit+0xd8>)
 8000d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d20:	2201      	movs	r2, #1
 8000d22:	4013      	ands	r3, r2
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	22c0      	movs	r2, #192	@ 0xc0
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	0021      	movs	r1, r4
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	2202      	movs	r2, #2
 8000d36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2203      	movs	r2, #3
 8000d42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2204      	movs	r2, #4
 8000d48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	187a      	adds	r2, r7, r1
 8000d4c:	23a0      	movs	r3, #160	@ 0xa0
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 ffda 	bl	8001d0c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d5a:	4a19      	ldr	r2, [pc, #100]	@ (8000dc0 <HAL_UART_MspInit+0xe0>)
 8000d5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d84:	2220      	movs	r2, #32
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 fe01 	bl	8001998 <HAL_DMA_Init>
 8000d96:	1e03      	subs	r3, r0, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000d9a:	f7ff ff61 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000da2:	675a      	str	r2, [r3, #116]	@ 0x74
 8000da4:	4b05      	ldr	r3, [pc, #20]	@ (8000dbc <HAL_UART_MspInit+0xdc>)
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b009      	add	sp, #36	@ 0x24
 8000db0:	bd90      	pop	{r4, r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	40004400 	.word	0x40004400
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	200001e0 	.word	0x200001e0
 8000dc0:	40020058 	.word	0x40020058

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f7ff ff50 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000df2:	f002 fedd 	bl	8003bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fe1f 	bl	8000a38 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
   ldr   r0, =_estack
 8000dfc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e08:	08003c98 	.word	0x08003c98
  ldr r2, =_sbss
 8000e0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e10:	2000022c 	.word	0x2000022c

08000e14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_COMP_IRQHandler>
	...

08000e18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_Init+0x3c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_Init+0x3c>)
 8000e2a:	2140      	movs	r1, #64	@ 0x40
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 f811 	bl	8000e58 <HAL_InitTick>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e001      	b.n	8000e46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e42:	f7ff fe23 	bl	8000a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_InitTick+0x5c>)
 8000e62:	681c      	ldr	r4, [r3, #0]
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_InitTick+0x60>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	0019      	movs	r1, r3
 8000e6a:	23fa      	movs	r3, #250	@ 0xfa
 8000e6c:	0098      	lsls	r0, r3, #2
 8000e6e:	f7ff f94b 	bl	8000108 <__udivsi3>
 8000e72:	0003      	movs	r3, r0
 8000e74:	0019      	movs	r1, r3
 8000e76:	0020      	movs	r0, r4
 8000e78:	f7ff f946 	bl	8000108 <__udivsi3>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fd7d 	bl	800197e <HAL_SYSTICK_Config>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e00f      	b.n	8000eac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d80b      	bhi.n	8000eaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	2301      	movs	r3, #1
 8000e96:	425b      	negs	r3, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fd4a 	bl	8001934 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_InitTick+0x64>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	20000004 	.word	0x20000004
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_IncTick+0x1c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	001a      	movs	r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	18d2      	adds	r2, r2, r3
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	20000228 	.word	0x20000228

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b02      	ldr	r3, [pc, #8]	@ (8000ef4 <HAL_GetTick+0x10>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	20000228 	.word	0x20000228

08000ef8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e159      	b.n	80011be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2250      	movs	r2, #80	@ 0x50
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f7ff fdc6 	bl	8000ab4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f2c:	2210      	movs	r2, #16
 8000f2e:	4013      	ands	r3, r2
 8000f30:	2b10      	cmp	r3, #16
 8000f32:	d005      	beq.n	8000f40 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	2204      	movs	r2, #4
 8000f3c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f3e:	d00b      	beq.n	8000f58 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f44:	2210      	movs	r2, #16
 8000f46:	431a      	orrs	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2250      	movs	r2, #80	@ 0x50
 8000f50:	2100      	movs	r1, #0
 8000f52:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e132      	b.n	80011be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f5c:	4a9a      	ldr	r2, [pc, #616]	@ (80011c8 <HAL_ADC_Init+0x2d0>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	2202      	movs	r2, #2
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2203      	movs	r2, #3
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d108      	bne.n	8000f88 <HAL_ADC_Init+0x90>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_ADC_Init+0x90>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <HAL_ADC_Init+0x92>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d149      	bne.n	8001022 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	23c0      	movs	r3, #192	@ 0xc0
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d00b      	beq.n	8000fb2 <HAL_ADC_Init+0xba>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d005      	beq.n	8000fb2 <HAL_ADC_Init+0xba>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	@ 0x80
 8000fac:	061b      	lsls	r3, r3, #24
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d111      	bne.n	8000fd6 <HAL_ADC_Init+0xde>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	0892      	lsrs	r2, r2, #2
 8000fc0:	611a      	str	r2, [r3, #16]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6919      	ldr	r1, [r3, #16]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	e014      	b.n	8001000 <HAL_ADC_Init+0x108>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	691a      	ldr	r2, [r3, #16]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	0892      	lsrs	r2, r2, #2
 8000fe4:	611a      	str	r2, [r3, #16]
 8000fe6:	4b79      	ldr	r3, [pc, #484]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	4b78      	ldr	r3, [pc, #480]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 8000fec:	4978      	ldr	r1, [pc, #480]	@ (80011d0 <HAL_ADC_Init+0x2d8>)
 8000fee:	400a      	ands	r2, r1
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	4b76      	ldr	r3, [pc, #472]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 8000ff4:	6819      	ldr	r1, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	4b74      	ldr	r3, [pc, #464]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2118      	movs	r1, #24
 800100c:	438a      	bics	r2, r1
 800100e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	68d9      	ldr	r1, [r3, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	430a      	orrs	r2, r1
 8001020:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001022:	4b6a      	ldr	r3, [pc, #424]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b69      	ldr	r3, [pc, #420]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 8001028:	496a      	ldr	r1, [pc, #424]	@ (80011d4 <HAL_ADC_Init+0x2dc>)
 800102a:	400a      	ands	r2, r1
 800102c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800102e:	4b67      	ldr	r3, [pc, #412]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 8001030:	6819      	ldr	r1, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001036:	065a      	lsls	r2, r3, #25
 8001038:	4b64      	ldr	r3, [pc, #400]	@ (80011cc <HAL_ADC_Init+0x2d4>)
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	2380      	movs	r3, #128	@ 0x80
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	4013      	ands	r3, r2
 800104a:	d108      	bne.n	800105e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2180      	movs	r1, #128	@ 0x80
 8001058:	0549      	lsls	r1, r1, #21
 800105a:	430a      	orrs	r2, r1
 800105c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	495b      	ldr	r1, [pc, #364]	@ (80011d8 <HAL_ADC_Init+0x2e0>)
 800106a:	400a      	ands	r2, r1
 800106c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68d9      	ldr	r1, [r3, #12]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b02      	cmp	r3, #2
 800107e:	d101      	bne.n	8001084 <HAL_ADC_Init+0x18c>
 8001080:	2304      	movs	r3, #4
 8001082:	e000      	b.n	8001086 <HAL_ADC_Init+0x18e>
 8001084:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001086:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2020      	movs	r0, #32
 800108c:	5c1b      	ldrb	r3, [r3, r0]
 800108e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001090:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	202c      	movs	r0, #44	@ 0x2c
 8001096:	5c1b      	ldrb	r3, [r3, r0]
 8001098:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800109a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80010a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010be:	23c2      	movs	r3, #194	@ 0xc2
 80010c0:	33ff      	adds	r3, #255	@ 0xff
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d00b      	beq.n	80010de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68d9      	ldr	r1, [r3, #12]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80010d4:	431a      	orrs	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2221      	movs	r2, #33	@ 0x21
 80010e2:	5c9b      	ldrb	r3, [r3, r2]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d11a      	bne.n	800111e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2220      	movs	r2, #32
 80010ec:	5c9b      	ldrb	r3, [r3, r2]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2180      	movs	r1, #128	@ 0x80
 80010fe:	0249      	lsls	r1, r1, #9
 8001100:	430a      	orrs	r2, r1
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	e00b      	b.n	800111e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800110a:	2220      	movs	r2, #32
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001116:	2201      	movs	r2, #1
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001122:	2b01      	cmp	r3, #1
 8001124:	d11f      	bne.n	8001166 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	492a      	ldr	r1, [pc, #168]	@ (80011dc <HAL_ADC_Init+0x2e4>)
 8001132:	400a      	ands	r2, r1
 8001134:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6919      	ldr	r1, [r3, #16]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001144:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800114a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	691a      	ldr	r2, [r3, #16]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2101      	movs	r1, #1
 8001160:	430a      	orrs	r2, r1
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	e00e      	b.n	8001184 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	2201      	movs	r2, #1
 800116e:	4013      	ands	r3, r2
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	691a      	ldr	r2, [r3, #16]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2101      	movs	r1, #1
 8001180:	438a      	bics	r2, r1
 8001182:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2107      	movs	r1, #7
 8001190:	438a      	bics	r2, r1
 8001192:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6959      	ldr	r1, [r3, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011b0:	2203      	movs	r2, #3
 80011b2:	4393      	bics	r3, r2
 80011b4:	2201      	movs	r2, #1
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	0018      	movs	r0, r3
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	fffffefd 	.word	0xfffffefd
 80011cc:	40012708 	.word	0x40012708
 80011d0:	ffc3ffff 	.word	0xffc3ffff
 80011d4:	fdffffff 	.word	0xfdffffff
 80011d8:	fffe0219 	.word	0xfffe0219
 80011dc:	fffffc03 	.word	0xfffffc03

080011e0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	2204      	movs	r2, #4
 80011f8:	4013      	ands	r3, r2
 80011fa:	d138      	bne.n	800126e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2250      	movs	r2, #80	@ 0x50
 8001200:	5c9b      	ldrb	r3, [r3, r2]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d101      	bne.n	800120a <HAL_ADC_Start+0x2a>
 8001206:	2302      	movs	r3, #2
 8001208:	e038      	b.n	800127c <HAL_ADC_Start+0x9c>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2250      	movs	r2, #80	@ 0x50
 800120e:	2101      	movs	r1, #1
 8001210:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d007      	beq.n	800122a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800121a:	230f      	movs	r3, #15
 800121c:	18fc      	adds	r4, r7, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	0018      	movs	r0, r3
 8001222:	f000 f99f 	bl	8001564 <ADC_Enable>
 8001226:	0003      	movs	r3, r0
 8001228:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800122a:	230f      	movs	r3, #15
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d120      	bne.n	8001276 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <HAL_ADC_Start+0xa4>)
 800123a:	4013      	ands	r3, r2
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2250      	movs	r2, #80	@ 0x50
 8001250:	2100      	movs	r1, #0
 8001252:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	221c      	movs	r2, #28
 800125a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2104      	movs	r1, #4
 8001268:	430a      	orrs	r2, r1
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e003      	b.n	8001276 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800126e:	230f      	movs	r3, #15
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	2202      	movs	r2, #2
 8001274:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	781b      	ldrb	r3, [r3, #0]
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b005      	add	sp, #20
 8001282:	bd90      	pop	{r4, r7, pc}
 8001284:	fffff0fe 	.word	0xfffff0fe

08001288 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001290:	230f      	movs	r3, #15
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2250      	movs	r2, #80	@ 0x50
 800129c:	5c9b      	ldrb	r3, [r3, r2]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d101      	bne.n	80012a6 <HAL_ADC_Stop+0x1e>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e029      	b.n	80012fa <HAL_ADC_Stop+0x72>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2250      	movs	r2, #80	@ 0x50
 80012aa:	2101      	movs	r1, #1
 80012ac:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80012ae:	250f      	movs	r5, #15
 80012b0:	197c      	adds	r4, r7, r5
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 fa24 	bl	8001702 <ADC_ConversionStop>
 80012ba:	0003      	movs	r3, r0
 80012bc:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80012be:	197b      	adds	r3, r7, r5
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d112      	bne.n	80012ec <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80012c6:	197c      	adds	r4, r7, r5
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0018      	movs	r0, r3
 80012cc:	f000 f9b2 	bl	8001634 <ADC_Disable>
 80012d0:	0003      	movs	r3, r0
 80012d2:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80012d4:	197b      	adds	r3, r7, r5
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d107      	bne.n	80012ec <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012e0:	4a08      	ldr	r2, [pc, #32]	@ (8001304 <HAL_ADC_Stop+0x7c>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	2201      	movs	r2, #1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2250      	movs	r2, #80	@ 0x50
 80012f0:	2100      	movs	r1, #0
 80012f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80012f4:	230f      	movs	r3, #15
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	781b      	ldrb	r3, [r3, #0]
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b004      	add	sp, #16
 8001300:	bdb0      	pop	{r4, r5, r7, pc}
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	fffffefe 	.word	0xfffffefe

08001308 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	695b      	ldr	r3, [r3, #20]
 800131e:	2b08      	cmp	r3, #8
 8001320:	d102      	bne.n	8001328 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001322:	2308      	movs	r3, #8
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	e014      	b.n	8001352 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2201      	movs	r2, #1
 8001330:	4013      	ands	r3, r2
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10b      	bne.n	800134e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133a:	2220      	movs	r2, #32
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2250      	movs	r2, #80	@ 0x50
 8001346:	2100      	movs	r1, #0
 8001348:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e072      	b.n	8001434 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800134e:	230c      	movs	r3, #12
 8001350:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001352:	f7ff fdc7 	bl	8000ee4 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800135a:	e01f      	b.n	800139c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	3301      	adds	r3, #1
 8001360:	d01c      	beq.n	800139c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <HAL_ADC_PollForConversion+0x70>
 8001368:	f7ff fdbc 	bl	8000ee4 <HAL_GetTick>
 800136c:	0002      	movs	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d211      	bcs.n	800139c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4013      	ands	r3, r2
 8001382:	d10b      	bne.n	800139c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001388:	2204      	movs	r2, #4
 800138a:	431a      	orrs	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2250      	movs	r2, #80	@ 0x50
 8001394:	2100      	movs	r1, #0
 8001396:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e04b      	b.n	8001434 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0d9      	beq.n	800135c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013ac:	2280      	movs	r2, #128	@ 0x80
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	23c0      	movs	r3, #192	@ 0xc0
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4013      	ands	r3, r2
 80013c2:	d12e      	bne.n	8001422 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2220      	movs	r2, #32
 80013c8:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d129      	bne.n	8001422 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2208      	movs	r2, #8
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d122      	bne.n	8001422 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d110      	bne.n	800140a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	210c      	movs	r1, #12
 80013f4:	438a      	bics	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fc:	4a0f      	ldr	r2, [pc, #60]	@ (800143c <HAL_ADC_PollForConversion+0x134>)
 80013fe:	4013      	ands	r3, r2
 8001400:	2201      	movs	r2, #1
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	655a      	str	r2, [r3, #84]	@ 0x54
 8001408:	e00b      	b.n	8001422 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800140e:	2220      	movs	r2, #32
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141a:	2201      	movs	r2, #1
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	220c      	movs	r2, #12
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b004      	add	sp, #16
 800143a:	bd80      	pop	{r7, pc}
 800143c:	fffffefe 	.word	0xfffffefe

08001440 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2250      	movs	r2, #80	@ 0x50
 8001466:	5c9b      	ldrb	r3, [r3, r2]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d101      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x18>
 800146c:	2302      	movs	r3, #2
 800146e:	e06c      	b.n	800154a <HAL_ADC_ConfigChannel+0xf2>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2250      	movs	r2, #80	@ 0x50
 8001474:	2101      	movs	r1, #1
 8001476:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2204      	movs	r2, #4
 8001480:	4013      	ands	r3, r2
 8001482:	d00b      	beq.n	800149c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001488:	2220      	movs	r2, #32
 800148a:	431a      	orrs	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2250      	movs	r2, #80	@ 0x50
 8001494:	2100      	movs	r1, #0
 8001496:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e056      	b.n	800154a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001554 <HAL_ADC_ConfigChannel+0xfc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d028      	beq.n	80014f8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	035b      	lsls	r3, r3, #13
 80014b2:	0b5a      	lsrs	r2, r3, #13
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	02db      	lsls	r3, r3, #11
 80014c4:	4013      	ands	r3, r2
 80014c6:	d009      	beq.n	80014dc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80014c8:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 80014ce:	2180      	movs	r1, #128	@ 0x80
 80014d0:	0409      	lsls	r1, r1, #16
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014d6:	200a      	movs	r0, #10
 80014d8:	f000 f960 	bl	800179c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	029b      	lsls	r3, r3, #10
 80014e4:	4013      	ands	r3, r2
 80014e6:	d02b      	beq.n	8001540 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 80014ee:	2180      	movs	r1, #128	@ 0x80
 80014f0:	03c9      	lsls	r1, r1, #15
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e023      	b.n	8001540 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	035b      	lsls	r3, r3, #13
 8001504:	0b5b      	lsrs	r3, r3, #13
 8001506:	43d9      	mvns	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	2380      	movs	r3, #128	@ 0x80
 8001516:	02db      	lsls	r3, r3, #11
 8001518:	4013      	ands	r3, r2
 800151a:	d005      	beq.n	8001528 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800151c:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 8001522:	490e      	ldr	r1, [pc, #56]	@ (800155c <HAL_ADC_ConfigChannel+0x104>)
 8001524:	400a      	ands	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	029b      	lsls	r3, r3, #10
 8001530:	4013      	ands	r3, r2
 8001532:	d005      	beq.n	8001540 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <HAL_ADC_ConfigChannel+0x100>)
 800153a:	4909      	ldr	r1, [pc, #36]	@ (8001560 <HAL_ADC_ConfigChannel+0x108>)
 800153c:	400a      	ands	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2250      	movs	r2, #80	@ 0x50
 8001544:	2100      	movs	r1, #0
 8001546:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b002      	add	sp, #8
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	00001001 	.word	0x00001001
 8001558:	40012708 	.word	0x40012708
 800155c:	ff7fffff 	.word	0xff7fffff
 8001560:	ffbfffff 	.word	0xffbfffff

08001564 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2203      	movs	r2, #3
 8001578:	4013      	ands	r3, r2
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <ADC_Enable+0x2c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <ADC_Enable+0x2c>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <ADC_Enable+0x2e>
 8001590:	2300      	movs	r3, #0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d146      	bne.n	8001624 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a24      	ldr	r2, [pc, #144]	@ (8001630 <ADC_Enable+0xcc>)
 800159e:	4013      	ands	r3, r2
 80015a0:	d00d      	beq.n	80015be <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a6:	2210      	movs	r2, #16
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	2201      	movs	r2, #1
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e033      	b.n	8001626 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 f8e4 	bl	800179c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80015d4:	f7ff fc86 	bl	8000ee4 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015dc:	e01b      	b.n	8001616 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015de:	f7ff fc81 	bl	8000ee4 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b0a      	cmp	r3, #10
 80015ea:	d914      	bls.n	8001616 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d00d      	beq.n	8001616 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fe:	2210      	movs	r2, #16
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160a:	2201      	movs	r2, #1
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e007      	b.n	8001626 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	4013      	ands	r3, r2
 8001620:	2b01      	cmp	r3, #1
 8001622:	d1dc      	bne.n	80015de <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b004      	add	sp, #16
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	80000017 	.word	0x80000017

08001634 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2203      	movs	r2, #3
 8001648:	4013      	ands	r3, r2
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <ADC_Disable+0x2c>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2201      	movs	r2, #1
 8001656:	4013      	ands	r3, r2
 8001658:	2b01      	cmp	r3, #1
 800165a:	d101      	bne.n	8001660 <ADC_Disable+0x2c>
 800165c:	2301      	movs	r3, #1
 800165e:	e000      	b.n	8001662 <ADC_Disable+0x2e>
 8001660:	2300      	movs	r3, #0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d048      	beq.n	80016f8 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2205      	movs	r2, #5
 800166e:	4013      	ands	r3, r2
 8001670:	2b01      	cmp	r3, #1
 8001672:	d110      	bne.n	8001696 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2102      	movs	r1, #2
 8001680:	430a      	orrs	r2, r1
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2203      	movs	r2, #3
 800168a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800168c:	f7ff fc2a 	bl	8000ee4 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001694:	e029      	b.n	80016ea <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800169a:	2210      	movs	r2, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a6:	2201      	movs	r2, #1
 80016a8:	431a      	orrs	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e023      	b.n	80016fa <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016b2:	f7ff fc17 	bl	8000ee4 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b0a      	cmp	r3, #10
 80016be:	d914      	bls.n	80016ea <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2201      	movs	r2, #1
 80016c8:	4013      	ands	r3, r2
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d10d      	bne.n	80016ea <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d2:	2210      	movs	r2, #16
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016de:	2201      	movs	r2, #1
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e007      	b.n	80016fa <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2201      	movs	r2, #1
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d0dc      	beq.n	80016b2 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b004      	add	sp, #16
 8001700:	bd80      	pop	{r7, pc}

08001702 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2204      	movs	r2, #4
 8001716:	4013      	ands	r3, r2
 8001718:	d03a      	beq.n	8001790 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2204      	movs	r2, #4
 8001722:	4013      	ands	r3, r2
 8001724:	2b04      	cmp	r3, #4
 8001726:	d10d      	bne.n	8001744 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8001732:	d107      	bne.n	8001744 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2110      	movs	r1, #16
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001744:	f7ff fbce 	bl	8000ee4 <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800174c:	e01a      	b.n	8001784 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800174e:	f7ff fbc9 	bl	8000ee4 <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b0a      	cmp	r3, #10
 800175a:	d913      	bls.n	8001784 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2204      	movs	r2, #4
 8001764:	4013      	ands	r3, r2
 8001766:	d00d      	beq.n	8001784 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176c:	2210      	movs	r2, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001778:	2201      	movs	r2, #1
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e006      	b.n	8001792 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2204      	movs	r2, #4
 800178c:	4013      	ands	r3, r2
 800178e:	d1de      	bne.n	800174e <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b004      	add	sp, #16
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <ADC_DelayMicroSecond+0x38>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	490b      	ldr	r1, [pc, #44]	@ (80017d8 <ADC_DelayMicroSecond+0x3c>)
 80017aa:	0018      	movs	r0, r3
 80017ac:	f7fe fcac 	bl	8000108 <__udivsi3>
 80017b0:	0003      	movs	r3, r0
 80017b2:	001a      	movs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4353      	muls	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80017ba:	e002      	b.n	80017c2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	3b01      	subs	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f9      	bne.n	80017bc <ADC_DelayMicroSecond+0x20>
  }
}
 80017c8:	46c0      	nop			@ (mov r8, r8)
 80017ca:	46c0      	nop			@ (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b004      	add	sp, #16
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	20000004 	.word	0x20000004
 80017d8:	000f4240 	.word	0x000f4240

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	0002      	movs	r2, r0
 80017e4:	1dfb      	adds	r3, r7, #7
 80017e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	1dfb      	adds	r3, r7, #7
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80017ee:	d809      	bhi.n	8001804 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f0:	1dfb      	adds	r3, r7, #7
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	001a      	movs	r2, r3
 80017f6:	231f      	movs	r3, #31
 80017f8:	401a      	ands	r2, r3
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <__NVIC_EnableIRQ+0x30>)
 80017fc:	2101      	movs	r1, #1
 80017fe:	4091      	lsls	r1, r2
 8001800:	000a      	movs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
  }
}
 8001804:	46c0      	nop			@ (mov r8, r8)
 8001806:	46bd      	mov	sp, r7
 8001808:	b002      	add	sp, #8
 800180a:	bd80      	pop	{r7, pc}
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b590      	push	{r4, r7, lr}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	0002      	movs	r2, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b7f      	cmp	r3, #127	@ 0x7f
 8001824:	d828      	bhi.n	8001878 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001826:	4a2f      	ldr	r2, [pc, #188]	@ (80018e4 <__NVIC_SetPriority+0xd4>)
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25b      	sxtb	r3, r3
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	33c0      	adds	r3, #192	@ 0xc0
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	589b      	ldr	r3, [r3, r2]
 8001836:	1dfa      	adds	r2, r7, #7
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	0011      	movs	r1, r2
 800183c:	2203      	movs	r2, #3
 800183e:	400a      	ands	r2, r1
 8001840:	00d2      	lsls	r2, r2, #3
 8001842:	21ff      	movs	r1, #255	@ 0xff
 8001844:	4091      	lsls	r1, r2
 8001846:	000a      	movs	r2, r1
 8001848:	43d2      	mvns	r2, r2
 800184a:	401a      	ands	r2, r3
 800184c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	019b      	lsls	r3, r3, #6
 8001852:	22ff      	movs	r2, #255	@ 0xff
 8001854:	401a      	ands	r2, r3
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	0018      	movs	r0, r3
 800185c:	2303      	movs	r3, #3
 800185e:	4003      	ands	r3, r0
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001864:	481f      	ldr	r0, [pc, #124]	@ (80018e4 <__NVIC_SetPriority+0xd4>)
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b25b      	sxtb	r3, r3
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	430a      	orrs	r2, r1
 8001870:	33c0      	adds	r3, #192	@ 0xc0
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001876:	e031      	b.n	80018dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001878:	4a1b      	ldr	r2, [pc, #108]	@ (80018e8 <__NVIC_SetPriority+0xd8>)
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	0019      	movs	r1, r3
 8001880:	230f      	movs	r3, #15
 8001882:	400b      	ands	r3, r1
 8001884:	3b08      	subs	r3, #8
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3306      	adds	r3, #6
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	18d3      	adds	r3, r2, r3
 800188e:	3304      	adds	r3, #4
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1dfa      	adds	r2, r7, #7
 8001894:	7812      	ldrb	r2, [r2, #0]
 8001896:	0011      	movs	r1, r2
 8001898:	2203      	movs	r2, #3
 800189a:	400a      	ands	r2, r1
 800189c:	00d2      	lsls	r2, r2, #3
 800189e:	21ff      	movs	r1, #255	@ 0xff
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	43d2      	mvns	r2, r2
 80018a6:	401a      	ands	r2, r3
 80018a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	019b      	lsls	r3, r3, #6
 80018ae:	22ff      	movs	r2, #255	@ 0xff
 80018b0:	401a      	ands	r2, r3
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0018      	movs	r0, r3
 80018b8:	2303      	movs	r3, #3
 80018ba:	4003      	ands	r3, r0
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c0:	4809      	ldr	r0, [pc, #36]	@ (80018e8 <__NVIC_SetPriority+0xd8>)
 80018c2:	1dfb      	adds	r3, r7, #7
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	001c      	movs	r4, r3
 80018c8:	230f      	movs	r3, #15
 80018ca:	4023      	ands	r3, r4
 80018cc:	3b08      	subs	r3, #8
 80018ce:	089b      	lsrs	r3, r3, #2
 80018d0:	430a      	orrs	r2, r1
 80018d2:	3306      	adds	r3, #6
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	18c3      	adds	r3, r0, r3
 80018d8:	3304      	adds	r3, #4
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	46c0      	nop			@ (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	b003      	add	sp, #12
 80018e2:	bd90      	pop	{r4, r7, pc}
 80018e4:	e000e100 	.word	0xe000e100
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	1e5a      	subs	r2, r3, #1
 80018f8:	2380      	movs	r3, #128	@ 0x80
 80018fa:	045b      	lsls	r3, r3, #17
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d301      	bcc.n	8001904 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001900:	2301      	movs	r3, #1
 8001902:	e010      	b.n	8001926 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001904:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <SysTick_Config+0x44>)
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	3a01      	subs	r2, #1
 800190a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190c:	2301      	movs	r3, #1
 800190e:	425b      	negs	r3, r3
 8001910:	2103      	movs	r1, #3
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff ff7c 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x44>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x44>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b002      	add	sp, #8
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	210f      	movs	r1, #15
 8001940:	187b      	adds	r3, r7, r1
 8001942:	1c02      	adds	r2, r0, #0
 8001944:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	187b      	adds	r3, r7, r1
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b25b      	sxtb	r3, r3
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b004      	add	sp, #16
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	0002      	movs	r2, r0
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b25b      	sxtb	r3, r3
 8001970:	0018      	movs	r0, r3
 8001972:	f7ff ff33 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ffaf 	bl	80018ec <SysTick_Config>
 800198e:	0003      	movs	r3, r0
}
 8001990:	0018      	movs	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	b002      	add	sp, #8
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e061      	b.n	8001a6e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a32      	ldr	r2, [pc, #200]	@ (8001a78 <HAL_DMA_Init+0xe0>)
 80019b0:	4694      	mov	ip, r2
 80019b2:	4463      	add	r3, ip
 80019b4:	2114      	movs	r1, #20
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7fe fba6 	bl	8000108 <__udivsi3>
 80019bc:	0003      	movs	r3, r0
 80019be:	009a      	lsls	r2, r3, #2
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a7c <HAL_DMA_Init+0xe4>)
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2225      	movs	r2, #37	@ 0x25
 80019ce:	2102      	movs	r1, #2
 80019d0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4a28      	ldr	r2, [pc, #160]	@ (8001a80 <HAL_DMA_Init+0xe8>)
 80019de:	4013      	ands	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	01db      	lsls	r3, r3, #7
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d018      	beq.n	8001a56 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a24:	4b17      	ldr	r3, [pc, #92]	@ (8001a84 <HAL_DMA_Init+0xec>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2c:	211c      	movs	r1, #28
 8001a2e:	400b      	ands	r3, r1
 8001a30:	210f      	movs	r1, #15
 8001a32:	4099      	lsls	r1, r3
 8001a34:	000b      	movs	r3, r1
 8001a36:	43d9      	mvns	r1, r3
 8001a38:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_DMA_Init+0xec>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a3e:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_DMA_Init+0xec>)
 8001a40:	6819      	ldr	r1, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	201c      	movs	r0, #28
 8001a4c:	4003      	ands	r3, r0
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <HAL_DMA_Init+0xec>)
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2225      	movs	r2, #37	@ 0x25
 8001a60:	2101      	movs	r1, #1
 8001a62:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2224      	movs	r2, #36	@ 0x24
 8001a68:	2100      	movs	r1, #0
 8001a6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	0018      	movs	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b004      	add	sp, #16
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	46c0      	nop			@ (mov r8, r8)
 8001a78:	bffdfff8 	.word	0xbffdfff8
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	ffff800f 	.word	0xffff800f
 8001a84:	400200a8 	.word	0x400200a8

08001a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a96:	2317      	movs	r3, #23
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2224      	movs	r2, #36	@ 0x24
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d101      	bne.n	8001aac <HAL_DMA_Start_IT+0x24>
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	e04f      	b.n	8001b4c <HAL_DMA_Start_IT+0xc4>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2224      	movs	r2, #36	@ 0x24
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2225      	movs	r2, #37	@ 0x25
 8001ab8:	5c9b      	ldrb	r3, [r3, r2]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d13a      	bne.n	8001b36 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2225      	movs	r2, #37	@ 0x25
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	438a      	bics	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f8e3 	bl	8001cb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d008      	beq.n	8001b04 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	210e      	movs	r1, #14
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e00f      	b.n	8001b24 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2104      	movs	r1, #4
 8001b10:	438a      	bics	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	210a      	movs	r1, #10
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e007      	b.n	8001b46 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2224      	movs	r2, #36	@ 0x24
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b3e:	2317      	movs	r3, #23
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	2202      	movs	r2, #2
 8001b44:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001b46:	2317      	movs	r3, #23
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	781b      	ldrb	r3, [r3, #0]
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	b006      	add	sp, #24
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	221c      	movs	r2, #28
 8001b72:	4013      	ands	r3, r2
 8001b74:	2204      	movs	r2, #4
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d026      	beq.n	8001bce <HAL_DMA_IRQHandler+0x7a>
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d022      	beq.n	8001bce <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4013      	ands	r3, r2
 8001b92:	d107      	bne.n	8001ba4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba8:	221c      	movs	r2, #28
 8001baa:	401a      	ands	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	4091      	lsls	r1, r2
 8001bb4:	000a      	movs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d100      	bne.n	8001bc2 <HAL_DMA_IRQHandler+0x6e>
 8001bc0:	e071      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	0010      	movs	r0, r2
 8001bca:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001bcc:	e06b      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	221c      	movs	r2, #28
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	0013      	movs	r3, r2
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4013      	ands	r3, r2
 8001be0:	d02d      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xea>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2202      	movs	r2, #2
 8001be6:	4013      	ands	r3, r2
 8001be8:	d029      	beq.n	8001c3e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d10b      	bne.n	8001c0e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	210a      	movs	r1, #10
 8001c02:	438a      	bics	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2225      	movs	r2, #37	@ 0x25
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	221c      	movs	r2, #28
 8001c14:	401a      	ands	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	4091      	lsls	r1, r2
 8001c1e:	000a      	movs	r2, r1
 8001c20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2224      	movs	r2, #36	@ 0x24
 8001c26:	2100      	movs	r1, #0
 8001c28:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d039      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	0010      	movs	r0, r2
 8001c3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c3c:	e033      	b.n	8001ca6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	221c      	movs	r2, #28
 8001c44:	4013      	ands	r3, r2
 8001c46:	2208      	movs	r2, #8
 8001c48:	409a      	lsls	r2, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d02a      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x154>
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2208      	movs	r2, #8
 8001c56:	4013      	ands	r3, r2
 8001c58:	d026      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	210e      	movs	r1, #14
 8001c66:	438a      	bics	r2, r1
 8001c68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	221c      	movs	r2, #28
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	2101      	movs	r1, #1
 8001c78:	4091      	lsls	r1, r2
 8001c7a:	000a      	movs	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2225      	movs	r2, #37	@ 0x25
 8001c88:	2101      	movs	r1, #1
 8001c8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2224      	movs	r2, #36	@ 0x24
 8001c90:	2100      	movs	r1, #0
 8001c92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	0010      	movs	r0, r2
 8001ca4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	46c0      	nop			@ (mov r8, r8)
}
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b004      	add	sp, #16
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	221c      	movs	r2, #28
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cca:	2101      	movs	r1, #1
 8001ccc:	4091      	lsls	r1, r2
 8001cce:	000a      	movs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d108      	bne.n	8001cf4 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68ba      	ldr	r2, [r7, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cf2:	e007      	b.n	8001d04 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	60da      	str	r2, [r3, #12]
}
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d22:	e149      	b.n	8001fb8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2101      	movs	r1, #1
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4091      	lsls	r1, r2
 8001d2e:	000a      	movs	r2, r1
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d100      	bne.n	8001d3c <HAL_GPIO_Init+0x30>
 8001d3a:	e13a      	b.n	8001fb2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2203      	movs	r2, #3
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d005      	beq.n	8001d54 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d130      	bne.n	8001db6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	2203      	movs	r2, #3
 8001d60:	409a      	lsls	r2, r3
 8001d62:	0013      	movs	r3, r2
 8001d64:	43da      	mvns	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	0013      	movs	r3, r2
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	43da      	mvns	r2, r3
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	091b      	lsrs	r3, r3, #4
 8001da0:	2201      	movs	r2, #1
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	693a      	ldr	r2, [r7, #16]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	d017      	beq.n	8001df2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	409a      	lsls	r2, r3
 8001de4:	0013      	movs	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2203      	movs	r2, #3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d123      	bne.n	8001e46 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	08da      	lsrs	r2, r3, #3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3208      	adds	r2, #8
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	58d3      	ldr	r3, [r2, r3]
 8001e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2207      	movs	r2, #7
 8001e10:	4013      	ands	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	220f      	movs	r2, #15
 8001e16:	409a      	lsls	r2, r3
 8001e18:	0013      	movs	r3, r2
 8001e1a:	43da      	mvns	r2, r3
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	2107      	movs	r1, #7
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	2203      	movs	r2, #3
 8001e52:	409a      	lsls	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	43da      	mvns	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2203      	movs	r2, #3
 8001e64:	401a      	ands	r2, r3
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	23c0      	movs	r3, #192	@ 0xc0
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	4013      	ands	r3, r2
 8001e84:	d100      	bne.n	8001e88 <HAL_GPIO_Init+0x17c>
 8001e86:	e094      	b.n	8001fb2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e88:	4b51      	ldr	r3, [pc, #324]	@ (8001fd0 <HAL_GPIO_Init+0x2c4>)
 8001e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8c:	4b50      	ldr	r3, [pc, #320]	@ (8001fd0 <HAL_GPIO_Init+0x2c4>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	430a      	orrs	r2, r1
 8001e92:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e94:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd4 <HAL_GPIO_Init+0x2c8>)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	589b      	ldr	r3, [r3, r2]
 8001ea0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	220f      	movs	r2, #15
 8001eac:	409a      	lsls	r2, r3
 8001eae:	0013      	movs	r3, r2
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	23a0      	movs	r3, #160	@ 0xa0
 8001ebc:	05db      	lsls	r3, r3, #23
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x1de>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a44      	ldr	r2, [pc, #272]	@ (8001fd8 <HAL_GPIO_Init+0x2cc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x1da>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a43      	ldr	r2, [pc, #268]	@ (8001fdc <HAL_GPIO_Init+0x2d0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x1d6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a42      	ldr	r2, [pc, #264]	@ (8001fe0 <HAL_GPIO_Init+0x2d4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x1d2>
 8001eda:	2305      	movs	r3, #5
 8001edc:	e006      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ede:	2306      	movs	r3, #6
 8001ee0:	e004      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e002      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_GPIO_Init+0x1e0>
 8001eea:	2300      	movs	r3, #0
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	2103      	movs	r1, #3
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4093      	lsls	r3, r2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efc:	4935      	ldr	r1, [pc, #212]	@ (8001fd4 <HAL_GPIO_Init+0x2c8>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0a:	4b36      	ldr	r3, [pc, #216]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43da      	mvns	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	2380      	movs	r3, #128	@ 0x80
 8001f20:	035b      	lsls	r3, r3, #13
 8001f22:	4013      	ands	r3, r2
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f34:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43da      	mvns	r2, r3
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	2380      	movs	r3, #128	@ 0x80
 8001f4a:	039b      	lsls	r3, r3, #14
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	43da      	mvns	r2, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	029b      	lsls	r3, r3, #10
 8001f76:	4013      	ands	r3, r2
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f88:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	43da      	mvns	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d003      	beq.n	8001fac <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe4 <HAL_GPIO_Init+0x2d8>)
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	40da      	lsrs	r2, r3
 8001fc0:	1e13      	subs	r3, r2, #0
 8001fc2:	d000      	beq.n	8001fc6 <HAL_GPIO_Init+0x2ba>
 8001fc4:	e6ae      	b.n	8001d24 <HAL_GPIO_Init+0x18>
  }
}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	46c0      	nop			@ (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b006      	add	sp, #24
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	50000400 	.word	0x50000400
 8001fdc:	50000800 	.word	0x50000800
 8001fe0:	50001c00 	.word	0x50001c00
 8001fe4:	40010400 	.word	0x40010400

08001fe8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	0008      	movs	r0, r1
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	1cbb      	adds	r3, r7, #2
 8001ff6:	1c02      	adds	r2, r0, #0
 8001ff8:	801a      	strh	r2, [r3, #0]
 8001ffa:	1c7b      	adds	r3, r7, #1
 8001ffc:	1c0a      	adds	r2, r1, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002000:	1c7b      	adds	r3, r7, #1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002008:	1cbb      	adds	r3, r7, #2
 800200a:	881a      	ldrh	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002010:	e003      	b.n	800201a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002012:	1cbb      	adds	r3, r7, #2
 8002014:	881a      	ldrh	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002024:	b5b0      	push	{r4, r5, r7, lr}
 8002026:	b08a      	sub	sp, #40	@ 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	f000 fb6c 	bl	8002710 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002038:	4bc8      	ldr	r3, [pc, #800]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	220c      	movs	r2, #12
 800203e:	4013      	ands	r3, r2
 8002040:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002042:	4bc6      	ldr	r3, [pc, #792]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	2380      	movs	r3, #128	@ 0x80
 8002048:	025b      	lsls	r3, r3, #9
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d100      	bne.n	800205a <HAL_RCC_OscConfig+0x36>
 8002058:	e07d      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d007      	beq.n	8002070 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d112      	bne.n	800208c <HAL_RCC_OscConfig+0x68>
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	025b      	lsls	r3, r3, #9
 800206c:	429a      	cmp	r2, r3
 800206e:	d10d      	bne.n	800208c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	4bba      	ldr	r3, [pc, #744]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	2380      	movs	r3, #128	@ 0x80
 8002076:	029b      	lsls	r3, r3, #10
 8002078:	4013      	ands	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_RCC_OscConfig+0x5a>
 800207c:	e06a      	b.n	8002154 <HAL_RCC_OscConfig+0x130>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d166      	bne.n	8002154 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	f000 fb42 	bl	8002710 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	025b      	lsls	r3, r3, #9
 8002094:	429a      	cmp	r2, r3
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x84>
 8002098:	4bb0      	ldr	r3, [pc, #704]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4baf      	ldr	r3, [pc, #700]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800209e:	2180      	movs	r1, #128	@ 0x80
 80020a0:	0249      	lsls	r1, r1, #9
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e027      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	23a0      	movs	r3, #160	@ 0xa0
 80020ae:	02db      	lsls	r3, r3, #11
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10e      	bne.n	80020d2 <HAL_RCC_OscConfig+0xae>
 80020b4:	4ba9      	ldr	r3, [pc, #676]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4ba8      	ldr	r3, [pc, #672]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020ba:	2180      	movs	r1, #128	@ 0x80
 80020bc:	02c9      	lsls	r1, r1, #11
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	4ba6      	ldr	r3, [pc, #664]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4ba5      	ldr	r3, [pc, #660]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020c8:	2180      	movs	r1, #128	@ 0x80
 80020ca:	0249      	lsls	r1, r1, #9
 80020cc:	430a      	orrs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	e012      	b.n	80020f8 <HAL_RCC_OscConfig+0xd4>
 80020d2:	4ba2      	ldr	r3, [pc, #648]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4ba1      	ldr	r3, [pc, #644]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020d8:	49a1      	ldr	r1, [pc, #644]	@ (8002360 <HAL_RCC_OscConfig+0x33c>)
 80020da:	400a      	ands	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	4b9f      	ldr	r3, [pc, #636]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	025b      	lsls	r3, r3, #9
 80020e6:	4013      	ands	r3, r2
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4b9b      	ldr	r3, [pc, #620]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b9a      	ldr	r3, [pc, #616]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80020f2:	499c      	ldr	r1, [pc, #624]	@ (8002364 <HAL_RCC_OscConfig+0x340>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d014      	beq.n	800212a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7fe fef0 	bl	8000ee4 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210a:	f7fe feeb 	bl	8000ee4 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b64      	cmp	r3, #100	@ 0x64
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e2f9      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800211c:	4b8f      	ldr	r3, [pc, #572]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	@ 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0xe6>
 8002128:	e015      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7fe fedb 	bl	8000ee4 <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7fe fed6 	bl	8000ee4 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	@ 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e2e4      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002146:	4b85      	ldr	r3, [pc, #532]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	029b      	lsls	r3, r3, #10
 800214e:	4013      	ands	r3, r2
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x110>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2202      	movs	r2, #2
 800215c:	4013      	ands	r3, r2
 800215e:	d100      	bne.n	8002162 <HAL_RCC_OscConfig+0x13e>
 8002160:	e099      	b.n	8002296 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	2220      	movs	r2, #32
 800216c:	4013      	ands	r3, r2
 800216e:	d009      	beq.n	8002184 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002170:	4b7a      	ldr	r3, [pc, #488]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b79      	ldr	r3, [pc, #484]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002176:	2120      	movs	r1, #32
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	2220      	movs	r2, #32
 8002180:	4393      	bics	r3, r2
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	2b04      	cmp	r3, #4
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d13e      	bne.n	800220e <HAL_RCC_OscConfig+0x1ea>
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d13b      	bne.n	800220e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002196:	4b71      	ldr	r3, [pc, #452]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2204      	movs	r2, #4
 800219c:	4013      	ands	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_RCC_OscConfig+0x186>
 80021a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e2b2      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021aa:	4b6c      	ldr	r3, [pc, #432]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002368 <HAL_RCC_OscConfig+0x344>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	0019      	movs	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	021a      	lsls	r2, r3, #8
 80021ba:	4b68      	ldr	r3, [pc, #416]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80021c0:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2209      	movs	r2, #9
 80021c6:	4393      	bics	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	4b64      	ldr	r3, [pc, #400]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80021cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021ce:	430a      	orrs	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 fbeb 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 80021d6:	0001      	movs	r1, r0
 80021d8:	4b60      	ldr	r3, [pc, #384]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	220f      	movs	r2, #15
 80021e0:	4013      	ands	r3, r2
 80021e2:	4a62      	ldr	r2, [pc, #392]	@ (800236c <HAL_RCC_OscConfig+0x348>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	000a      	movs	r2, r1
 80021e8:	40da      	lsrs	r2, r3
 80021ea:	4b61      	ldr	r3, [pc, #388]	@ (8002370 <HAL_RCC_OscConfig+0x34c>)
 80021ec:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80021ee:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <HAL_RCC_OscConfig+0x350>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2513      	movs	r5, #19
 80021f4:	197c      	adds	r4, r7, r5
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7fe fe2e 	bl	8000e58 <HAL_InitTick>
 80021fc:	0003      	movs	r3, r0
 80021fe:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002200:	197b      	adds	r3, r7, r5
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d046      	beq.n	8002296 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002208:	197b      	adds	r3, r7, r5
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	e280      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	2b00      	cmp	r3, #0
 8002212:	d027      	beq.n	8002264 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002214:	4b51      	ldr	r3, [pc, #324]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2209      	movs	r2, #9
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	4b4f      	ldr	r3, [pc, #316]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe fe5d 	bl	8000ee4 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002230:	f7fe fe58 	bl	8000ee4 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e266      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002242:	4b46      	ldr	r3, [pc, #280]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2204      	movs	r2, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d0f1      	beq.n	8002230 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224c:	4b43      	ldr	r3, [pc, #268]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a45      	ldr	r2, [pc, #276]	@ (8002368 <HAL_RCC_OscConfig+0x344>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	021a      	lsls	r2, r3, #8
 800225c:	4b3f      	ldr	r3, [pc, #252]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800225e:	430a      	orrs	r2, r1
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	e018      	b.n	8002296 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002264:	4b3d      	ldr	r3, [pc, #244]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b3c      	ldr	r3, [pc, #240]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002270:	f7fe fe38 	bl	8000ee4 <HAL_GetTick>
 8002274:	0003      	movs	r3, r0
 8002276:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fe33 	bl	8000ee4 <HAL_GetTick>
 800227e:	0002      	movs	r2, r0
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e241      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800228c:	4b33      	ldr	r3, [pc, #204]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2204      	movs	r2, #4
 8002292:	4013      	ands	r3, r2
 8002294:	d1f1      	bne.n	800227a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2210      	movs	r2, #16
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x27e>
 80022a0:	e0a1      	b.n	80023e6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d140      	bne.n	800232a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a8:	4b2c      	ldr	r3, [pc, #176]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4013      	ands	r3, r2
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_OscConfig+0x29c>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e227      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022c0:	4b26      	ldr	r3, [pc, #152]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002378 <HAL_RCC_OscConfig+0x354>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	4b23      	ldr	r3, [pc, #140]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d4:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	0a19      	lsrs	r1, r3, #8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	061a      	lsls	r2, r3, #24
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	0b5b      	lsrs	r3, r3, #13
 80022ee:	3301      	adds	r3, #1
 80022f0:	2280      	movs	r2, #128	@ 0x80
 80022f2:	0212      	lsls	r2, r2, #8
 80022f4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80022f6:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	210f      	movs	r1, #15
 80022fe:	400b      	ands	r3, r1
 8002300:	491a      	ldr	r1, [pc, #104]	@ (800236c <HAL_RCC_OscConfig+0x348>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002306:	4b1a      	ldr	r3, [pc, #104]	@ (8002370 <HAL_RCC_OscConfig+0x34c>)
 8002308:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800230a:	4b1a      	ldr	r3, [pc, #104]	@ (8002374 <HAL_RCC_OscConfig+0x350>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2513      	movs	r5, #19
 8002310:	197c      	adds	r4, r7, r5
 8002312:	0018      	movs	r0, r3
 8002314:	f7fe fda0 	bl	8000e58 <HAL_InitTick>
 8002318:	0003      	movs	r3, r0
 800231a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800231c:	197b      	adds	r3, r7, r5
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d060      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002324:	197b      	adds	r3, r7, r5
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	e1f2      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d03f      	beq.n	80023b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002332:	4b0a      	ldr	r3, [pc, #40]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_OscConfig+0x338>)
 8002338:	2180      	movs	r1, #128	@ 0x80
 800233a:	0049      	lsls	r1, r1, #1
 800233c:	430a      	orrs	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fdd0 	bl	8000ee4 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002348:	e018      	b.n	800237c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800234a:	f7fe fdcb 	bl	8000ee4 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d911      	bls.n	800237c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e1d9      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
 800235c:	40021000 	.word	0x40021000
 8002360:	fffeffff 	.word	0xfffeffff
 8002364:	fffbffff 	.word	0xfffbffff
 8002368:	ffffe0ff 	.word	0xffffe0ff
 800236c:	08003c1c 	.word	0x08003c1c
 8002370:	20000004 	.word	0x20000004
 8002374:	20000008 	.word	0x20000008
 8002378:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800237c:	4bc9      	ldr	r3, [pc, #804]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4013      	ands	r3, r2
 8002386:	d0e0      	beq.n	800234a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002388:	4bc6      	ldr	r3, [pc, #792]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4ac6      	ldr	r2, [pc, #792]	@ (80026a8 <HAL_RCC_OscConfig+0x684>)
 800238e:	4013      	ands	r3, r2
 8002390:	0019      	movs	r1, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	4bc3      	ldr	r3, [pc, #780]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002398:	430a      	orrs	r2, r1
 800239a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800239c:	4bc1      	ldr	r3, [pc, #772]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	021b      	lsls	r3, r3, #8
 80023a2:	0a19      	lsrs	r1, r3, #8
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	061a      	lsls	r2, r3, #24
 80023aa:	4bbe      	ldr	r3, [pc, #760]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80023ac:	430a      	orrs	r2, r1
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	e019      	b.n	80023e6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023b2:	4bbc      	ldr	r3, [pc, #752]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4bbb      	ldr	r3, [pc, #748]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80023b8:	49bc      	ldr	r1, [pc, #752]	@ (80026ac <HAL_RCC_OscConfig+0x688>)
 80023ba:	400a      	ands	r2, r1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fd91 	bl	8000ee4 <HAL_GetTick>
 80023c2:	0003      	movs	r3, r0
 80023c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023c8:	f7fe fd8c 	bl	8000ee4 <HAL_GetTick>
 80023cc:	0002      	movs	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e19a      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80023da:	4bb2      	ldr	r3, [pc, #712]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	@ 0x80
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2208      	movs	r2, #8
 80023ec:	4013      	ands	r3, r2
 80023ee:	d036      	beq.n	800245e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d019      	beq.n	800242c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f8:	4baa      	ldr	r3, [pc, #680]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80023fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023fc:	4ba9      	ldr	r3, [pc, #676]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80023fe:	2101      	movs	r1, #1
 8002400:	430a      	orrs	r2, r1
 8002402:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7fe fd6e 	bl	8000ee4 <HAL_GetTick>
 8002408:	0003      	movs	r3, r0
 800240a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240e:	f7fe fd69 	bl	8000ee4 <HAL_GetTick>
 8002412:	0002      	movs	r2, r0
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e177      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002420:	4ba0      	ldr	r3, [pc, #640]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002424:	2202      	movs	r2, #2
 8002426:	4013      	ands	r3, r2
 8002428:	d0f1      	beq.n	800240e <HAL_RCC_OscConfig+0x3ea>
 800242a:	e018      	b.n	800245e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242c:	4b9d      	ldr	r3, [pc, #628]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800242e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002430:	4b9c      	ldr	r3, [pc, #624]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002432:	2101      	movs	r1, #1
 8002434:	438a      	bics	r2, r1
 8002436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002438:	f7fe fd54 	bl	8000ee4 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002442:	f7fe fd4f 	bl	8000ee4 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e15d      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002454:	4b93      	ldr	r3, [pc, #588]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d1f1      	bne.n	8002442 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2204      	movs	r2, #4
 8002464:	4013      	ands	r3, r2
 8002466:	d100      	bne.n	800246a <HAL_RCC_OscConfig+0x446>
 8002468:	e0ae      	b.n	80025c8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246a:	2023      	movs	r0, #35	@ 0x23
 800246c:	183b      	adds	r3, r7, r0
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002472:	4b8c      	ldr	r3, [pc, #560]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002476:	2380      	movs	r3, #128	@ 0x80
 8002478:	055b      	lsls	r3, r3, #21
 800247a:	4013      	ands	r3, r2
 800247c:	d109      	bne.n	8002492 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	4b89      	ldr	r3, [pc, #548]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002482:	4b88      	ldr	r3, [pc, #544]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	0549      	lsls	r1, r1, #21
 8002488:	430a      	orrs	r2, r1
 800248a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800248c:	183b      	adds	r3, r7, r0
 800248e:	2201      	movs	r2, #1
 8002490:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b87      	ldr	r3, [pc, #540]	@ (80026b0 <HAL_RCC_OscConfig+0x68c>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4013      	ands	r3, r2
 800249c:	d11a      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800249e:	4b84      	ldr	r3, [pc, #528]	@ (80026b0 <HAL_RCC_OscConfig+0x68c>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b83      	ldr	r3, [pc, #524]	@ (80026b0 <HAL_RCC_OscConfig+0x68c>)
 80024a4:	2180      	movs	r1, #128	@ 0x80
 80024a6:	0049      	lsls	r1, r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ac:	f7fe fd1a 	bl	8000ee4 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024b6:	f7fe fd15 	bl	8000ee4 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	@ 0x64
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e123      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	4b79      	ldr	r3, [pc, #484]	@ (80026b0 <HAL_RCC_OscConfig+0x68c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	2380      	movs	r3, #128	@ 0x80
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	429a      	cmp	r2, r3
 80024de:	d107      	bne.n	80024f0 <HAL_RCC_OscConfig+0x4cc>
 80024e0:	4b70      	ldr	r3, [pc, #448]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80024e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024e4:	4b6f      	ldr	r3, [pc, #444]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80024e6:	2180      	movs	r1, #128	@ 0x80
 80024e8:	0049      	lsls	r1, r1, #1
 80024ea:	430a      	orrs	r2, r1
 80024ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80024ee:	e031      	b.n	8002554 <HAL_RCC_OscConfig+0x530>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x4ee>
 80024f8:	4b6a      	ldr	r3, [pc, #424]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80024fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024fc:	4b69      	ldr	r3, [pc, #420]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80024fe:	496b      	ldr	r1, [pc, #428]	@ (80026ac <HAL_RCC_OscConfig+0x688>)
 8002500:	400a      	ands	r2, r1
 8002502:	651a      	str	r2, [r3, #80]	@ 0x50
 8002504:	4b67      	ldr	r3, [pc, #412]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002506:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002508:	4b66      	ldr	r3, [pc, #408]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800250a:	496a      	ldr	r1, [pc, #424]	@ (80026b4 <HAL_RCC_OscConfig+0x690>)
 800250c:	400a      	ands	r2, r1
 800250e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002510:	e020      	b.n	8002554 <HAL_RCC_OscConfig+0x530>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	23a0      	movs	r3, #160	@ 0xa0
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	429a      	cmp	r2, r3
 800251c:	d10e      	bne.n	800253c <HAL_RCC_OscConfig+0x518>
 800251e:	4b61      	ldr	r3, [pc, #388]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002520:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002522:	4b60      	ldr	r3, [pc, #384]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	00c9      	lsls	r1, r1, #3
 8002528:	430a      	orrs	r2, r1
 800252a:	651a      	str	r2, [r3, #80]	@ 0x50
 800252c:	4b5d      	ldr	r3, [pc, #372]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800252e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002530:	4b5c      	ldr	r3, [pc, #368]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002532:	2180      	movs	r1, #128	@ 0x80
 8002534:	0049      	lsls	r1, r1, #1
 8002536:	430a      	orrs	r2, r1
 8002538:	651a      	str	r2, [r3, #80]	@ 0x50
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x530>
 800253c:	4b59      	ldr	r3, [pc, #356]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800253e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002540:	4b58      	ldr	r3, [pc, #352]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002542:	495a      	ldr	r1, [pc, #360]	@ (80026ac <HAL_RCC_OscConfig+0x688>)
 8002544:	400a      	ands	r2, r1
 8002546:	651a      	str	r2, [r3, #80]	@ 0x50
 8002548:	4b56      	ldr	r3, [pc, #344]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800254a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800254c:	4b55      	ldr	r3, [pc, #340]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800254e:	4959      	ldr	r1, [pc, #356]	@ (80026b4 <HAL_RCC_OscConfig+0x690>)
 8002550:	400a      	ands	r2, r1
 8002552:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255c:	f7fe fcc2 	bl	8000ee4 <HAL_GetTick>
 8002560:	0003      	movs	r3, r0
 8002562:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002564:	e009      	b.n	800257a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe fcbd 	bl	8000ee4 <HAL_GetTick>
 800256a:	0002      	movs	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	4a51      	ldr	r2, [pc, #324]	@ (80026b8 <HAL_RCC_OscConfig+0x694>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0ca      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257a:	4b4a      	ldr	r3, [pc, #296]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800257c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4013      	ands	r3, r2
 8002584:	d0ef      	beq.n	8002566 <HAL_RCC_OscConfig+0x542>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe fcac 	bl	8000ee4 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002590:	e009      	b.n	80025a6 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe fca7 	bl	8000ee4 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4a46      	ldr	r2, [pc, #280]	@ (80026b8 <HAL_RCC_OscConfig+0x694>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0b4      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025a6:	4b3f      	ldr	r3, [pc, #252]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80025a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4013      	ands	r3, r2
 80025b0:	d1ef      	bne.n	8002592 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b2:	2323      	movs	r3, #35	@ 0x23
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b39      	ldr	r3, [pc, #228]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80025be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025c0:	4b38      	ldr	r3, [pc, #224]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80025c2:	493e      	ldr	r1, [pc, #248]	@ (80026bc <HAL_RCC_OscConfig+0x698>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d100      	bne.n	80025d2 <HAL_RCC_OscConfig+0x5ae>
 80025d0:	e09d      	b.n	800270e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d100      	bne.n	80025da <HAL_RCC_OscConfig+0x5b6>
 80025d8:	e076      	b.n	80026c8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d145      	bne.n	800266e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b30      	ldr	r3, [pc, #192]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b2f      	ldr	r3, [pc, #188]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 80025e8:	4935      	ldr	r1, [pc, #212]	@ (80026c0 <HAL_RCC_OscConfig+0x69c>)
 80025ea:	400a      	ands	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fc79 	bl	8000ee4 <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fc74 	bl	8000ee4 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e082      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800260a:	4b26      	ldr	r3, [pc, #152]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	4013      	ands	r3, r2
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002616:	4b23      	ldr	r3, [pc, #140]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a2a      	ldr	r2, [pc, #168]	@ (80026c4 <HAL_RCC_OscConfig+0x6a0>)
 800261c:	4013      	ands	r3, r2
 800261e:	0019      	movs	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	431a      	orrs	r2, r3
 8002630:	4b1c      	ldr	r3, [pc, #112]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002632:	430a      	orrs	r2, r1
 8002634:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	4b1a      	ldr	r3, [pc, #104]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 800263c:	2180      	movs	r1, #128	@ 0x80
 800263e:	0449      	lsls	r1, r1, #17
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fc4e 	bl	8000ee4 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fc49 	bl	8000ee4 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e057      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002660:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	049b      	lsls	r3, r3, #18
 8002668:	4013      	ands	r3, r2
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x62a>
 800266c:	e04f      	b.n	800270e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b0d      	ldr	r3, [pc, #52]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b0c      	ldr	r3, [pc, #48]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002674:	4912      	ldr	r1, [pc, #72]	@ (80026c0 <HAL_RCC_OscConfig+0x69c>)
 8002676:	400a      	ands	r2, r1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267a:	f7fe fc33 	bl	8000ee4 <HAL_GetTick>
 800267e:	0003      	movs	r3, r0
 8002680:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fc2e 	bl	8000ee4 <HAL_GetTick>
 8002688:	0002      	movs	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e03c      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002696:	4b03      	ldr	r3, [pc, #12]	@ (80026a4 <HAL_RCC_OscConfig+0x680>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	2380      	movs	r3, #128	@ 0x80
 800269c:	049b      	lsls	r3, r3, #18
 800269e:	4013      	ands	r3, r2
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x660>
 80026a2:	e034      	b.n	800270e <HAL_RCC_OscConfig+0x6ea>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	ffff1fff 	.word	0xffff1fff
 80026ac:	fffffeff 	.word	0xfffffeff
 80026b0:	40007000 	.word	0x40007000
 80026b4:	fffffbff 	.word	0xfffffbff
 80026b8:	00001388 	.word	0x00001388
 80026bc:	efffffff 	.word	0xefffffff
 80026c0:	feffffff 	.word	0xfeffffff
 80026c4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e01d      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026d4:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <HAL_RCC_OscConfig+0x6f4>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	2380      	movs	r3, #128	@ 0x80
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	401a      	ands	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d10f      	bne.n	800270a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	23f0      	movs	r3, #240	@ 0xf0
 80026ee:	039b      	lsls	r3, r3, #14
 80026f0:	401a      	ands	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d107      	bne.n	800270a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	23c0      	movs	r3, #192	@ 0xc0
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	401a      	ands	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b00a      	add	sp, #40	@ 0x28
 8002716:	bdb0      	pop	{r4, r5, r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b5b0      	push	{r4, r5, r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e128      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002730:	4b96      	ldr	r3, [pc, #600]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	4013      	ands	r3, r2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	429a      	cmp	r2, r3
 800273c:	d91e      	bls.n	800277c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273e:	4b93      	ldr	r3, [pc, #588]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	4393      	bics	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	4b90      	ldr	r3, [pc, #576]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002750:	f7fe fbc8 	bl	8000ee4 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002758:	e009      	b.n	800276e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800275a:	f7fe fbc3 	bl	8000ee4 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	4a8a      	ldr	r2, [pc, #552]	@ (8002990 <HAL_RCC_ClockConfig+0x274>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e109      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b87      	ldr	r3, [pc, #540]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	4013      	ands	r3, r2
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d1ee      	bne.n	800275a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2202      	movs	r2, #2
 8002782:	4013      	ands	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002786:	4b83      	ldr	r3, [pc, #524]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	22f0      	movs	r2, #240	@ 0xf0
 800278c:	4393      	bics	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	4b7f      	ldr	r3, [pc, #508]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002796:	430a      	orrs	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	d100      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x8a>
 80027a4:	e089      	b.n	80028ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027ae:	4b79      	ldr	r3, [pc, #484]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	4013      	ands	r3, r2
 80027b8:	d120      	bne.n	80027fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0e1      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027c6:	4b73      	ldr	r3, [pc, #460]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	2380      	movs	r3, #128	@ 0x80
 80027cc:	049b      	lsls	r3, r3, #18
 80027ce:	4013      	ands	r3, r2
 80027d0:	d114      	bne.n	80027fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0d5      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d106      	bne.n	80027ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027de:	4b6d      	ldr	r3, [pc, #436]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2204      	movs	r2, #4
 80027e4:	4013      	ands	r3, r2
 80027e6:	d109      	bne.n	80027fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0ca      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80027ec:	4b69      	ldr	r3, [pc, #420]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	2380      	movs	r3, #128	@ 0x80
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4013      	ands	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0c2      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fc:	4b65      	ldr	r3, [pc, #404]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	2203      	movs	r2, #3
 8002802:	4393      	bics	r3, r2
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4b62      	ldr	r3, [pc, #392]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 800280c:	430a      	orrs	r2, r1
 800280e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe fb68 	bl	8000ee4 <HAL_GetTick>
 8002814:	0003      	movs	r3, r0
 8002816:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d111      	bne.n	8002844 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002820:	e009      	b.n	8002836 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7fe fb5f 	bl	8000ee4 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a58      	ldr	r2, [pc, #352]	@ (8002990 <HAL_RCC_ClockConfig+0x274>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e0a5      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002836:	4b57      	ldr	r3, [pc, #348]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	220c      	movs	r2, #12
 800283c:	4013      	ands	r3, r2
 800283e:	2b08      	cmp	r3, #8
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_ClockConfig+0x106>
 8002842:	e03a      	b.n	80028ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b03      	cmp	r3, #3
 800284a:	d111      	bne.n	8002870 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284c:	e009      	b.n	8002862 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800284e:	f7fe fb49 	bl	8000ee4 <HAL_GetTick>
 8002852:	0002      	movs	r2, r0
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	4a4d      	ldr	r2, [pc, #308]	@ (8002990 <HAL_RCC_ClockConfig+0x274>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e08f      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002862:	4b4c      	ldr	r3, [pc, #304]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	220c      	movs	r2, #12
 8002868:	4013      	ands	r3, r2
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d1ef      	bne.n	800284e <HAL_RCC_ClockConfig+0x132>
 800286e:	e024      	b.n	80028ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d11b      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002878:	e009      	b.n	800288e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800287a:	f7fe fb33 	bl	8000ee4 <HAL_GetTick>
 800287e:	0002      	movs	r2, r0
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	4a42      	ldr	r2, [pc, #264]	@ (8002990 <HAL_RCC_ClockConfig+0x274>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e079      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800288e:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	220c      	movs	r2, #12
 8002894:	4013      	ands	r3, r2
 8002896:	2b04      	cmp	r3, #4
 8002898:	d1ef      	bne.n	800287a <HAL_RCC_ClockConfig+0x15e>
 800289a:	e00e      	b.n	80028ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800289c:	f7fe fb22 	bl	8000ee4 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	4a3a      	ldr	r2, [pc, #232]	@ (8002990 <HAL_RCC_ClockConfig+0x274>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e068      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80028b0:	4b38      	ldr	r3, [pc, #224]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	220c      	movs	r2, #12
 80028b6:	4013      	ands	r3, r2
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ba:	4b34      	ldr	r3, [pc, #208]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2201      	movs	r2, #1
 80028c0:	4013      	ands	r3, r2
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d21e      	bcs.n	8002906 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c8:	4b30      	ldr	r3, [pc, #192]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	4393      	bics	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028da:	f7fe fb03 	bl	8000ee4 <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	e009      	b.n	80028f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe fafe 	bl	8000ee4 <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	4a28      	ldr	r2, [pc, #160]	@ (8002990 <HAL_RCC_ClockConfig+0x274>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e044      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f8:	4b24      	ldr	r3, [pc, #144]	@ (800298c <HAL_RCC_ClockConfig+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	4013      	ands	r3, r2
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d1ee      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2204      	movs	r2, #4
 800290c:	4013      	ands	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002910:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4a20      	ldr	r2, [pc, #128]	@ (8002998 <HAL_RCC_ClockConfig+0x27c>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	4b1d      	ldr	r3, [pc, #116]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002920:	430a      	orrs	r2, r1
 8002922:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2208      	movs	r2, #8
 800292a:	4013      	ands	r3, r2
 800292c:	d00a      	beq.n	8002944 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800292e:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	4a1a      	ldr	r2, [pc, #104]	@ (800299c <HAL_RCC_ClockConfig+0x280>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	00da      	lsls	r2, r3, #3
 800293e:	4b15      	ldr	r3, [pc, #84]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 8002940:	430a      	orrs	r2, r1
 8002942:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002944:	f000 f832 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002948:	0001      	movs	r1, r0
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_RCC_ClockConfig+0x278>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	220f      	movs	r2, #15
 8002952:	4013      	ands	r3, r2
 8002954:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_RCC_ClockConfig+0x284>)
 8002956:	5cd3      	ldrb	r3, [r2, r3]
 8002958:	000a      	movs	r2, r1
 800295a:	40da      	lsrs	r2, r3
 800295c:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_ClockConfig+0x288>)
 800295e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <HAL_RCC_ClockConfig+0x28c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	250b      	movs	r5, #11
 8002966:	197c      	adds	r4, r7, r5
 8002968:	0018      	movs	r0, r3
 800296a:	f7fe fa75 	bl	8000e58 <HAL_InitTick>
 800296e:	0003      	movs	r3, r0
 8002970:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002972:	197b      	adds	r3, r7, r5
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800297a:	197b      	adds	r3, r7, r5
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	e000      	b.n	8002982 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	0018      	movs	r0, r3
 8002984:	46bd      	mov	sp, r7
 8002986:	b004      	add	sp, #16
 8002988:	bdb0      	pop	{r4, r5, r7, pc}
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	40022000 	.word	0x40022000
 8002990:	00001388 	.word	0x00001388
 8002994:	40021000 	.word	0x40021000
 8002998:	fffff8ff 	.word	0xfffff8ff
 800299c:	ffffc7ff 	.word	0xffffc7ff
 80029a0:	08003c1c 	.word	0x08003c1c
 80029a4:	20000004 	.word	0x20000004
 80029a8:	20000008 	.word	0x20000008

080029ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b5b0      	push	{r4, r5, r7, lr}
 80029ae:	b08e      	sub	sp, #56	@ 0x38
 80029b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80029b2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029ba:	230c      	movs	r3, #12
 80029bc:	4013      	ands	r3, r2
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d014      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x40>
 80029c2:	d900      	bls.n	80029c6 <HAL_RCC_GetSysClockFreq+0x1a>
 80029c4:	e07b      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x112>
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d002      	beq.n	80029d0 <HAL_RCC_GetSysClockFreq+0x24>
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d00b      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ce:	e076      	b.n	8002abe <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029d0:	4b44      	ldr	r3, [pc, #272]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2210      	movs	r2, #16
 80029d6:	4013      	ands	r3, r2
 80029d8:	d002      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80029da:	4b43      	ldr	r3, [pc, #268]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80029dc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80029de:	e07c      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80029e0:	4b42      	ldr	r3, [pc, #264]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x140>)
 80029e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80029e4:	e079      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029e6:	4b42      	ldr	r3, [pc, #264]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x144>)
 80029e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80029ea:	e076      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80029ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ee:	0c9a      	lsrs	r2, r3, #18
 80029f0:	230f      	movs	r3, #15
 80029f2:	401a      	ands	r2, r3
 80029f4:	4b3f      	ldr	r3, [pc, #252]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x148>)
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80029fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fc:	0d9a      	lsrs	r2, r3, #22
 80029fe:	2303      	movs	r3, #3
 8002a00:	4013      	ands	r3, r2
 8002a02:	3301      	adds	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a06:	4b37      	ldr	r3, [pc, #220]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	025b      	lsls	r3, r3, #9
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d01a      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	4a35      	ldr	r2, [pc, #212]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x144>)
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	69b8      	ldr	r0, [r7, #24]
 8002a20:	69f9      	ldr	r1, [r7, #28]
 8002a22:	f7fd fc1d 	bl	8000260 <__aeabi_lmul>
 8002a26:	0002      	movs	r2, r0
 8002a28:	000b      	movs	r3, r1
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f7fd fbf1 	bl	8000220 <__aeabi_uldivmod>
 8002a3e:	0002      	movs	r2, r0
 8002a40:	000b      	movs	r3, r1
 8002a42:	0013      	movs	r3, r2
 8002a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a46:	e037      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002a48:	4b26      	ldr	r3, [pc, #152]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d01a      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	4a23      	ldr	r2, [pc, #140]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	68b8      	ldr	r0, [r7, #8]
 8002a60:	68f9      	ldr	r1, [r7, #12]
 8002a62:	f7fd fbfd 	bl	8000260 <__aeabi_lmul>
 8002a66:	0002      	movs	r2, r0
 8002a68:	000b      	movs	r3, r1
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f7fd fbd1 	bl	8000220 <__aeabi_uldivmod>
 8002a7e:	0002      	movs	r2, r0
 8002a80:	000b      	movs	r3, r1
 8002a82:	0013      	movs	r3, r2
 8002a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a86:	e017      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	0019      	movs	r1, r3
 8002a90:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x140>)
 8002a92:	2300      	movs	r3, #0
 8002a94:	f7fd fbe4 	bl	8000260 <__aeabi_lmul>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	000b      	movs	r3, r1
 8002a9c:	0010      	movs	r0, r2
 8002a9e:	0019      	movs	r1, r3
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa2:	001c      	movs	r4, r3
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	001d      	movs	r5, r3
 8002aa8:	0022      	movs	r2, r4
 8002aaa:	002b      	movs	r3, r5
 8002aac:	f7fd fbb8 	bl	8000220 <__aeabi_uldivmod>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	000b      	movs	r3, r1
 8002ab4:	0013      	movs	r3, r2
 8002ab6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aba:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002abc:	e00d      	b.n	8002ada <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002abe:	4b09      	ldr	r3, [pc, #36]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0b5b      	lsrs	r3, r3, #13
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002aca:	6a3b      	ldr	r3, [r7, #32]
 8002acc:	3301      	adds	r3, #1
 8002ace:	2280      	movs	r2, #128	@ 0x80
 8002ad0:	0212      	lsls	r2, r2, #8
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	0013      	movs	r3, r2
 8002ad6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002ad8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002adc:	0018      	movs	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	b00e      	add	sp, #56	@ 0x38
 8002ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	003d0900 	.word	0x003d0900
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	007a1200 	.word	0x007a1200
 8002af4:	08003c34 	.word	0x08003c34

08002af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b02      	ldr	r3, [pc, #8]	@ (8002b08 <HAL_RCC_GetHCLKFreq+0x10>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	20000004 	.word	0x20000004

08002b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b10:	f7ff fff2 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b14:	0001      	movs	r1, r0
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	0a1b      	lsrs	r3, r3, #8
 8002b1c:	2207      	movs	r2, #7
 8002b1e:	4013      	ands	r3, r2
 8002b20:	4a04      	ldr	r2, [pc, #16]	@ (8002b34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b22:	5cd3      	ldrb	r3, [r2, r3]
 8002b24:	40d9      	lsrs	r1, r3
 8002b26:	000b      	movs	r3, r1
}
 8002b28:	0018      	movs	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	40021000 	.word	0x40021000
 8002b34:	08003c2c 	.word	0x08003c2c

08002b38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b3c:	f7ff ffdc 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 8002b40:	0001      	movs	r1, r0
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	0adb      	lsrs	r3, r3, #11
 8002b48:	2207      	movs	r2, #7
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	4a04      	ldr	r2, [pc, #16]	@ (8002b60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	40d9      	lsrs	r1, r3
 8002b52:	000b      	movs	r3, r1
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	08003c2c 	.word	0x08003c2c

08002b64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002b6c:	2017      	movs	r0, #23
 8002b6e:	183b      	adds	r3, r7, r0
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d100      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002b7e:	e0c7      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b80:	4b84      	ldr	r3, [pc, #528]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	055b      	lsls	r3, r3, #21
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d109      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	4b81      	ldr	r3, [pc, #516]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b90:	4b80      	ldr	r3, [pc, #512]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b92:	2180      	movs	r1, #128	@ 0x80
 8002b94:	0549      	lsls	r1, r1, #21
 8002b96:	430a      	orrs	r2, r1
 8002b98:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002b9a:	183b      	adds	r3, r7, r0
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4013      	ands	r3, r2
 8002baa:	d11a      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bac:	4b7a      	ldr	r3, [pc, #488]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	4b79      	ldr	r3, [pc, #484]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	0049      	lsls	r1, r1, #1
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bba:	f7fe f993 	bl	8000ee4 <HAL_GetTick>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe f98e 	bl	8000ee4 <HAL_GetTick>
 8002bc8:	0002      	movs	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b64      	cmp	r3, #100	@ 0x64
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0d9      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b70      	ldr	r3, [pc, #448]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002be2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	23c0      	movs	r3, #192	@ 0xc0
 8002be8:	039b      	lsls	r3, r3, #14
 8002bea:	4013      	ands	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	23c0      	movs	r3, #192	@ 0xc0
 8002bf4:	039b      	lsls	r3, r3, #14
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d013      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	23c0      	movs	r3, #192	@ 0xc0
 8002c04:	029b      	lsls	r3, r3, #10
 8002c06:	401a      	ands	r2, r3
 8002c08:	23c0      	movs	r3, #192	@ 0xc0
 8002c0a:	029b      	lsls	r3, r3, #10
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d10a      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002c10:	4b60      	ldr	r3, [pc, #384]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	029b      	lsls	r3, r3, #10
 8002c18:	401a      	ands	r2, r3
 8002c1a:	2380      	movs	r3, #128	@ 0x80
 8002c1c:	029b      	lsls	r3, r3, #10
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d101      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e0b1      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002c26:	4b5b      	ldr	r3, [pc, #364]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c2a:	23c0      	movs	r3, #192	@ 0xc0
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	4013      	ands	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d03b      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	23c0      	movs	r3, #192	@ 0xc0
 8002c3e:	029b      	lsls	r3, r3, #10
 8002c40:	4013      	ands	r3, r2
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d033      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d02e      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002c52:	4b50      	ldr	r3, [pc, #320]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c56:	4a51      	ldr	r2, [pc, #324]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c60:	4b4c      	ldr	r3, [pc, #304]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c62:	2180      	movs	r1, #128	@ 0x80
 8002c64:	0309      	lsls	r1, r1, #12
 8002c66:	430a      	orrs	r2, r1
 8002c68:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c6e:	4b49      	ldr	r3, [pc, #292]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c70:	494b      	ldr	r1, [pc, #300]	@ (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002c76:	4b47      	ldr	r3, [pc, #284]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4013      	ands	r3, r2
 8002c84:	d014      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe f92d 	bl	8000ee4 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c8e:	e009      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe f928 	bl	8000ee4 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	4a42      	ldr	r2, [pc, #264]	@ (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e072      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ca6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ca8:	2380      	movs	r3, #128	@ 0x80
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d0ef      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	23c0      	movs	r3, #192	@ 0xc0
 8002cc0:	029b      	lsls	r3, r3, #10
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	23c0      	movs	r3, #192	@ 0xc0
 8002cc6:	029b      	lsls	r3, r3, #10
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002ccc:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a35      	ldr	r2, [pc, #212]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	23c0      	movs	r3, #192	@ 0xc0
 8002cdc:	039b      	lsls	r3, r3, #14
 8002cde:	401a      	ands	r2, r3
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ce8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	23c0      	movs	r3, #192	@ 0xc0
 8002cf0:	029b      	lsls	r3, r3, #10
 8002cf2:	401a      	ands	r2, r3
 8002cf4:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cfa:	2317      	movs	r3, #23
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d105      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d04:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d08:	4b22      	ldr	r3, [pc, #136]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d0a:	4928      	ldr	r1, [pc, #160]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2202      	movs	r2, #2
 8002d16:	4013      	ands	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d1e:	220c      	movs	r2, #12
 8002d20:	4393      	bics	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2204      	movs	r2, #4
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	4013      	ands	r3, r2
 8002d54:	d009      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d56:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	4a16      	ldr	r2, [pc, #88]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d66:	430a      	orrs	r2, r1
 8002d68:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2280      	movs	r2, #128	@ 0x80
 8002d70:	4013      	ands	r3, r2
 8002d72:	d009      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d74:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d78:	4a0f      	ldr	r2, [pc, #60]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	0019      	movs	r1, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	46c0      	nop			@ (mov r8, r8)
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	fffcffff 	.word	0xfffcffff
 8002da0:	fff7ffff 	.word	0xfff7ffff
 8002da4:	00001388 	.word	0x00001388
 8002da8:	ffcfffff 	.word	0xffcfffff
 8002dac:	efffffff 	.word	0xefffffff
 8002db0:	fffff3ff 	.word	0xfffff3ff
 8002db4:	ffffcfff 	.word	0xffffcfff
 8002db8:	fff3ffff 	.word	0xfff3ffff

08002dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e044      	b.n	8002e58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2278      	movs	r2, #120	@ 0x78
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7fd ff7d 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2224      	movs	r2, #36	@ 0x24
 8002dea:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	438a      	bics	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f000 f89a 	bl	8002f38 <UART_SetConfig>
 8002e04:	0003      	movs	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e024      	b.n	8002e58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f000 fad7 	bl	80033cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	490d      	ldr	r1, [pc, #52]	@ (8002e60 <HAL_UART_Init+0xa4>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	212a      	movs	r1, #42	@ 0x2a
 8002e3a:	438a      	bics	r2, r1
 8002e3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2101      	movs	r1, #1
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 fb6f 	bl	8003534 <UART_CheckIdleState>
 8002e56:	0003      	movs	r3, r0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	ffffb7ff 	.word	0xffffb7ff

08002e64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	1dbb      	adds	r3, r7, #6
 8002e70:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	589b      	ldr	r3, [r3, r2]
 8002e78:	2b20      	cmp	r3, #32
 8002e7a:	d14a      	bne.n	8002f12 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_UART_Receive_DMA+0x26>
 8002e82:	1dbb      	adds	r3, r7, #6
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e042      	b.n	8002f14 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	2380      	movs	r3, #128	@ 0x80
 8002e94:	015b      	lsls	r3, r3, #5
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d109      	bne.n	8002eae <HAL_UART_Receive_DMA+0x4a>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d001      	beq.n	8002eae <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e032      	b.n	8002f14 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	@ (8002f1c <HAL_UART_Receive_DMA+0xb8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d020      	beq.n	8002f00 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	2380      	movs	r3, #128	@ 0x80
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d019      	beq.n	8002f00 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ed2:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f383 8810 	msr	PRIMASK, r3
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2180      	movs	r1, #128	@ 0x80
 8002eee:	04c9      	lsls	r1, r1, #19
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	f383 8810 	msr	PRIMASK, r3
}
 8002efe:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	881a      	ldrh	r2, [r3, #0]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 fc25 	bl	8003758 <UART_Start_Receive_DMA>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	e000      	b.n	8002f14 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b008      	add	sp, #32
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40004800 	.word	0x40004800

08002f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	000a      	movs	r2, r1
 8002f2a:	1cbb      	adds	r3, r7, #2
 8002f2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b08e      	sub	sp, #56	@ 0x38
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f40:	231a      	movs	r3, #26
 8002f42:	2218      	movs	r2, #24
 8002f44:	189b      	adds	r3, r3, r2
 8002f46:	19db      	adds	r3, r3, r7
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	431a      	orrs	r2, r3
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4ab4      	ldr	r2, [pc, #720]	@ (800323c <UART_SetConfig+0x304>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4aaf      	ldr	r2, [pc, #700]	@ (8003240 <UART_SetConfig+0x308>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4aa9      	ldr	r2, [pc, #676]	@ (8003244 <UART_SetConfig+0x30c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	4aa5      	ldr	r2, [pc, #660]	@ (8003248 <UART_SetConfig+0x310>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4aa1      	ldr	r2, [pc, #644]	@ (800324c <UART_SetConfig+0x314>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d131      	bne.n	8003030 <UART_SetConfig+0xf8>
 8002fcc:	4ba0      	ldr	r3, [pc, #640]	@ (8003250 <UART_SetConfig+0x318>)
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	220c      	movs	r2, #12
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d01d      	beq.n	8003014 <UART_SetConfig+0xdc>
 8002fd8:	d823      	bhi.n	8003022 <UART_SetConfig+0xea>
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d00c      	beq.n	8002ff8 <UART_SetConfig+0xc0>
 8002fde:	d820      	bhi.n	8003022 <UART_SetConfig+0xea>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <UART_SetConfig+0xb2>
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d00e      	beq.n	8003006 <UART_SetConfig+0xce>
 8002fe8:	e01b      	b.n	8003022 <UART_SetConfig+0xea>
 8002fea:	231b      	movs	r3, #27
 8002fec:	2218      	movs	r2, #24
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	19db      	adds	r3, r3, r7
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e065      	b.n	80030c4 <UART_SetConfig+0x18c>
 8002ff8:	231b      	movs	r3, #27
 8002ffa:	2218      	movs	r2, #24
 8002ffc:	189b      	adds	r3, r3, r2
 8002ffe:	19db      	adds	r3, r3, r7
 8003000:	2202      	movs	r2, #2
 8003002:	701a      	strb	r2, [r3, #0]
 8003004:	e05e      	b.n	80030c4 <UART_SetConfig+0x18c>
 8003006:	231b      	movs	r3, #27
 8003008:	2218      	movs	r2, #24
 800300a:	189b      	adds	r3, r3, r2
 800300c:	19db      	adds	r3, r3, r7
 800300e:	2204      	movs	r2, #4
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	e057      	b.n	80030c4 <UART_SetConfig+0x18c>
 8003014:	231b      	movs	r3, #27
 8003016:	2218      	movs	r2, #24
 8003018:	189b      	adds	r3, r3, r2
 800301a:	19db      	adds	r3, r3, r7
 800301c:	2208      	movs	r2, #8
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	e050      	b.n	80030c4 <UART_SetConfig+0x18c>
 8003022:	231b      	movs	r3, #27
 8003024:	2218      	movs	r2, #24
 8003026:	189b      	adds	r3, r3, r2
 8003028:	19db      	adds	r3, r3, r7
 800302a:	2210      	movs	r2, #16
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e049      	b.n	80030c4 <UART_SetConfig+0x18c>
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a83      	ldr	r2, [pc, #524]	@ (8003244 <UART_SetConfig+0x30c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d13e      	bne.n	80030b8 <UART_SetConfig+0x180>
 800303a:	4b85      	ldr	r3, [pc, #532]	@ (8003250 <UART_SetConfig+0x318>)
 800303c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800303e:	23c0      	movs	r3, #192	@ 0xc0
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	4013      	ands	r3, r2
 8003044:	22c0      	movs	r2, #192	@ 0xc0
 8003046:	0112      	lsls	r2, r2, #4
 8003048:	4293      	cmp	r3, r2
 800304a:	d027      	beq.n	800309c <UART_SetConfig+0x164>
 800304c:	22c0      	movs	r2, #192	@ 0xc0
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	4293      	cmp	r3, r2
 8003052:	d82a      	bhi.n	80030aa <UART_SetConfig+0x172>
 8003054:	2280      	movs	r2, #128	@ 0x80
 8003056:	0112      	lsls	r2, r2, #4
 8003058:	4293      	cmp	r3, r2
 800305a:	d011      	beq.n	8003080 <UART_SetConfig+0x148>
 800305c:	2280      	movs	r2, #128	@ 0x80
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	4293      	cmp	r3, r2
 8003062:	d822      	bhi.n	80030aa <UART_SetConfig+0x172>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d004      	beq.n	8003072 <UART_SetConfig+0x13a>
 8003068:	2280      	movs	r2, #128	@ 0x80
 800306a:	00d2      	lsls	r2, r2, #3
 800306c:	4293      	cmp	r3, r2
 800306e:	d00e      	beq.n	800308e <UART_SetConfig+0x156>
 8003070:	e01b      	b.n	80030aa <UART_SetConfig+0x172>
 8003072:	231b      	movs	r3, #27
 8003074:	2218      	movs	r2, #24
 8003076:	189b      	adds	r3, r3, r2
 8003078:	19db      	adds	r3, r3, r7
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e021      	b.n	80030c4 <UART_SetConfig+0x18c>
 8003080:	231b      	movs	r3, #27
 8003082:	2218      	movs	r2, #24
 8003084:	189b      	adds	r3, r3, r2
 8003086:	19db      	adds	r3, r3, r7
 8003088:	2202      	movs	r2, #2
 800308a:	701a      	strb	r2, [r3, #0]
 800308c:	e01a      	b.n	80030c4 <UART_SetConfig+0x18c>
 800308e:	231b      	movs	r3, #27
 8003090:	2218      	movs	r2, #24
 8003092:	189b      	adds	r3, r3, r2
 8003094:	19db      	adds	r3, r3, r7
 8003096:	2204      	movs	r2, #4
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e013      	b.n	80030c4 <UART_SetConfig+0x18c>
 800309c:	231b      	movs	r3, #27
 800309e:	2218      	movs	r2, #24
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	19db      	adds	r3, r3, r7
 80030a4:	2208      	movs	r2, #8
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e00c      	b.n	80030c4 <UART_SetConfig+0x18c>
 80030aa:	231b      	movs	r3, #27
 80030ac:	2218      	movs	r2, #24
 80030ae:	189b      	adds	r3, r3, r2
 80030b0:	19db      	adds	r3, r3, r7
 80030b2:	2210      	movs	r2, #16
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e005      	b.n	80030c4 <UART_SetConfig+0x18c>
 80030b8:	231b      	movs	r3, #27
 80030ba:	2218      	movs	r2, #24
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	19db      	adds	r3, r3, r7
 80030c0:	2210      	movs	r2, #16
 80030c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003244 <UART_SetConfig+0x30c>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d000      	beq.n	80030d0 <UART_SetConfig+0x198>
 80030ce:	e084      	b.n	80031da <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030d0:	231b      	movs	r3, #27
 80030d2:	2218      	movs	r2, #24
 80030d4:	189b      	adds	r3, r3, r2
 80030d6:	19db      	adds	r3, r3, r7
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d01d      	beq.n	800311a <UART_SetConfig+0x1e2>
 80030de:	dc20      	bgt.n	8003122 <UART_SetConfig+0x1ea>
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d015      	beq.n	8003110 <UART_SetConfig+0x1d8>
 80030e4:	dc1d      	bgt.n	8003122 <UART_SetConfig+0x1ea>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <UART_SetConfig+0x1b8>
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d005      	beq.n	80030fa <UART_SetConfig+0x1c2>
 80030ee:	e018      	b.n	8003122 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f0:	f7ff fd0c 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 80030f4:	0003      	movs	r3, r0
 80030f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80030f8:	e01c      	b.n	8003134 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030fa:	4b55      	ldr	r3, [pc, #340]	@ (8003250 <UART_SetConfig+0x318>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2210      	movs	r2, #16
 8003100:	4013      	ands	r3, r2
 8003102:	d002      	beq.n	800310a <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003104:	4b53      	ldr	r3, [pc, #332]	@ (8003254 <UART_SetConfig+0x31c>)
 8003106:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003108:	e014      	b.n	8003134 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800310a:	4b53      	ldr	r3, [pc, #332]	@ (8003258 <UART_SetConfig+0x320>)
 800310c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800310e:	e011      	b.n	8003134 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003110:	f7ff fc4c 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8003114:	0003      	movs	r3, r0
 8003116:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003118:	e00c      	b.n	8003134 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311a:	2380      	movs	r3, #128	@ 0x80
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003120:	e008      	b.n	8003134 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003126:	231a      	movs	r3, #26
 8003128:	2218      	movs	r2, #24
 800312a:	189b      	adds	r3, r3, r2
 800312c:	19db      	adds	r3, r3, r7
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
        break;
 8003132:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003136:	2b00      	cmp	r3, #0
 8003138:	d100      	bne.n	800313c <UART_SetConfig+0x204>
 800313a:	e12f      	b.n	800339c <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	0013      	movs	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	189b      	adds	r3, r3, r2
 8003146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003148:	429a      	cmp	r2, r3
 800314a:	d305      	bcc.n	8003158 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003154:	429a      	cmp	r2, r3
 8003156:	d906      	bls.n	8003166 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8003158:	231a      	movs	r3, #26
 800315a:	2218      	movs	r2, #24
 800315c:	189b      	adds	r3, r3, r2
 800315e:	19db      	adds	r3, r3, r7
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e11a      	b.n	800339c <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	2300      	movs	r3, #0
 800316c:	617b      	str	r3, [r7, #20]
 800316e:	6939      	ldr	r1, [r7, #16]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	000b      	movs	r3, r1
 8003174:	0e1b      	lsrs	r3, r3, #24
 8003176:	0010      	movs	r0, r2
 8003178:	0205      	lsls	r5, r0, #8
 800317a:	431d      	orrs	r5, r3
 800317c:	000b      	movs	r3, r1
 800317e:	021c      	lsls	r4, r3, #8
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	68b8      	ldr	r0, [r7, #8]
 800318e:	68f9      	ldr	r1, [r7, #12]
 8003190:	1900      	adds	r0, r0, r4
 8003192:	4169      	adcs	r1, r5
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f7fd f83d 	bl	8000220 <__aeabi_uldivmod>
 80031a6:	0002      	movs	r2, r0
 80031a8:	000b      	movs	r3, r1
 80031aa:	0013      	movs	r3, r2
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031b0:	23c0      	movs	r3, #192	@ 0xc0
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d309      	bcc.n	80031cc <UART_SetConfig+0x294>
 80031b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ba:	2380      	movs	r3, #128	@ 0x80
 80031bc:	035b      	lsls	r3, r3, #13
 80031be:	429a      	cmp	r2, r3
 80031c0:	d204      	bcs.n	80031cc <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	e0e7      	b.n	800339c <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 80031cc:	231a      	movs	r3, #26
 80031ce:	2218      	movs	r2, #24
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	19db      	adds	r3, r3, r7
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e0e0      	b.n	800339c <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d000      	beq.n	80031e8 <UART_SetConfig+0x2b0>
 80031e6:	e082      	b.n	80032ee <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80031e8:	231b      	movs	r3, #27
 80031ea:	2218      	movs	r2, #24
 80031ec:	189b      	adds	r3, r3, r2
 80031ee:	19db      	adds	r3, r3, r7
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d834      	bhi.n	8003260 <UART_SetConfig+0x328>
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	4b18      	ldr	r3, [pc, #96]	@ (800325c <UART_SetConfig+0x324>)
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003200:	f7ff fc84 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 8003204:	0003      	movs	r3, r0
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003208:	e033      	b.n	8003272 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800320a:	f7ff fc95 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 800320e:	0003      	movs	r3, r0
 8003210:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003212:	e02e      	b.n	8003272 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003214:	4b0e      	ldr	r3, [pc, #56]	@ (8003250 <UART_SetConfig+0x318>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2210      	movs	r2, #16
 800321a:	4013      	ands	r3, r2
 800321c:	d002      	beq.n	8003224 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800321e:	4b0d      	ldr	r3, [pc, #52]	@ (8003254 <UART_SetConfig+0x31c>)
 8003220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003222:	e026      	b.n	8003272 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003224:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <UART_SetConfig+0x320>)
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003228:	e023      	b.n	8003272 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800322a:	f7ff fbbf 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800322e:	0003      	movs	r3, r0
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003232:	e01e      	b.n	8003272 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800323a:	e01a      	b.n	8003272 <UART_SetConfig+0x33a>
 800323c:	efff69f3 	.word	0xefff69f3
 8003240:	ffffcfff 	.word	0xffffcfff
 8003244:	40004800 	.word	0x40004800
 8003248:	fffff4ff 	.word	0xfffff4ff
 800324c:	40004400 	.word	0x40004400
 8003250:	40021000 	.word	0x40021000
 8003254:	003d0900 	.word	0x003d0900
 8003258:	00f42400 	.word	0x00f42400
 800325c:	08003c40 	.word	0x08003c40
      default:
        pclk = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003264:	231a      	movs	r3, #26
 8003266:	2218      	movs	r2, #24
 8003268:	189b      	adds	r3, r3, r2
 800326a:	19db      	adds	r3, r3, r7
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
        break;
 8003270:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d100      	bne.n	800327a <UART_SetConfig+0x342>
 8003278:	e090      	b.n	800339c <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	005a      	lsls	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	18d2      	adds	r2, r2, r3
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	0019      	movs	r1, r3
 800328c:	0010      	movs	r0, r2
 800328e:	f7fc ff3b 	bl	8000108 <__udivsi3>
 8003292:	0003      	movs	r3, r0
 8003294:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003298:	2b0f      	cmp	r3, #15
 800329a:	d921      	bls.n	80032e0 <UART_SetConfig+0x3a8>
 800329c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	025b      	lsls	r3, r3, #9
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d21c      	bcs.n	80032e0 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	200e      	movs	r0, #14
 80032ac:	2418      	movs	r4, #24
 80032ae:	1903      	adds	r3, r0, r4
 80032b0:	19db      	adds	r3, r3, r7
 80032b2:	210f      	movs	r1, #15
 80032b4:	438a      	bics	r2, r1
 80032b6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2207      	movs	r2, #7
 80032c0:	4013      	ands	r3, r2
 80032c2:	b299      	uxth	r1, r3
 80032c4:	1903      	adds	r3, r0, r4
 80032c6:	19db      	adds	r3, r3, r7
 80032c8:	1902      	adds	r2, r0, r4
 80032ca:	19d2      	adds	r2, r2, r7
 80032cc:	8812      	ldrh	r2, [r2, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1902      	adds	r2, r0, r4
 80032d8:	19d2      	adds	r2, r2, r7
 80032da:	8812      	ldrh	r2, [r2, #0]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	e05d      	b.n	800339c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80032e0:	231a      	movs	r3, #26
 80032e2:	2218      	movs	r2, #24
 80032e4:	189b      	adds	r3, r3, r2
 80032e6:	19db      	adds	r3, r3, r7
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e056      	b.n	800339c <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ee:	231b      	movs	r3, #27
 80032f0:	2218      	movs	r2, #24
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	19db      	adds	r3, r3, r7
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d822      	bhi.n	8003342 <UART_SetConfig+0x40a>
 80032fc:	009a      	lsls	r2, r3, #2
 80032fe:	4b2f      	ldr	r3, [pc, #188]	@ (80033bc <UART_SetConfig+0x484>)
 8003300:	18d3      	adds	r3, r2, r3
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003306:	f7ff fc01 	bl	8002b0c <HAL_RCC_GetPCLK1Freq>
 800330a:	0003      	movs	r3, r0
 800330c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800330e:	e021      	b.n	8003354 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003310:	f7ff fc12 	bl	8002b38 <HAL_RCC_GetPCLK2Freq>
 8003314:	0003      	movs	r3, r0
 8003316:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003318:	e01c      	b.n	8003354 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800331a:	4b29      	ldr	r3, [pc, #164]	@ (80033c0 <UART_SetConfig+0x488>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2210      	movs	r2, #16
 8003320:	4013      	ands	r3, r2
 8003322:	d002      	beq.n	800332a <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003324:	4b27      	ldr	r3, [pc, #156]	@ (80033c4 <UART_SetConfig+0x48c>)
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003328:	e014      	b.n	8003354 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800332a:	4b27      	ldr	r3, [pc, #156]	@ (80033c8 <UART_SetConfig+0x490>)
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800332e:	e011      	b.n	8003354 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003330:	f7ff fb3c 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8003334:	0003      	movs	r3, r0
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003338:	e00c      	b.n	8003354 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003340:	e008      	b.n	8003354 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003346:	231a      	movs	r3, #26
 8003348:	2218      	movs	r2, #24
 800334a:	189b      	adds	r3, r3, r2
 800334c:	19db      	adds	r3, r3, r7
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
        break;
 8003352:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003356:	2b00      	cmp	r3, #0
 8003358:	d020      	beq.n	800339c <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	085a      	lsrs	r2, r3, #1
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	18d2      	adds	r2, r2, r3
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	0019      	movs	r1, r3
 800336a:	0010      	movs	r0, r2
 800336c:	f7fc fecc 	bl	8000108 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d90a      	bls.n	8003390 <UART_SetConfig+0x458>
 800337a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800337c:	2380      	movs	r3, #128	@ 0x80
 800337e:	025b      	lsls	r3, r3, #9
 8003380:	429a      	cmp	r2, r3
 8003382:	d205      	bcs.n	8003390 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	b29a      	uxth	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	e005      	b.n	800339c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003390:	231a      	movs	r3, #26
 8003392:	2218      	movs	r2, #24
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2200      	movs	r2, #0
 80033a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2200      	movs	r2, #0
 80033a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033a8:	231a      	movs	r3, #26
 80033aa:	2218      	movs	r2, #24
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	781b      	ldrb	r3, [r3, #0]
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b00e      	add	sp, #56	@ 0x38
 80033b8:	bdb0      	pop	{r4, r5, r7, pc}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	08003c64 	.word	0x08003c64
 80033c0:	40021000 	.word	0x40021000
 80033c4:	003d0900 	.word	0x003d0900
 80033c8:	00f42400 	.word	0x00f42400

080033cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003510 <UART_AdvFeatureConfig+0x144>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fa:	2202      	movs	r2, #2
 80033fc:	4013      	ands	r3, r2
 80033fe:	d00b      	beq.n	8003418 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a43      	ldr	r2, [pc, #268]	@ (8003514 <UART_AdvFeatureConfig+0x148>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	2204      	movs	r2, #4
 800341e:	4013      	ands	r3, r2
 8003420:	d00b      	beq.n	800343a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4a3b      	ldr	r2, [pc, #236]	@ (8003518 <UART_AdvFeatureConfig+0x14c>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	2208      	movs	r2, #8
 8003440:	4013      	ands	r3, r2
 8003442:	d00b      	beq.n	800345c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	4a34      	ldr	r2, [pc, #208]	@ (800351c <UART_AdvFeatureConfig+0x150>)
 800344c:	4013      	ands	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003460:	2210      	movs	r2, #16
 8003462:	4013      	ands	r3, r2
 8003464:	d00b      	beq.n	800347e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	4a2c      	ldr	r2, [pc, #176]	@ (8003520 <UART_AdvFeatureConfig+0x154>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	2220      	movs	r2, #32
 8003484:	4013      	ands	r3, r2
 8003486:	d00b      	beq.n	80034a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4a25      	ldr	r2, [pc, #148]	@ (8003524 <UART_AdvFeatureConfig+0x158>)
 8003490:	4013      	ands	r3, r2
 8003492:	0019      	movs	r1, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	2240      	movs	r2, #64	@ 0x40
 80034a6:	4013      	ands	r3, r2
 80034a8:	d01d      	beq.n	80034e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003528 <UART_AdvFeatureConfig+0x15c>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034c6:	2380      	movs	r3, #128	@ 0x80
 80034c8:	035b      	lsls	r3, r3, #13
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d10b      	bne.n	80034e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	4a15      	ldr	r2, [pc, #84]	@ (800352c <UART_AdvFeatureConfig+0x160>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	0019      	movs	r1, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	4013      	ands	r3, r2
 80034ee:	d00b      	beq.n	8003508 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003530 <UART_AdvFeatureConfig+0x164>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  }
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}
 8003510:	fffdffff 	.word	0xfffdffff
 8003514:	fffeffff 	.word	0xfffeffff
 8003518:	fffbffff 	.word	0xfffbffff
 800351c:	ffff7fff 	.word	0xffff7fff
 8003520:	ffffefff 	.word	0xffffefff
 8003524:	ffffdfff 	.word	0xffffdfff
 8003528:	ffefffff 	.word	0xffefffff
 800352c:	ff9fffff 	.word	0xff9fffff
 8003530:	fff7ffff 	.word	0xfff7ffff

08003534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b092      	sub	sp, #72	@ 0x48
 8003538:	af02      	add	r7, sp, #8
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2284      	movs	r2, #132	@ 0x84
 8003540:	2100      	movs	r1, #0
 8003542:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003544:	f7fd fcce 	bl	8000ee4 <HAL_GetTick>
 8003548:	0003      	movs	r3, r0
 800354a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2208      	movs	r2, #8
 8003554:	4013      	ands	r3, r2
 8003556:	2b08      	cmp	r3, #8
 8003558:	d12c      	bne.n	80035b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800355a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800355c:	2280      	movs	r2, #128	@ 0x80
 800355e:	0391      	lsls	r1, r2, #14
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	4a46      	ldr	r2, [pc, #280]	@ (800367c <UART_CheckIdleState+0x148>)
 8003564:	9200      	str	r2, [sp, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	f000 f88c 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d021      	beq.n	80035b4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003570:	f3ef 8310 	mrs	r3, PRIMASK
 8003574:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
 800357a:	2301      	movs	r3, #1
 800357c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	f383 8810 	msr	PRIMASK, r3
}
 8003584:	46c0      	nop			@ (mov r8, r8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2180      	movs	r1, #128	@ 0x80
 8003592:	438a      	bics	r2, r1
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	f383 8810 	msr	PRIMASK, r3
}
 80035a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2278      	movs	r2, #120	@ 0x78
 80035ac:	2100      	movs	r1, #0
 80035ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e05f      	b.n	8003674 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d146      	bne.n	8003650 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035c4:	2280      	movs	r2, #128	@ 0x80
 80035c6:	03d1      	lsls	r1, r2, #15
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	4a2c      	ldr	r2, [pc, #176]	@ (800367c <UART_CheckIdleState+0x148>)
 80035cc:	9200      	str	r2, [sp, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f000 f858 	bl	8003684 <UART_WaitOnFlagUntilTimeout>
 80035d4:	1e03      	subs	r3, r0, #0
 80035d6:	d03b      	beq.n	8003650 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d8:	f3ef 8310 	mrs	r3, PRIMASK
 80035dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035e2:	2301      	movs	r3, #1
 80035e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f383 8810 	msr	PRIMASK, r3
}
 80035ec:	46c0      	nop			@ (mov r8, r8)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4921      	ldr	r1, [pc, #132]	@ (8003680 <UART_CheckIdleState+0x14c>)
 80035fa:	400a      	ands	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003600:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f383 8810 	msr	PRIMASK, r3
}
 8003608:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360a:	f3ef 8310 	mrs	r3, PRIMASK
 800360e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003610:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003612:	633b      	str	r3, [r7, #48]	@ 0x30
 8003614:	2301      	movs	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	f383 8810 	msr	PRIMASK, r3
}
 800361e:	46c0      	nop			@ (mov r8, r8)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2101      	movs	r1, #1
 800362c:	438a      	bics	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003632:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	f383 8810 	msr	PRIMASK, r3
}
 800363a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2280      	movs	r2, #128	@ 0x80
 8003640:	2120      	movs	r1, #32
 8003642:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2278      	movs	r2, #120	@ 0x78
 8003648:	2100      	movs	r1, #0
 800364a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e011      	b.n	8003674 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2280      	movs	r2, #128	@ 0x80
 800365a:	2120      	movs	r1, #32
 800365c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2278      	movs	r2, #120	@ 0x78
 800366e:	2100      	movs	r1, #0
 8003670:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	0018      	movs	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	b010      	add	sp, #64	@ 0x40
 800367a:	bd80      	pop	{r7, pc}
 800367c:	01ffffff 	.word	0x01ffffff
 8003680:	fffffedf 	.word	0xfffffedf

08003684 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	1dfb      	adds	r3, r7, #7
 8003692:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003694:	e04b      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3301      	adds	r3, #1
 800369a:	d048      	beq.n	800372e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369c:	f7fd fc22 	bl	8000ee4 <HAL_GetTick>
 80036a0:	0002      	movs	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d302      	bcc.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e04b      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2204      	movs	r2, #4
 80036be:	4013      	ands	r3, r2
 80036c0:	d035      	beq.n	800372e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2208      	movs	r2, #8
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d111      	bne.n	80036f4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2208      	movs	r2, #8
 80036d6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	0018      	movs	r0, r3
 80036dc:	f000 f900 	bl	80038e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2284      	movs	r2, #132	@ 0x84
 80036e4:	2108      	movs	r1, #8
 80036e6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2278      	movs	r2, #120	@ 0x78
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e02c      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	2380      	movs	r3, #128	@ 0x80
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	401a      	ands	r2, r3
 8003700:	2380      	movs	r3, #128	@ 0x80
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	429a      	cmp	r2, r3
 8003706:	d112      	bne.n	800372e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2280      	movs	r2, #128	@ 0x80
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	0018      	movs	r0, r3
 8003716:	f000 f8e3 	bl	80038e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2284      	movs	r2, #132	@ 0x84
 800371e:	2120      	movs	r1, #32
 8003720:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2278      	movs	r2, #120	@ 0x78
 8003726:	2100      	movs	r1, #0
 8003728:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00f      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	425a      	negs	r2, r3
 800373e:	4153      	adcs	r3, r2
 8003740:	b2db      	uxtb	r3, r3
 8003742:	001a      	movs	r2, r3
 8003744:	1dfb      	adds	r3, r7, #7
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	d0a4      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b090      	sub	sp, #64	@ 0x40
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	1dbb      	adds	r3, r7, #6
 8003764:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1dba      	adds	r2, r7, #6
 8003770:	2158      	movs	r1, #88	@ 0x58
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2284      	movs	r2, #132	@ 0x84
 800377a:	2100      	movs	r1, #0
 800377c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2280      	movs	r2, #128	@ 0x80
 8003782:	2122      	movs	r1, #34	@ 0x22
 8003784:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800378a:	2b00      	cmp	r3, #0
 800378c:	d028      	beq.n	80037e0 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003792:	4a3e      	ldr	r2, [pc, #248]	@ (800388c <UART_Start_Receive_DMA+0x134>)
 8003794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379a:	4a3d      	ldr	r2, [pc, #244]	@ (8003890 <UART_Start_Receive_DMA+0x138>)
 800379c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a2:	4a3c      	ldr	r2, [pc, #240]	@ (8003894 <UART_Start_Receive_DMA+0x13c>)
 80037a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037aa:	2200      	movs	r2, #0
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3324      	adds	r3, #36	@ 0x24
 80037b8:	0019      	movs	r1, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037be:	001a      	movs	r2, r3
 80037c0:	1dbb      	adds	r3, r7, #6
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	f7fe f960 	bl	8001a88 <HAL_DMA_Start_IT>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d009      	beq.n	80037e0 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2284      	movs	r2, #132	@ 0x84
 80037d0:	2110      	movs	r1, #16
 80037d2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2280      	movs	r2, #128	@ 0x80
 80037d8:	2120      	movs	r1, #32
 80037da:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e050      	b.n	8003882 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d019      	beq.n	800381c <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e8:	f3ef 8310 	mrs	r3, PRIMASK
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80037ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037f2:	2301      	movs	r3, #1
 80037f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f8:	f383 8810 	msr	PRIMASK, r3
}
 80037fc:	46c0      	nop			@ (mov r8, r8)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2180      	movs	r1, #128	@ 0x80
 800380a:	0049      	lsls	r1, r1, #1
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	f383 8810 	msr	PRIMASK, r3
}
 800381a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800381c:	f3ef 8310 	mrs	r3, PRIMASK
 8003820:	613b      	str	r3, [r7, #16]
  return(result);
 8003822:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003824:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003826:	2301      	movs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f383 8810 	msr	PRIMASK, r3
}
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2101      	movs	r1, #1
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003844:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800384e:	f3ef 8310 	mrs	r3, PRIMASK
 8003852:	61fb      	str	r3, [r7, #28]
  return(result);
 8003854:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003856:	637b      	str	r3, [r7, #52]	@ 0x34
 8003858:	2301      	movs	r3, #1
 800385a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	f383 8810 	msr	PRIMASK, r3
}
 8003862:	46c0      	nop			@ (mov r8, r8)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2140      	movs	r1, #64	@ 0x40
 8003870:	430a      	orrs	r2, r1
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	0018      	movs	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	b010      	add	sp, #64	@ 0x40
 8003888:	bd80      	pop	{r7, pc}
 800388a:	46c0      	nop			@ (mov r8, r8)
 800388c:	080039a9 	.word	0x080039a9
 8003890:	08003ad9 	.word	0x08003ad9
 8003894:	08003b1b 	.word	0x08003b1b

08003898 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a0:	f3ef 8310 	mrs	r3, PRIMASK
 80038a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	2301      	movs	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f383 8810 	msr	PRIMASK, r3
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	21c0      	movs	r1, #192	@ 0xc0
 80038c2:	438a      	bics	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f383 8810 	msr	PRIMASK, r3
}
 80038d0:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80038d8:	46c0      	nop			@ (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bd80      	pop	{r7, pc}

080038e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	@ 0x38
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038e8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ec:	617b      	str	r3, [r7, #20]
  return(result);
 80038ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f2:	2301      	movs	r3, #1
 80038f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f383 8810 	msr	PRIMASK, r3
}
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4926      	ldr	r1, [pc, #152]	@ (80039a4 <UART_EndRxTransfer+0xc4>)
 800390a:	400a      	ands	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003910:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	f383 8810 	msr	PRIMASK, r3
}
 8003918:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800391a:	f3ef 8310 	mrs	r3, PRIMASK
 800391e:	623b      	str	r3, [r7, #32]
  return(result);
 8003920:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003922:	633b      	str	r3, [r7, #48]	@ 0x30
 8003924:	2301      	movs	r3, #1
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	438a      	bics	r2, r1
 800393e:	609a      	str	r2, [r3, #8]
 8003940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003942:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003946:	f383 8810 	msr	PRIMASK, r3
}
 800394a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003950:	2b01      	cmp	r3, #1
 8003952:	d118      	bne.n	8003986 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003954:	f3ef 8310 	mrs	r3, PRIMASK
 8003958:	60bb      	str	r3, [r7, #8]
  return(result);
 800395a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395e:	2301      	movs	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f383 8810 	msr	PRIMASK, r3
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2110      	movs	r1, #16
 8003976:	438a      	bics	r2, r1
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800397c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f383 8810 	msr	PRIMASK, r3
}
 8003984:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2280      	movs	r2, #128	@ 0x80
 800398a:	2120      	movs	r1, #32
 800398c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b00e      	add	sp, #56	@ 0x38
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	fffffedf 	.word	0xfffffedf

080039a8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b094      	sub	sp, #80	@ 0x50
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2220      	movs	r2, #32
 80039be:	4013      	ands	r3, r2
 80039c0:	d16f      	bne.n	8003aa2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80039c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c4:	225a      	movs	r2, #90	@ 0x5a
 80039c6:	2100      	movs	r1, #0
 80039c8:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ca:	f3ef 8310 	mrs	r3, PRIMASK
 80039ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80039d0:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d4:	2301      	movs	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f383 8810 	msr	PRIMASK, r3
}
 80039de:	46c0      	nop			@ (mov r8, r8)
 80039e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	493a      	ldr	r1, [pc, #232]	@ (8003ad4 <UART_DMAReceiveCplt+0x12c>)
 80039ec:	400a      	ands	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f383 8810 	msr	PRIMASK, r3
}
 80039fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a04:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a06:	2301      	movs	r3, #1
 8003a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			@ (mov r8, r8)
 8003a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	438a      	bics	r2, r1
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a38:	2301      	movs	r3, #1
 8003a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2140      	movs	r1, #64	@ 0x40
 8003a50:	438a      	bics	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]
 8003a54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a62:	2280      	movs	r2, #128	@ 0x80
 8003a64:	2120      	movs	r1, #32
 8003a66:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d118      	bne.n	8003aa2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a70:	f3ef 8310 	mrs	r3, PRIMASK
 8003a74:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a76:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2110      	movs	r1, #16
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d108      	bne.n	8003ac2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab2:	2258      	movs	r2, #88	@ 0x58
 8003ab4:	5a9a      	ldrh	r2, [r3, r2]
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ab8:	0011      	movs	r1, r2
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7ff fa30 	bl	8002f20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ac0:	e003      	b.n	8003aca <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003ac2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f7fc ff85 	bl	80009d4 <HAL_UART_RxCpltCallback>
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b014      	add	sp, #80	@ 0x50
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	fffffeff 	.word	0xfffffeff

08003ad8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d10a      	bne.n	8003b0a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2258      	movs	r2, #88	@ 0x58
 8003af8:	5a9b      	ldrh	r3, [r3, r2]
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	0011      	movs	r1, r2
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7ff fa0c 	bl	8002f20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b08:	e003      	b.n	8003b12 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fc ff59 	bl	80009c4 <HAL_UART_RxHalfCpltCallback>
}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b004      	add	sp, #16
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b086      	sub	sp, #24
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	589b      	ldr	r3, [r3, r2]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2280      	movs	r2, #128	@ 0x80
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b80      	cmp	r3, #128	@ 0x80
 8003b42:	d10a      	bne.n	8003b5a <UART_DMAError+0x40>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b21      	cmp	r3, #33	@ 0x21
 8003b48:	d107      	bne.n	8003b5a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2252      	movs	r2, #82	@ 0x52
 8003b4e:	2100      	movs	r1, #0
 8003b50:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7ff fe9f 	bl	8003898 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2240      	movs	r2, #64	@ 0x40
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b40      	cmp	r3, #64	@ 0x40
 8003b66:	d10a      	bne.n	8003b7e <UART_DMAError+0x64>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b22      	cmp	r3, #34	@ 0x22
 8003b6c:	d107      	bne.n	8003b7e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	225a      	movs	r2, #90	@ 0x5a
 8003b72:	2100      	movs	r1, #0
 8003b74:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7ff feb1 	bl	80038e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2284      	movs	r2, #132	@ 0x84
 8003b82:	589b      	ldr	r3, [r3, r2]
 8003b84:	2210      	movs	r2, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2184      	movs	r1, #132	@ 0x84
 8003b8c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fc ff49 	bl	8000a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b006      	add	sp, #24
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <memset>:
 8003b9e:	0003      	movs	r3, r0
 8003ba0:	1882      	adds	r2, r0, r2
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d100      	bne.n	8003ba8 <memset+0xa>
 8003ba6:	4770      	bx	lr
 8003ba8:	7019      	strb	r1, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	e7f9      	b.n	8003ba2 <memset+0x4>
	...

08003bb0 <__libc_init_array>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	2600      	movs	r6, #0
 8003bb4:	4c0c      	ldr	r4, [pc, #48]	@ (8003be8 <__libc_init_array+0x38>)
 8003bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8003bec <__libc_init_array+0x3c>)
 8003bb8:	1b64      	subs	r4, r4, r5
 8003bba:	10a4      	asrs	r4, r4, #2
 8003bbc:	42a6      	cmp	r6, r4
 8003bbe:	d109      	bne.n	8003bd4 <__libc_init_array+0x24>
 8003bc0:	2600      	movs	r6, #0
 8003bc2:	f000 f819 	bl	8003bf8 <_init>
 8003bc6:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf0 <__libc_init_array+0x40>)
 8003bc8:	4d0a      	ldr	r5, [pc, #40]	@ (8003bf4 <__libc_init_array+0x44>)
 8003bca:	1b64      	subs	r4, r4, r5
 8003bcc:	10a4      	asrs	r4, r4, #2
 8003bce:	42a6      	cmp	r6, r4
 8003bd0:	d105      	bne.n	8003bde <__libc_init_array+0x2e>
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	00b3      	lsls	r3, r6, #2
 8003bd6:	58eb      	ldr	r3, [r5, r3]
 8003bd8:	4798      	blx	r3
 8003bda:	3601      	adds	r6, #1
 8003bdc:	e7ee      	b.n	8003bbc <__libc_init_array+0xc>
 8003bde:	00b3      	lsls	r3, r6, #2
 8003be0:	58eb      	ldr	r3, [r5, r3]
 8003be2:	4798      	blx	r3
 8003be4:	3601      	adds	r6, #1
 8003be6:	e7f2      	b.n	8003bce <__libc_init_array+0x1e>
 8003be8:	08003c90 	.word	0x08003c90
 8003bec:	08003c90 	.word	0x08003c90
 8003bf0:	08003c94 	.word	0x08003c94
 8003bf4:	08003c90 	.word	0x08003c90

08003bf8 <_init>:
 8003bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfa:	46c0      	nop			@ (mov r8, r8)
 8003bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfe:	bc08      	pop	{r3}
 8003c00:	469e      	mov	lr, r3
 8003c02:	4770      	bx	lr

08003c04 <_fini>:
 8003c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c06:	46c0      	nop			@ (mov r8, r8)
 8003c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c0a:	bc08      	pop	{r3}
 8003c0c:	469e      	mov	lr, r3
 8003c0e:	4770      	bx	lr
