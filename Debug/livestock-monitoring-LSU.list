
livestock-monitoring-LSU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003b84  08003b84  00004b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bfc  08003bfc  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003bfc  08003bfc  00004bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c04  08003c04  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c08  08003c08  00004c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003c0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000010  08003c1c  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003c1c  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a903  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229f  00000000  00000000  0000f93b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00011be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b3  00000000  00000000  000124b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f36  00000000  00000000  00012b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8bf  00000000  00000000  00024aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069fc7  00000000  00000000  00032360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009c327  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d44  00000000  00000000  0009c36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0009e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b6c 	.word	0x08003b6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003b6c 	.word	0x08003b6c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ae:	003b      	movs	r3, r7
 80004b0:	0018      	movs	r0, r3
 80004b2:	2308      	movs	r3, #8
 80004b4:	001a      	movs	r2, r3
 80004b6:	2100      	movs	r1, #0
 80004b8:	f003 fb2b 	bl	8003b12 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004bc:	4b39      	ldr	r3, [pc, #228]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004be:	4a3a      	ldr	r2, [pc, #232]	@ (80005a8 <MX_ADC_Init+0x100>)
 80004c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004c2:	4b38      	ldr	r3, [pc, #224]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004c8:	4b36      	ldr	r3, [pc, #216]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004ca:	2280      	movs	r2, #128	@ 0x80
 80004cc:	05d2      	lsls	r2, r2, #23
 80004ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004d0:	4b34      	ldr	r3, [pc, #208]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 80004d6:	4b33      	ldr	r3, [pc, #204]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004d8:	2201      	movs	r2, #1
 80004da:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004dc:	4b31      	ldr	r3, [pc, #196]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004de:	2201      	movs	r2, #1
 80004e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004e2:	4b30      	ldr	r3, [pc, #192]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004e8:	4b2e      	ldr	r3, [pc, #184]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b2c      	ldr	r3, [pc, #176]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004f2:	2221      	movs	r2, #33	@ 0x21
 80004f4:	2100      	movs	r1, #0
 80004f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f8:	4b2a      	ldr	r3, [pc, #168]	@ (80005a4 <MX_ADC_Init+0xfc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b29      	ldr	r3, [pc, #164]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000500:	22c2      	movs	r2, #194	@ 0xc2
 8000502:	32ff      	adds	r2, #255	@ 0xff
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000506:	4b27      	ldr	r3, [pc, #156]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000508:	222c      	movs	r2, #44	@ 0x2c
 800050a:	2100      	movs	r1, #0
 800050c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800050e:	4b25      	ldr	r3, [pc, #148]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000510:	2204      	movs	r2, #4
 8000512:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000514:	4b23      	ldr	r3, [pc, #140]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	0152      	lsls	r2, r2, #5
 800051a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = ENABLE;
 800051c:	4b21      	ldr	r3, [pc, #132]	@ (80005a4 <MX_ADC_Init+0xfc>)
 800051e:	2201      	movs	r2, #1
 8000520:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000524:	2201      	movs	r2, #1
 8000526:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000528:	4b1e      	ldr	r3, [pc, #120]	@ (80005a4 <MX_ADC_Init+0xfc>)
 800052a:	2201      	movs	r2, #1
 800052c:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800052e:	4b1d      	ldr	r3, [pc, #116]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000530:	0018      	movs	r0, r3
 8000532:	f000 fd53 	bl	8000fdc <HAL_ADC_Init>
 8000536:	1e03      	subs	r3, r0, #0
 8000538:	d001      	beq.n	800053e <MX_ADC_Init+0x96>
  {
    Error_Handler();
 800053a:	f000 fbdf 	bl	8000cfc <Error_Handler>



  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800053e:	003b      	movs	r3, r7
 8000540:	4a1a      	ldr	r2, [pc, #104]	@ (80005ac <MX_ADC_Init+0x104>)
 8000542:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000544:	003b      	movs	r3, r7
 8000546:	2280      	movs	r2, #128	@ 0x80
 8000548:	0152      	lsls	r2, r2, #5
 800054a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800054c:	003a      	movs	r2, r7
 800054e:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f000 ffee 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 800055c:	f000 fbce 	bl	8000cfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000560:	003b      	movs	r3, r7
 8000562:	4a13      	ldr	r2, [pc, #76]	@ (80005b0 <MX_ADC_Init+0x108>)
 8000564:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000566:	003a      	movs	r2, r7
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <MX_ADC_Init+0xfc>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f000 ffe1 	bl	8001534 <HAL_ADC_ConfigChannel>
 8000572:	1e03      	subs	r3, r0, #0
 8000574:	d001      	beq.n	800057a <MX_ADC_Init+0xd2>
  {
    Error_Handler();
 8000576:	f000 fbc1 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  // Enable ADC interrupt
  HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0); // Set priority for ADC interrupt
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	200c      	movs	r0, #12
 8000580:	f001 f992 	bl	80018a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);        // Enable ADC interrupt in NVIC
 8000584:	200c      	movs	r0, #12
 8000586:	f001 f9a4 	bl	80018d2 <HAL_NVIC_EnableIRQ>

  // Enable ADC end-of-conversion interrupt
  __HAL_ADC_ENABLE_IT(&hadc, ADC_IT_EOC);
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <MX_ADC_Init+0xfc>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	685a      	ldr	r2, [r3, #4]
 8000590:	4b04      	ldr	r3, [pc, #16]	@ (80005a4 <MX_ADC_Init+0xfc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2104      	movs	r1, #4
 8000596:	430a      	orrs	r2, r1
 8000598:	605a      	str	r2, [r3, #4]

}
 800059a:	46c0      	nop			@ (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	2000002c 	.word	0x2000002c
 80005a8:	40012400 	.word	0x40012400
 80005ac:	10000010 	.word	0x10000010
 80005b0:	14000020 	.word	0x14000020

080005b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	@ 0x24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	240c      	movs	r4, #12
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	0018      	movs	r0, r3
 80005c2:	2314      	movs	r3, #20
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f003 faa3 	bl	8003b12 <memset>
  if(adcHandle->Instance==ADC1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a18      	ldr	r2, [pc, #96]	@ (8000634 <HAL_ADC_MspInit+0x80>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d12a      	bne.n	800062c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005d6:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <HAL_ADC_MspInit+0x84>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <HAL_ADC_MspInit+0x84>)
 80005dc:	2180      	movs	r1, #128	@ 0x80
 80005de:	0089      	lsls	r1, r1, #2
 80005e0:	430a      	orrs	r2, r1
 80005e2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <HAL_ADC_MspInit+0x84>)
 80005e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <HAL_ADC_MspInit+0x84>)
 80005ea:	2101      	movs	r1, #1
 80005ec:	430a      	orrs	r2, r1
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <HAL_ADC_MspInit+0x84>)
 80005f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005f4:	2201      	movs	r2, #1
 80005f6:	4013      	ands	r3, r2
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2230      	movs	r2, #48	@ 0x30
 8000600:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2203      	movs	r2, #3
 8000606:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	193b      	adds	r3, r7, r4
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	193a      	adds	r2, r7, r4
 8000610:	23a0      	movs	r3, #160	@ 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fb32 	bl	8001c80 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	200c      	movs	r0, #12
 8000622:	f001 f941 	bl	80018a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000626:	200c      	movs	r0, #12
 8000628:	f001 f953 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800062c:	46c0      	nop			@ (mov r8, r8)
 800062e:	46bd      	mov	sp, r7
 8000630:	b009      	add	sp, #36	@ 0x24
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	40012400 	.word	0x40012400
 8000638:	40021000 	.word	0x40021000

0800063c <Start_ADC_IRQ>:
}

/* USER CODE BEGIN 1 */
static uint16_t adc_values[2];

void Start_ADC_IRQ(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
HAL_ADC_Start_IT(&hadc);
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <Start_ADC_IRQ+0x14>)
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fe3e 	bl	80012c4 <HAL_ADC_Start_IT>
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	2000002c 	.word	0x2000002c

08000654 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    static uint8_t current_channel = 0;
    adc_values[current_channel] = HAL_ADC_GetValue(hadc);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fea2 	bl	80013a8 <HAL_ADC_GetValue>
 8000664:	0001      	movs	r1, r0
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <HAL_ADC_ConvCpltCallback+0x38>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	001a      	movs	r2, r3
 800066c:	b289      	uxth	r1, r1
 800066e:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	52d1      	strh	r1, [r2, r3]
    current_channel ^= 1;  // Toggle between channel 0 and 1
 8000674:	4b05      	ldr	r3, [pc, #20]	@ (800068c <HAL_ADC_ConvCpltCallback+0x38>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2201      	movs	r2, #1
 800067a:	4053      	eors	r3, r2
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b03      	ldr	r3, [pc, #12]	@ (800068c <HAL_ADC_ConvCpltCallback+0x38>)
 8000680:	701a      	strb	r2, [r3, #0]

}
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			@ (mov r8, r8)
 800068c:	2000008c 	.word	0x2000008c
 8000690:	20000088 	.word	0x20000088

08000694 <get_ADC_values>:

void get_ADC_values(uint16_t* val) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	        val[0] = adc_values[0];
 800069c:	4b06      	ldr	r3, [pc, #24]	@ (80006b8 <get_ADC_values+0x24>)
 800069e:	881a      	ldrh	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	801a      	strh	r2, [r3, #0]
	        val[1] = adc_values[1];
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3302      	adds	r3, #2
 80006a8:	4a03      	ldr	r2, [pc, #12]	@ (80006b8 <get_ADC_values+0x24>)
 80006aa:	8852      	ldrh	r2, [r2, #2]
 80006ac:	801a      	strh	r2, [r3, #0]
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	20000088 	.word	0x20000088

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_DMA_Init+0x38>)
 80006c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_DMA_Init+0x38>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	430a      	orrs	r2, r1
 80006cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_DMA_Init+0x38>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	200b      	movs	r0, #11
 80006e0:	f001 f8e2 	bl	80018a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80006e4:	200b      	movs	r0, #11
 80006e6:	f001 f8f4 	bl	80018d2 <HAL_NVIC_EnableIRQ>

}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	40021000 	.word	0x40021000

080006f8 <GPIO_Init>:
/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/

void GPIO_Init(void)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b089      	sub	sp, #36	@ 0x24
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	240c      	movs	r4, #12
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	2314      	movs	r3, #20
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f003 fa02 	bl	8003b12 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <GPIO_Init+0x98>)
 8000710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <GPIO_Init+0x98>)
 8000714:	2104      	movs	r1, #4
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	@ 0x2c
 800071a:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <GPIO_Init+0x98>)
 800071c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800071e:	2204      	movs	r2, #4
 8000720:	4013      	ands	r3, r2
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <GPIO_Init+0x98>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <GPIO_Init+0x98>)
 800072c:	2101      	movs	r1, #1
 800072e:	430a      	orrs	r2, r1
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <GPIO_Init+0x98>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	2201      	movs	r2, #1
 8000738:	4013      	ands	r3, r2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <GPIO_Init+0x98>)
 8000740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000742:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <GPIO_Init+0x98>)
 8000744:	2102      	movs	r1, #2
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <GPIO_Init+0x98>)
 800074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074e:	2202      	movs	r2, #2
 8000750:	4013      	ands	r3, r2
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <GPIO_Init+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	2108      	movs	r1, #8
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fbfd 	bl	8001f5c <HAL_GPIO_WritePin>



  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000762:	0021      	movs	r1, r4
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2208      	movs	r2, #8
 8000768:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2201      	movs	r2, #1
 800076e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800077c:	187b      	adds	r3, r7, r1
 800077e:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <GPIO_Init+0x9c>)
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f001 fa7c 	bl	8001c80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b009      	add	sp, #36	@ 0x24
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	50000400 	.word	0x50000400

08000798 <calcChecksum>:



UBXMessage ubxMessage;

void calcChecksum(uint8_t* CK, int msgSize) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
  memset(CK, 0, 2);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2202      	movs	r2, #2
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f003 f9b2 	bl	8003b12 <memset>
  for (int i = 0; i < msgSize; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	e016      	b.n	80007e2 <calcChecksum+0x4a>
    CK[0] += ((uint8_t*)(&ubxMessage))[i];
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781a      	ldrb	r2, [r3, #0]
 80007b8:	68f9      	ldr	r1, [r7, #12]
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <calcChecksum+0x5c>)
 80007bc:	18cb      	adds	r3, r1, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	701a      	strb	r2, [r3, #0]
    CK[1] += CK[0];
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	3301      	adds	r3, #1
 80007cc:	7819      	ldrb	r1, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	188a      	adds	r2, r1, r2
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < msgSize; i++) {
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3301      	adds	r3, #1
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fa      	ldr	r2, [r7, #12]
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	dbe4      	blt.n	80007b4 <calcChecksum+0x1c>
  }
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b004      	add	sp, #16
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200000c8 	.word	0x200000c8

080007f8 <compareMsgHeader>:

bool compareMsgHeader(const uint8_t* msgHeader) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  uint8_t* ptr = (uint8_t*)(&ubxMessage);
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <compareMsgHeader+0x40>)
 8000802:	60fb      	str	r3, [r7, #12]
  return ptr[0] == msgHeader[0] && ptr[1] == msgHeader[1];
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d109      	bne.n	8000824 <compareMsgHeader+0x2c>
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3301      	adds	r3, #1
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3301      	adds	r3, #1
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	d101      	bne.n	8000824 <compareMsgHeader+0x2c>
 8000820:	2301      	movs	r3, #1
 8000822:	e000      	b.n	8000826 <compareMsgHeader+0x2e>
 8000824:	2300      	movs	r3, #0
 8000826:	1c1a      	adds	r2, r3, #0
 8000828:	2301      	movs	r3, #1
 800082a:	4013      	ands	r3, r2
 800082c:	b2db      	uxtb	r3, r3
}
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	200000c8 	.word	0x200000c8

0800083c <processUBXData>:


void processUBXData(uint8_t* data, uint16_t size) {
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	000a      	movs	r2, r1
 8000846:	1cbb      	adds	r3, r7, #2
 8000848:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800084a:	2300      	movs	r3, #0
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	e01e      	b.n	800088e <processUBXData+0x52>
        ubxMsgType msgType = processGPS(data[i]);  // Procesa byte por byte
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	18d3      	adds	r3, r2, r3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	220b      	movs	r2, #11
 800085a:	18bc      	adds	r4, r7, r2
 800085c:	0018      	movs	r0, r3
 800085e:	f000 f843 	bl	80008e8 <processGPS>
 8000862:	0003      	movs	r3, r0
 8000864:	7023      	strb	r3, [r4, #0]

        // Verificar si se han recibido ambas tramas
        if (isNavPosllhReceived && isNavStatusReceived) {
 8000866:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <processUBXData+0x68>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d00c      	beq.n	8000888 <processUBXData+0x4c>
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <processUBXData+0x6c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d008      	beq.n	8000888 <processUBXData+0x4c>
            // Ambas tramas han sido recibidas, procesar los datos
            // Reiniciar los indicadores
            isNavPosllhReceived = false;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <processUBXData+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
            isNavStatusReceived = false;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <processUBXData+0x6c>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
        i=size; // break
 8000882:	1cbb      	adds	r3, r7, #2
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < size; i++) {
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	1cbb      	adds	r3, r7, #2
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbdb      	blt.n	8000850 <processUBXData+0x14>
        }
    }

}
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b005      	add	sp, #20
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			@ (mov r8, r8)
 80008a4:	200000c4 	.word	0x200000c4
 80008a8:	200000c5 	.word	0x200000c5

080008ac <get_UBX_Lat>:

int32_t get_UBX_Lat(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	  return navPosllhData.lat;
 80008b0:	4b02      	ldr	r3, [pc, #8]	@ (80008bc <get_UBX_Lat+0x10>)
 80008b2:	68db      	ldr	r3, [r3, #12]
}
 80008b4:	0018      	movs	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	20000090 	.word	0x20000090

080008c0 <get_UBX_Lon>:

int32_t get_UBX_Lon(void) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	  return navPosllhData.lon;
 80008c4:	4b02      	ldr	r3, [pc, #8]	@ (80008d0 <get_UBX_Lon+0x10>)
 80008c6:	689b      	ldr	r3, [r3, #8]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	20000090 	.word	0x20000090

080008d4 <get_UBX_GpsFixStatus>:

uint8_t get_UBX_GpsFixStatus(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    return navStatusData.gpsFix;
 80008d8:	4b02      	ldr	r3, [pc, #8]	@ (80008e4 <get_UBX_GpsFixStatus+0x10>)
 80008da:	7a1b      	ldrb	r3, [r3, #8]
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	200000b0 	.word	0x200000b0

080008e8 <processGPS>:



ubxMsgType processGPS(uint8_t c) {
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
  static int fpos = 0;
  static uint8_t checksum[2];
  static ubxMsgType currentMsgType = MT_NONE;
  static int payloadSize = sizeof(UBXMessage);

  if (fpos < 2) {
 80008f4:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <processGPS+0x164>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	dc11      	bgt.n	8000920 <processGPS+0x38>
    // Buscamos el header UBX (0xB5, 0x62)
    if (c == UBX_HEADER[fpos])
 80008fc:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <processGPS+0x164>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a53      	ldr	r2, [pc, #332]	@ (8000a50 <processGPS+0x168>)
 8000902:	5cd3      	ldrb	r3, [r2, r3]
 8000904:	1dfa      	adds	r2, r7, #7
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d105      	bne.n	8000918 <processGPS+0x30>
      fpos++;
 800090c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a4c <processGPS+0x164>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <processGPS+0x164>)
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e094      	b.n	8000a42 <processGPS+0x15a>
    else
      fpos = 0;  // Reiniciamos si no coincide
 8000918:	4b4c      	ldr	r3, [pc, #304]	@ (8000a4c <processGPS+0x164>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	e090      	b.n	8000a42 <processGPS+0x15a>
  } else {
    // Si ya tenemos el header, procesamos el payload
    if ((fpos - 2) < payloadSize)
 8000920:	4b4a      	ldr	r3, [pc, #296]	@ (8000a4c <processGPS+0x164>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	1e5a      	subs	r2, r3, #1
 8000926:	4b4b      	ldr	r3, [pc, #300]	@ (8000a54 <processGPS+0x16c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	429a      	cmp	r2, r3
 800092c:	dc07      	bgt.n	800093e <processGPS+0x56>
      ((uint8_t*)(&ubxMessage))[fpos - 2] = c;
 800092e:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <processGPS+0x164>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	1e9a      	subs	r2, r3, #2
 8000934:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <processGPS+0x170>)
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	1dfa      	adds	r2, r7, #7
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	701a      	strb	r2, [r3, #0]

    fpos++;
 800093e:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <processGPS+0x164>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <processGPS+0x164>)
 8000946:	601a      	str	r2, [r3, #0]

    if (fpos == 4) {
 8000948:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <processGPS+0x164>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d11e      	bne.n	800098e <processGPS+0xa6>
      // Determinamos el tipo de mensaje basado en el header
      if (compareMsgHeader(NAV_POSLLH_HEADER)) {
 8000950:	4b42      	ldr	r3, [pc, #264]	@ (8000a5c <processGPS+0x174>)
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff ff50 	bl	80007f8 <compareMsgHeader>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d006      	beq.n	800096a <processGPS+0x82>
        currentMsgType = MT_NAV_POSLLH;
 800095c:	4b40      	ldr	r3, [pc, #256]	@ (8000a60 <processGPS+0x178>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
        payloadSize = sizeof(NAV_POSLLH);
 8000962:	4b3c      	ldr	r3, [pc, #240]	@ (8000a54 <processGPS+0x16c>)
 8000964:	2220      	movs	r2, #32
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	e011      	b.n	800098e <processGPS+0xa6>
      } else if (compareMsgHeader(NAV_STATUS_HEADER)) {
 800096a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a64 <processGPS+0x17c>)
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff ff43 	bl	80007f8 <compareMsgHeader>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d006      	beq.n	8000984 <processGPS+0x9c>
        currentMsgType = MT_NAV_STATUS;
 8000976:	4b3a      	ldr	r3, [pc, #232]	@ (8000a60 <processGPS+0x178>)
 8000978:	2202      	movs	r2, #2
 800097a:	701a      	strb	r2, [r3, #0]
        payloadSize = sizeof(NAV_STATUS);
 800097c:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <processGPS+0x16c>)
 800097e:	2214      	movs	r2, #20
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	e004      	b.n	800098e <processGPS+0xa6>
      } else {
        // Mensaje desconocido, reiniciamos
        fpos = 0;
 8000984:	4b31      	ldr	r3, [pc, #196]	@ (8000a4c <processGPS+0x164>)
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
        return MT_NONE;
 800098a:	2300      	movs	r3, #0
 800098c:	e05a      	b.n	8000a44 <processGPS+0x15c>
      }
    }

    if (fpos == (payloadSize + 2)) {
 800098e:	4b31      	ldr	r3, [pc, #196]	@ (8000a54 <processGPS+0x16c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1c9a      	adds	r2, r3, #2
 8000994:	4b2d      	ldr	r3, [pc, #180]	@ (8000a4c <processGPS+0x164>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d107      	bne.n	80009ac <processGPS+0xc4>
      // Calculamos el checksum
      calcChecksum(checksum, payloadSize);
 800099c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a54 <processGPS+0x16c>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b31      	ldr	r3, [pc, #196]	@ (8000a68 <processGPS+0x180>)
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fef7 	bl	8000798 <calcChecksum>
 80009aa:	e04a      	b.n	8000a42 <processGPS+0x15a>
    } else if (fpos == (payloadSize + 3)) {
 80009ac:	4b29      	ldr	r3, [pc, #164]	@ (8000a54 <processGPS+0x16c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	1cda      	adds	r2, r3, #3
 80009b2:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <processGPS+0x164>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d109      	bne.n	80009ce <processGPS+0xe6>
      // Verificamos el primer byte del checksum
      if (c != checksum[0]) {
 80009ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000a68 <processGPS+0x180>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	1dfa      	adds	r2, r7, #7
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d03d      	beq.n	8000a42 <processGPS+0x15a>
        fpos = 0;  // Reiniciamos si no coincide
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <processGPS+0x164>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e039      	b.n	8000a42 <processGPS+0x15a>
      }
    } else if (fpos == (payloadSize + 4)) {
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <processGPS+0x16c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1d1a      	adds	r2, r3, #4
 80009d4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a4c <processGPS+0x164>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d128      	bne.n	8000a2e <processGPS+0x146>
      // Verificamos el segundo byte del checksum
      fpos = 0;  // Reiniciamos en cualquier caso
 80009dc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <processGPS+0x164>)
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
      if (c == checksum[1]) {
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <processGPS+0x180>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	1dfa      	adds	r2, r7, #7
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d129      	bne.n	8000a42 <processGPS+0x15a>
        // Copiamos los datos a la estructura global correspondiente
        if (currentMsgType == MT_NAV_POSLLH) {
 80009ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <processGPS+0x178>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d10b      	bne.n	8000a0e <processGPS+0x126>
          navPosllhData = ubxMessage.navPosllh;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <processGPS+0x184>)
 80009f8:	4a17      	ldr	r2, [pc, #92]	@ (8000a58 <processGPS+0x170>)
 80009fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009fc:	c313      	stmia	r3!, {r0, r1, r4}
 80009fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a00:	c313      	stmia	r3!, {r0, r1, r4}
 8000a02:	ca03      	ldmia	r2!, {r0, r1}
 8000a04:	c303      	stmia	r3!, {r0, r1}
          isNavPosllhReceived = true;
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <processGPS+0x188>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e00c      	b.n	8000a28 <processGPS+0x140>
        } else if (currentMsgType == MT_NAV_STATUS) {
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <processGPS+0x178>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d108      	bne.n	8000a28 <processGPS+0x140>
          navStatusData = ubxMessage.navStatus;
 8000a16:	4b17      	ldr	r3, [pc, #92]	@ (8000a74 <processGPS+0x18c>)
 8000a18:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <processGPS+0x170>)
 8000a1a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a1c:	c313      	stmia	r3!, {r0, r1, r4}
 8000a1e:	ca03      	ldmia	r2!, {r0, r1}
 8000a20:	c303      	stmia	r3!, {r0, r1}
          isNavStatusReceived = true;
 8000a22:	4b15      	ldr	r3, [pc, #84]	@ (8000a78 <processGPS+0x190>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	701a      	strb	r2, [r3, #0]
        }
        return currentMsgType;  // Mensaje válido
 8000a28:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <processGPS+0x178>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	e00a      	b.n	8000a44 <processGPS+0x15c>
      }
    } else if (fpos > (payloadSize + 4)) {
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <processGPS+0x16c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	1d1a      	adds	r2, r3, #4
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <processGPS+0x164>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	da02      	bge.n	8000a42 <processGPS+0x15a>
      // Error: reiniciamos
      fpos = 0;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	@ (8000a4c <processGPS+0x164>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
    }
  }

  return MT_NONE;  // No hay mensaje completo aún
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b003      	add	sp, #12
 8000a4a:	bd90      	pop	{r4, r7, pc}
 8000a4c:	200000e8 	.word	0x200000e8
 8000a50:	08003b84 	.word	0x08003b84
 8000a54:	20000000 	.word	0x20000000
 8000a58:	200000c8 	.word	0x200000c8
 8000a5c:	08003b88 	.word	0x08003b88
 8000a60:	200000ec 	.word	0x200000ec
 8000a64:	08003b8c 	.word	0x08003b8c
 8000a68:	200000f0 	.word	0x200000f0
 8000a6c:	20000090 	.word	0x20000090
 8000a70:	200000c4 	.word	0x200000c4
 8000a74:	200000b0 	.word	0x200000b0
 8000a78:	200000c5 	.word	0x200000c5

08000a7c <HAL_UART_RxHalfCpltCallback>:

#define UBX_Rx_Size 2*sizeof(NAV_STATUS)+2*sizeof(NAV_POSLLH)
uint8_t UBX_Rx_Data[UBX_Rx_Size];


void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_UART_RxCpltCallback>:


int32_t Lat, Lon;
uint8_t fixStatus;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]


    if (huart == &huart2) {  // Verifica que la interrupción proviene de USART2
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad0 <HAL_UART_RxCpltCallback+0x44>)
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d114      	bne.n	8000ac6 <HAL_UART_RxCpltCallback+0x3a>


        // Procesa los datos en el buffer UBX_Rx_Data
        processUBXData(&UBX_Rx_Data, UBX_Rx_Size);
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <HAL_UART_RxCpltCallback+0x48>)
 8000a9e:	2168      	movs	r1, #104	@ 0x68
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fecb 	bl	800083c <processUBXData>

        // Obtener latitud y longitud
        Lat = get_UBX_Lat();
 8000aa6:	f7ff ff01 	bl	80008ac <get_UBX_Lat>
 8000aaa:	0002      	movs	r2, r0
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <HAL_UART_RxCpltCallback+0x4c>)
 8000aae:	601a      	str	r2, [r3, #0]
        Lon = get_UBX_Lon();
 8000ab0:	f7ff ff06 	bl	80008c0 <get_UBX_Lon>
 8000ab4:	0002      	movs	r2, r0
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_UART_RxCpltCallback+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
        // GPS FIX STATUS: 0 NO FIX, 1 DEAD RECKONING ONLY, 2 2D FIX, 3 3D FIX, 4 GPS + DEAD RECKONING COMBINED 5 TIME ONLY FIX
        fixStatus = get_UBX_GpsFixStatus();
 8000aba:	f7ff ff0b 	bl	80008d4 <get_UBX_GpsFixStatus>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	001a      	movs	r2, r3
 8000ac2:	4b07      	ldr	r3, [pc, #28]	@ (8000ae0 <HAL_UART_RxCpltCallback+0x54>)
 8000ac4:	701a      	strb	r2, [r3, #0]

        //
        // HAL_UART_DMAStop(&huart2);
    }
}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b002      	add	sp, #8
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	2000016c 	.word	0x2000016c
 8000ad4:	200000f4 	.word	0x200000f4
 8000ad8:	2000015c 	.word	0x2000015c
 8000adc:	20000160 	.word	0x20000160
 8000ae0:	20000164 	.word	0x20000164

08000ae4 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 while(1){
	 huart->ErrorCode;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2284      	movs	r2, #132	@ 0x84
 8000af0:	589b      	ldr	r3, [r3, r2]
 8000af2:	e7fb      	b.n	8000aec <HAL_UART_ErrorCallback+0x8>

08000af4 <main>:




int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0



  HAL_Init();
 8000af8:	f000 f9dc 	bl	8000eb4 <HAL_Init>

  SystemClock_Config();
 8000afc:	f000 f88a 	bl	8000c14 <SystemClock_Config>

  GPIO_Init();
 8000b00:	f7ff fdfa 	bl	80006f8 <GPIO_Init>

  MX_ADC_Init();
 8000b04:	f7ff fcd0 	bl	80004a8 <MX_ADC_Init>


  MX_DMA_Init();
 8000b08:	f7ff fdd8 	bl	80006bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b0c:	f000 f902 	bl	8000d14 <MX_USART2_UART_Init>

  //TODO ADC TEST
  HAL_UART_Receive_DMA(&huart2, UBX_Rx_Data, UBX_Rx_Size);
 8000b10:	490b      	ldr	r1, [pc, #44]	@ (8000b40 <main+0x4c>)
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <main+0x50>)
 8000b14:	2268      	movs	r2, #104	@ 0x68
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 f95e 	bl	8002dd8 <HAL_UART_Receive_DMA>
  HAL_Delay(5000);
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <main+0x54>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 fa38 	bl	8000f94 <HAL_Delay>


  HAL_UART_Receive_DMA(&huart2, UBX_Rx_Data, UBX_Rx_Size);
 8000b24:	4906      	ldr	r1, [pc, #24]	@ (8000b40 <main+0x4c>)
 8000b26:	4b07      	ldr	r3, [pc, #28]	@ (8000b44 <main+0x50>)
 8000b28:	2268      	movs	r2, #104	@ 0x68
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f002 f954 	bl	8002dd8 <HAL_UART_Receive_DMA>
  HAL_Delay(5000);
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <main+0x54>)
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 fa2e 	bl	8000f94 <HAL_Delay>



  adc_test();
 8000b38:	f000 f808 	bl	8000b4c <adc_test>


  while (1) {
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	e7fd      	b.n	8000b3c <main+0x48>
 8000b40:	200000f4 	.word	0x200000f4
 8000b44:	2000016c 	.word	0x2000016c
 8000b48:	00001388 	.word	0x00001388

08000b4c <adc_test>:
  }
}

uint16_t Voltage_val[2];

void adc_test(void){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

	 Start_ADC_IRQ();
 8000b50:	f7ff fd74 	bl	800063c <Start_ADC_IRQ>
	 HAL_Delay(3000);
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <adc_test+0x34>)
 8000b56:	0018      	movs	r0, r3
 8000b58:	f000 fa1c 	bl	8000f94 <HAL_Delay>
	 get_ADC_values(&Voltage_val);
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <adc_test+0x38>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f7ff fd98 	bl	8000694 <get_ADC_values>



	 Start_ADC_IRQ();
 8000b64:	f7ff fd6a 	bl	800063c <Start_ADC_IRQ>
	 HAL_Delay(3000);
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <adc_test+0x34>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fa12 	bl	8000f94 <HAL_Delay>
	 get_ADC_values(&Voltage_val);
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <adc_test+0x38>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fd8e 	bl	8000694 <get_ADC_values>

}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	00000bb8 	.word	0x00000bb8
 8000b84:	20000168 	.word	0x20000168

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <HAL_MspInit+0x24>)
 8000b8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <HAL_MspInit+0x24>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	430a      	orrs	r2, r1
 8000b96:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <HAL_MspInit+0x24>)
 8000b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b9c:	4b03      	ldr	r3, [pc, #12]	@ (8000bac <HAL_MspInit+0x24>)
 8000b9e:	2180      	movs	r1, #128	@ 0x80
 8000ba0:	0549      	lsls	r1, r1, #21
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	e7fd      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	46c0      	nop			@ (mov r8, r8)
 8000bbe:	e7fd      	b.n	8000bbc <HardFault_Handler+0x4>

08000bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f9c0 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000be8:	4b03      	ldr	r3, [pc, #12]	@ (8000bf8 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 ff6c 	bl	8001ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	200001f4 	.word	0x200001f4

08000bfc <ADC1_COMP_IRQHandler>:

/* USER CODE BEGIN 1 */
void ADC1_COMP_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <ADC1_COMP_IRQHandler+0x14>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fbdc 	bl	80013c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	2000002c 	.word	0x2000002c

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b099      	sub	sp, #100	@ 0x64
 8000c18:	af00      	add	r7, sp, #0
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	242c      	movs	r4, #44	@ 0x2c
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	0018      	movs	r0, r3
 8000c20:	2334      	movs	r3, #52	@ 0x34
 8000c22:	001a      	movs	r2, r3
 8000c24:	2100      	movs	r1, #0
 8000c26:	f002 ff74 	bl	8003b12 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2a:	2318      	movs	r3, #24
 8000c2c:	18fb      	adds	r3, r7, r3
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2314      	movs	r3, #20
 8000c32:	001a      	movs	r2, r3
 8000c34:	2100      	movs	r1, #0
 8000c36:	f002 ff6c 	bl	8003b12 <memset>
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	2318      	movs	r3, #24
 8000c40:	001a      	movs	r2, r3
 8000c42:	2100      	movs	r1, #0
 8000c44:	f002 ff65 	bl	8003b12 <memset>

	  /** Configure the main internal regulator output voltage
	  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <SystemClock_Config+0xe0>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8000cf8 <SystemClock_Config+0xe4>)
 8000c4e:	401a      	ands	r2, r3
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <SystemClock_Config+0xe0>)
 8000c52:	2180      	movs	r1, #128	@ 0x80
 8000c54:	0109      	lsls	r1, r1, #4
 8000c56:	430a      	orrs	r2, r1
 8000c58:	601a      	str	r2, [r3, #0]

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5a:	0021      	movs	r1, r4
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2202      	movs	r2, #2
 8000c60:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2201      	movs	r2, #1
 8000c66:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2202      	movs	r2, #2
 8000c72:	625a      	str	r2, [r3, #36]	@ 0x24
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	629a      	str	r2, [r3, #40]	@ 0x28
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2280      	movs	r2, #128	@ 0x80
 8000c7e:	02d2      	lsls	r2, r2, #11
 8000c80:	62da      	str	r2, [r3, #44]	@ 0x2c
	  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2280      	movs	r2, #128	@ 0x80
 8000c86:	03d2      	lsls	r2, r2, #15
 8000c88:	631a      	str	r2, [r3, #48]	@ 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 f983 	bl	8001f98 <HAL_RCC_OscConfig>
 8000c92:	1e03      	subs	r3, r0, #0
 8000c94:	d001      	beq.n	8000c9a <SystemClock_Config+0x86>
	  {
	    Error_Handler();
 8000c96:	f000 f831 	bl	8000cfc <Error_Handler>
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9a:	2118      	movs	r1, #24
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca2:	187b      	adds	r3, r7, r1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	22e0      	movs	r2, #224	@ 0xe0
 8000cb2:	00d2      	lsls	r2, r2, #3
 8000cb4:	60da      	str	r2, [r3, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	22e0      	movs	r2, #224	@ 0xe0
 8000cba:	00d2      	lsls	r2, r2, #3
 8000cbc:	611a      	str	r2, [r3, #16]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f001 fce4 	bl	8002690 <HAL_RCC_ClockConfig>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0xbc>
	  {
	    Error_Handler();
 8000ccc:	f000 f816 	bl	8000cfc <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cd6:	003b      	movs	r3, r7
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cdc:	003b      	movs	r3, r7
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f001 fefa 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <SystemClock_Config+0xd8>
	  {
	    Error_Handler();
 8000ce8:	f000 f808 	bl	8000cfc <Error_Handler>
	  }
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b019      	add	sp, #100	@ 0x64
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	40007000 	.word	0x40007000
 8000cf8:	ffffe7ff 	.word	0xffffe7ff

08000cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d00:	b672      	cpsid	i
}
 8000d02:	46c0      	nop			@ (mov r8, r8)

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	e7fd      	b.n	8000d04 <Error_Handler+0x8>

08000d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d18:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d1a:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <MX_USART2_UART_Init+0x64>)
 8000d1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d20:	2296      	movs	r2, #150	@ 0x96
 8000d22:	0192      	lsls	r2, r2, #6
 8000d24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d26:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d38:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d44:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000d50:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d52:	2210      	movs	r2, #16
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	0152      	lsls	r2, r2, #5
 8000d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5e:	4b05      	ldr	r3, [pc, #20]	@ (8000d74 <MX_USART2_UART_Init+0x60>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f001 ffe5 	bl	8002d30 <HAL_UART_Init>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000d6a:	f7ff ffc7 	bl	8000cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000016c 	.word	0x2000016c
 8000d78:	40004400 	.word	0x40004400

08000d7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	240c      	movs	r4, #12
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	0018      	movs	r0, r3
 8000d8a:	2314      	movs	r3, #20
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	2100      	movs	r1, #0
 8000d90:	f002 febf 	bl	8003b12 <memset>
  if(uartHandle->Instance==USART2)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a2d      	ldr	r2, [pc, #180]	@ (8000e50 <HAL_UART_MspInit+0xd4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d153      	bne.n	8000e46 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e54 <HAL_UART_MspInit+0xd8>)
 8000da0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000da2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e54 <HAL_UART_MspInit+0xd8>)
 8000da4:	2180      	movs	r1, #128	@ 0x80
 8000da6:	0289      	lsls	r1, r1, #10
 8000da8:	430a      	orrs	r2, r1
 8000daa:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b29      	ldr	r3, [pc, #164]	@ (8000e54 <HAL_UART_MspInit+0xd8>)
 8000dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000db0:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <HAL_UART_MspInit+0xd8>)
 8000db2:	2101      	movs	r1, #1
 8000db4:	430a      	orrs	r2, r1
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000db8:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <HAL_UART_MspInit+0xd8>)
 8000dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	22c0      	movs	r2, #192	@ 0xc0
 8000dc8:	00d2      	lsls	r2, r2, #3
 8000dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	0021      	movs	r1, r4
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	2204      	movs	r2, #4
 8000de4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	187a      	adds	r2, r7, r1
 8000de8:	23a0      	movs	r3, #160	@ 0xa0
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 ff46 	bl	8001c80 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000df4:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000df6:	4a19      	ldr	r2, [pc, #100]	@ (8000e5c <HAL_UART_MspInit+0xe0>)
 8000df8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e0e:	2280      	movs	r2, #128	@ 0x80
 8000e10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 fd6d 	bl	800190c <HAL_DMA_Init>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000e36:	f7ff ff61 	bl	8000cfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e3e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <HAL_UART_MspInit+0xdc>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b009      	add	sp, #36	@ 0x24
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	40004400 	.word	0x40004400
 8000e54:	40021000 	.word	0x40021000
 8000e58:	200001f4 	.word	0x200001f4
 8000e5c:	40020058 	.word	0x40020058

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e64:	f7ff ff50 	bl	8000d08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	@ (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	@ (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	@ (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f002 fe49 	bl	8003b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fe2f 	bl	8000af4 <main>

08000e96 <LoopForever>:

LoopForever:
    b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
   ldr   r0, =_estack
 8000e98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ea4:	08003c0c 	.word	0x08003c0c
  ldr r2, =_sbss
 8000ea8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000eac:	20000240 	.word	0x20000240

08000eb0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <DMA1_Channel1_IRQHandler>
	...

08000eb4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_Init+0x3c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <HAL_Init+0x3c>)
 8000ec6:	2140      	movs	r1, #64	@ 0x40
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 f811 	bl	8000ef4 <HAL_InitTick>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e001      	b.n	8000ee2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ede:	f7ff fe53 	bl	8000b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
}
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b002      	add	sp, #8
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40022000 	.word	0x40022000

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <HAL_InitTick+0x5c>)
 8000efe:	681c      	ldr	r4, [r3, #0]
 8000f00:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_InitTick+0x60>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	0019      	movs	r1, r3
 8000f06:	23fa      	movs	r3, #250	@ 0xfa
 8000f08:	0098      	lsls	r0, r3, #2
 8000f0a:	f7ff f8fd 	bl	8000108 <__udivsi3>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	0019      	movs	r1, r3
 8000f12:	0020      	movs	r0, r4
 8000f14:	f7ff f8f8 	bl	8000108 <__udivsi3>
 8000f18:	0003      	movs	r3, r0
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f000 fce9 	bl	80018f2 <HAL_SYSTICK_Config>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e00f      	b.n	8000f48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	d80b      	bhi.n	8000f46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	2301      	movs	r3, #1
 8000f32:	425b      	negs	r3, r3
 8000f34:	2200      	movs	r2, #0
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 fcb6 	bl	80018a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_InitTick+0x64>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	0018      	movs	r0, r3
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b003      	add	sp, #12
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	20000004 	.word	0x20000004
 8000f54:	2000000c 	.word	0x2000000c
 8000f58:	20000008 	.word	0x20000008

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <HAL_IncTick+0x1c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	001a      	movs	r2, r3
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	18d2      	adds	r2, r2, r3
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	2000000c 	.word	0x2000000c
 8000f7c:	2000023c 	.word	0x2000023c

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b02      	ldr	r3, [pc, #8]	@ (8000f90 <HAL_GetTick+0x10>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	2000023c 	.word	0x2000023c

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff fff0 	bl	8000f80 <HAL_GetTick>
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	189b      	adds	r3, r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	f7ff ffe0 	bl	8000f80 <HAL_GetTick>
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b004      	add	sp, #16
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	46c0      	nop			@ (mov r8, r8)
 8000fd8:	2000000c 	.word	0x2000000c

08000fdc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e159      	b.n	80012a2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10a      	bne.n	800100c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2250      	movs	r2, #80	@ 0x50
 8001000:	2100      	movs	r1, #0
 8001002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	0018      	movs	r0, r3
 8001008:	f7ff fad4 	bl	80005b4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001010:	2210      	movs	r2, #16
 8001012:	4013      	ands	r3, r2
 8001014:	2b10      	cmp	r3, #16
 8001016:	d005      	beq.n	8001024 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2204      	movs	r2, #4
 8001020:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001022:	d00b      	beq.n	800103c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001028:	2210      	movs	r2, #16
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2250      	movs	r2, #80	@ 0x50
 8001034:	2100      	movs	r1, #0
 8001036:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e132      	b.n	80012a2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001040:	4a9a      	ldr	r2, [pc, #616]	@ (80012ac <HAL_ADC_Init+0x2d0>)
 8001042:	4013      	ands	r3, r2
 8001044:	2202      	movs	r2, #2
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2203      	movs	r2, #3
 8001054:	4013      	ands	r3, r2
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <HAL_ADC_Init+0x90>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2201      	movs	r2, #1
 8001062:	4013      	ands	r3, r2
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_ADC_Init+0x90>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_ADC_Init+0x92>
 800106c:	2300      	movs	r3, #0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d149      	bne.n	8001106 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	23c0      	movs	r3, #192	@ 0xc0
 8001078:	061b      	lsls	r3, r3, #24
 800107a:	429a      	cmp	r2, r3
 800107c:	d00b      	beq.n	8001096 <HAL_ADC_Init+0xba>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	2380      	movs	r3, #128	@ 0x80
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	429a      	cmp	r2, r3
 8001088:	d005      	beq.n	8001096 <HAL_ADC_Init+0xba>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	061b      	lsls	r3, r3, #24
 8001092:	429a      	cmp	r2, r3
 8001094:	d111      	bne.n	80010ba <HAL_ADC_Init+0xde>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	0892      	lsrs	r2, r2, #2
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6919      	ldr	r1, [r3, #16]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	611a      	str	r2, [r3, #16]
 80010b8:	e014      	b.n	80010e4 <HAL_ADC_Init+0x108>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0092      	lsls	r2, r2, #2
 80010c6:	0892      	lsrs	r2, r2, #2
 80010c8:	611a      	str	r2, [r3, #16]
 80010ca:	4b79      	ldr	r3, [pc, #484]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4b78      	ldr	r3, [pc, #480]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 80010d0:	4978      	ldr	r1, [pc, #480]	@ (80012b4 <HAL_ADC_Init+0x2d8>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 80010d8:	6819      	ldr	r1, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4b74      	ldr	r3, [pc, #464]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2118      	movs	r1, #24
 80010f0:	438a      	bics	r2, r1
 80010f2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d9      	ldr	r1, [r3, #12]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	430a      	orrs	r2, r1
 8001104:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001106:	4b6a      	ldr	r3, [pc, #424]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b69      	ldr	r3, [pc, #420]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 800110c:	496a      	ldr	r1, [pc, #424]	@ (80012b8 <HAL_ADC_Init+0x2dc>)
 800110e:	400a      	ands	r2, r1
 8001110:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001112:	4b67      	ldr	r3, [pc, #412]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800111a:	065a      	lsls	r2, r3, #25
 800111c:	4b64      	ldr	r3, [pc, #400]	@ (80012b0 <HAL_ADC_Init+0x2d4>)
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	055b      	lsls	r3, r3, #21
 800112c:	4013      	ands	r3, r2
 800112e:	d108      	bne.n	8001142 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0549      	lsls	r1, r1, #21
 800113e:	430a      	orrs	r2, r1
 8001140:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	495b      	ldr	r1, [pc, #364]	@ (80012bc <HAL_ADC_Init+0x2e0>)
 800114e:	400a      	ands	r2, r1
 8001150:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68d9      	ldr	r1, [r3, #12]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d101      	bne.n	8001168 <HAL_ADC_Init+0x18c>
 8001164:	2304      	movs	r3, #4
 8001166:	e000      	b.n	800116a <HAL_ADC_Init+0x18e>
 8001168:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800116a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2020      	movs	r0, #32
 8001170:	5c1b      	ldrb	r3, [r3, r0]
 8001172:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001174:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	202c      	movs	r0, #44	@ 0x2c
 800117a:	5c1b      	ldrb	r3, [r3, r0]
 800117c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800117e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001184:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800118c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001194:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011a2:	23c2      	movs	r3, #194	@ 0xc2
 80011a4:	33ff      	adds	r3, #255	@ 0xff
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d00b      	beq.n	80011c2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68d9      	ldr	r1, [r3, #12]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80011b8:	431a      	orrs	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2221      	movs	r2, #33	@ 0x21
 80011c6:	5c9b      	ldrb	r3, [r3, r2]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d11a      	bne.n	8001202 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2220      	movs	r2, #32
 80011d0:	5c9b      	ldrb	r3, [r3, r2]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2180      	movs	r1, #128	@ 0x80
 80011e2:	0249      	lsls	r1, r1, #9
 80011e4:	430a      	orrs	r2, r1
 80011e6:	60da      	str	r2, [r3, #12]
 80011e8:	e00b      	b.n	8001202 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011ee:	2220      	movs	r2, #32
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fa:	2201      	movs	r2, #1
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001206:	2b01      	cmp	r3, #1
 8001208:	d11f      	bne.n	800124a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	691a      	ldr	r2, [r3, #16]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	492a      	ldr	r1, [pc, #168]	@ (80012c0 <HAL_ADC_Init+0x2e4>)
 8001216:	400a      	ands	r2, r1
 8001218:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6919      	ldr	r1, [r3, #16]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001228:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800122e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	430a      	orrs	r2, r1
 8001236:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	e00e      	b.n	8001268 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	2201      	movs	r2, #1
 8001252:	4013      	ands	r3, r2
 8001254:	2b01      	cmp	r3, #1
 8001256:	d107      	bne.n	8001268 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2101      	movs	r1, #1
 8001264:	438a      	bics	r2, r1
 8001266:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	695a      	ldr	r2, [r3, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2107      	movs	r1, #7
 8001274:	438a      	bics	r2, r1
 8001276:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6959      	ldr	r1, [r3, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001294:	2203      	movs	r2, #3
 8001296:	4393      	bics	r3, r2
 8001298:	2201      	movs	r2, #1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	fffffefd 	.word	0xfffffefd
 80012b0:	40012708 	.word	0x40012708
 80012b4:	ffc3ffff 	.word	0xffc3ffff
 80012b8:	fdffffff 	.word	0xfdffffff
 80012bc:	fffe0219 	.word	0xfffe0219
 80012c0:	fffffc03 	.word	0xfffffc03

080012c4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012cc:	230f      	movs	r3, #15
 80012ce:	18fb      	adds	r3, r7, r3
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2204      	movs	r2, #4
 80012dc:	4013      	ands	r3, r2
 80012de:	d156      	bne.n	800138e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2250      	movs	r2, #80	@ 0x50
 80012e4:	5c9b      	ldrb	r3, [r3, r2]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Start_IT+0x2a>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e056      	b.n	800139c <HAL_ADC_Start_IT+0xd8>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2250      	movs	r2, #80	@ 0x50
 80012f2:	2101      	movs	r1, #1
 80012f4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d007      	beq.n	800130e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80012fe:	230f      	movs	r3, #15
 8001300:	18fc      	adds	r4, r7, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	0018      	movs	r0, r3
 8001306:	f000 f99b 	bl	8001640 <ADC_Enable>
 800130a:	0003      	movs	r3, r0
 800130c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800130e:	230f      	movs	r3, #15
 8001310:	18fb      	adds	r3, r7, r3
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d13e      	bne.n	8001396 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131c:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <HAL_ADC_Start_IT+0xe0>)
 800131e:	4013      	ands	r3, r2
 8001320:	2280      	movs	r2, #128	@ 0x80
 8001322:	0052      	lsls	r2, r2, #1
 8001324:	431a      	orrs	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2250      	movs	r2, #80	@ 0x50
 8001334:	2100      	movs	r1, #0
 8001336:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	221c      	movs	r2, #28
 800133e:	601a      	str	r2, [r3, #0]

      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */
      switch (hadc->Init.EOCSelection)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	2b08      	cmp	r3, #8
 8001346:	d110      	bne.n	800136a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2104      	movs	r1, #4
 8001354:	438a      	bics	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2118      	movs	r1, #24
 8001364:	430a      	orrs	r2, r1
 8001366:	605a      	str	r2, [r3, #4]
          break;
 8001368:	e008      	b.n	800137c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	211c      	movs	r1, #28
 8001376:	430a      	orrs	r2, r1
 8001378:	605a      	str	r2, [r3, #4]
          break;
 800137a:	46c0      	nop			@ (mov r8, r8)

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2104      	movs	r1, #4
 8001388:	430a      	orrs	r2, r1
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	e003      	b.n	8001396 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800138e:	230f      	movs	r3, #15
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	2202      	movs	r2, #2
 8001394:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001396:	230f      	movs	r3, #15
 8001398:	18fb      	adds	r3, r7, r3
 800139a:	781b      	ldrb	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b005      	add	sp, #20
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	fffff0fe 	.word	0xfffff0fe

080013a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d003      	beq.n	80013e8 <HAL_ADC_IRQHandler+0x28>
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d107      	bne.n	80013f8 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2208      	movs	r2, #8
 80013ec:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80013ee:	d04e      	beq.n	800148e <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2208      	movs	r2, #8
 80013f4:	4013      	ands	r3, r2
 80013f6:	d04a      	beq.n	800148e <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fc:	2210      	movs	r2, #16
 80013fe:	4013      	ands	r3, r2
 8001400:	d106      	bne.n	8001410 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001406:	2280      	movs	r2, #128	@ 0x80
 8001408:	0092      	lsls	r2, r2, #2
 800140a:	431a      	orrs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	23c0      	movs	r3, #192	@ 0xc0
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4013      	ands	r3, r2
 800141c:	d12b      	bne.n	8001476 <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2220      	movs	r2, #32
 8001422:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001424:	2b00      	cmp	r3, #0
 8001426:	d126      	bne.n	8001476 <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2208      	movs	r2, #8
 800142c:	4013      	ands	r3, r2
 800142e:	d022      	beq.n	8001476 <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2204      	movs	r2, #4
 8001438:	4013      	ands	r3, r2
 800143a:	d110      	bne.n	800145e <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	210c      	movs	r1, #12
 8001448:	438a      	bics	r2, r1
 800144a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001450:	4a2f      	ldr	r2, [pc, #188]	@ (8001510 <HAL_ADC_IRQHandler+0x150>)
 8001452:	4013      	ands	r3, r2
 8001454:	2201      	movs	r2, #1
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	655a      	str	r2, [r3, #84]	@ 0x54
 800145c:	e00b      	b.n	8001476 <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001462:	2220      	movs	r2, #32
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	2201      	movs	r2, #1
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff f8eb 	bl	8000654 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d003      	beq.n	800148e <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	4013      	ands	r3, r2
 8001494:	d012      	beq.n	80014bc <HAL_ADC_IRQHandler+0xfc>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2280      	movs	r2, #128	@ 0x80
 800149a:	4013      	ands	r3, r2
 800149c:	d00e      	beq.n	80014bc <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	0252      	lsls	r2, r2, #9
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f000 f830 	bl	8001514 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2280      	movs	r2, #128	@ 0x80
 80014ba:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2210      	movs	r2, #16
 80014c0:	4013      	ands	r3, r2
 80014c2:	d020      	beq.n	8001506 <HAL_ADC_IRQHandler+0x146>
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2210      	movs	r2, #16
 80014c8:	4013      	ands	r3, r2
 80014ca:	d01c      	beq.n	8001506 <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d10d      	bne.n	80014fe <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e6:	2202      	movs	r2, #2
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2210      	movs	r2, #16
 80014f4:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f000 f813 	bl	8001524 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2210      	movs	r2, #16
 8001504:	601a      	str	r2, [r3, #0]
  }

}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b004      	add	sp, #16
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			@ (mov r8, r8)
 8001510:	fffffefe 	.word	0xfffffefe

08001514 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b002      	add	sp, #8
 8001522:	bd80      	pop	{r7, pc}

08001524 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b002      	add	sp, #8
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2250      	movs	r2, #80	@ 0x50
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d101      	bne.n	800154c <HAL_ADC_ConfigChannel+0x18>
 8001548:	2302      	movs	r3, #2
 800154a:	e06c      	b.n	8001626 <HAL_ADC_ConfigChannel+0xf2>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2250      	movs	r2, #80	@ 0x50
 8001550:	2101      	movs	r1, #1
 8001552:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2204      	movs	r2, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d00b      	beq.n	8001578 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001564:	2220      	movs	r2, #32
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2250      	movs	r2, #80	@ 0x50
 8001570:	2100      	movs	r1, #0
 8001572:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e056      	b.n	8001626 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	4a2c      	ldr	r2, [pc, #176]	@ (8001630 <HAL_ADC_ConfigChannel+0xfc>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d028      	beq.n	80015d4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	035b      	lsls	r3, r3, #13
 800158e:	0b5a      	lsrs	r2, r3, #13
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	2380      	movs	r3, #128	@ 0x80
 800159e:	02db      	lsls	r3, r3, #11
 80015a0:	4013      	ands	r3, r2
 80015a2:	d009      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 80015aa:	2180      	movs	r1, #128	@ 0x80
 80015ac:	0409      	lsls	r1, r1, #16
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015b2:	200a      	movs	r0, #10
 80015b4:	f000 f8ac 	bl	8001710 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	029b      	lsls	r3, r3, #10
 80015c0:	4013      	ands	r3, r2
 80015c2:	d02b      	beq.n	800161c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 80015ca:	2180      	movs	r1, #128	@ 0x80
 80015cc:	03c9      	lsls	r1, r1, #15
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e023      	b.n	800161c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	035b      	lsls	r3, r3, #13
 80015e0:	0b5b      	lsrs	r3, r3, #13
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2380      	movs	r3, #128	@ 0x80
 80015f2:	02db      	lsls	r3, r3, #11
 80015f4:	4013      	ands	r3, r2
 80015f6:	d005      	beq.n	8001604 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 80015fe:	490e      	ldr	r1, [pc, #56]	@ (8001638 <HAL_ADC_ConfigChannel+0x104>)
 8001600:	400a      	ands	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	d005      	beq.n	800161c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <HAL_ADC_ConfigChannel+0x100>)
 8001616:	4909      	ldr	r1, [pc, #36]	@ (800163c <HAL_ADC_ConfigChannel+0x108>)
 8001618:	400a      	ands	r2, r1
 800161a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2250      	movs	r2, #80	@ 0x50
 8001620:	2100      	movs	r1, #0
 8001622:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	00001001 	.word	0x00001001
 8001634:	40012708 	.word	0x40012708
 8001638:	ff7fffff 	.word	0xff7fffff
 800163c:	ffbfffff 	.word	0xffbfffff

08001640 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2203      	movs	r2, #3
 8001654:	4013      	ands	r3, r2
 8001656:	2b01      	cmp	r3, #1
 8001658:	d108      	bne.n	800166c <ADC_Enable+0x2c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2201      	movs	r2, #1
 8001662:	4013      	ands	r3, r2
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <ADC_Enable+0x2c>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <ADC_Enable+0x2e>
 800166c:	2300      	movs	r3, #0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d146      	bne.n	8001700 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	4a24      	ldr	r2, [pc, #144]	@ (800170c <ADC_Enable+0xcc>)
 800167a:	4013      	ands	r3, r2
 800167c:	d00d      	beq.n	800169a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001682:	2210      	movs	r2, #16
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	2201      	movs	r2, #1
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e033      	b.n	8001702 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f000 f830 	bl	8001710 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fc66 	bl	8000f80 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016b8:	e01b      	b.n	80016f2 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016ba:	f7ff fc61 	bl	8000f80 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b0a      	cmp	r3, #10
 80016c6:	d914      	bls.n	80016f2 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2201      	movs	r2, #1
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d00d      	beq.n	80016f2 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016da:	2210      	movs	r2, #16
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e6:	2201      	movs	r2, #1
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e007      	b.n	8001702 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d1dc      	bne.n	80016ba <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			@ (mov r8, r8)
 800170c:	80000017 	.word	0x80000017

08001710 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <ADC_DelayMicroSecond+0x38>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	490b      	ldr	r1, [pc, #44]	@ (800174c <ADC_DelayMicroSecond+0x3c>)
 800171e:	0018      	movs	r0, r3
 8001720:	f7fe fcf2 	bl	8000108 <__udivsi3>
 8001724:	0003      	movs	r3, r0
 8001726:	001a      	movs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4353      	muls	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800172e:	e002      	b.n	8001736 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3b01      	subs	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f9      	bne.n	8001730 <ADC_DelayMicroSecond+0x20>
  }
}
 800173c:	46c0      	nop			@ (mov r8, r8)
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	20000004 	.word	0x20000004
 800174c:	000f4240 	.word	0x000f4240

08001750 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	0002      	movs	r2, r0
 8001758:	1dfb      	adds	r3, r7, #7
 800175a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b7f      	cmp	r3, #127	@ 0x7f
 8001762:	d809      	bhi.n	8001778 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001764:	1dfb      	adds	r3, r7, #7
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	001a      	movs	r2, r3
 800176a:	231f      	movs	r3, #31
 800176c:	401a      	ands	r2, r3
 800176e:	4b04      	ldr	r3, [pc, #16]	@ (8001780 <__NVIC_EnableIRQ+0x30>)
 8001770:	2101      	movs	r1, #1
 8001772:	4091      	lsls	r1, r2
 8001774:	000a      	movs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]
  }
}
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	1dfb      	adds	r3, r7, #7
 8001790:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b7f      	cmp	r3, #127	@ 0x7f
 8001798:	d828      	bhi.n	80017ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800179a:	4a2f      	ldr	r2, [pc, #188]	@ (8001858 <__NVIC_SetPriority+0xd4>)
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	33c0      	adds	r3, #192	@ 0xc0
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	589b      	ldr	r3, [r3, r2]
 80017aa:	1dfa      	adds	r2, r7, #7
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	0011      	movs	r1, r2
 80017b0:	2203      	movs	r2, #3
 80017b2:	400a      	ands	r2, r1
 80017b4:	00d2      	lsls	r2, r2, #3
 80017b6:	21ff      	movs	r1, #255	@ 0xff
 80017b8:	4091      	lsls	r1, r2
 80017ba:	000a      	movs	r2, r1
 80017bc:	43d2      	mvns	r2, r2
 80017be:	401a      	ands	r2, r3
 80017c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	019b      	lsls	r3, r3, #6
 80017c6:	22ff      	movs	r2, #255	@ 0xff
 80017c8:	401a      	ands	r2, r3
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	0018      	movs	r0, r3
 80017d0:	2303      	movs	r3, #3
 80017d2:	4003      	ands	r3, r0
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d8:	481f      	ldr	r0, [pc, #124]	@ (8001858 <__NVIC_SetPriority+0xd4>)
 80017da:	1dfb      	adds	r3, r7, #7
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	430a      	orrs	r2, r1
 80017e4:	33c0      	adds	r3, #192	@ 0xc0
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017ea:	e031      	b.n	8001850 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ec:	4a1b      	ldr	r2, [pc, #108]	@ (800185c <__NVIC_SetPriority+0xd8>)
 80017ee:	1dfb      	adds	r3, r7, #7
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	0019      	movs	r1, r3
 80017f4:	230f      	movs	r3, #15
 80017f6:	400b      	ands	r3, r1
 80017f8:	3b08      	subs	r3, #8
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3306      	adds	r3, #6
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	18d3      	adds	r3, r2, r3
 8001802:	3304      	adds	r3, #4
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	1dfa      	adds	r2, r7, #7
 8001808:	7812      	ldrb	r2, [r2, #0]
 800180a:	0011      	movs	r1, r2
 800180c:	2203      	movs	r2, #3
 800180e:	400a      	ands	r2, r1
 8001810:	00d2      	lsls	r2, r2, #3
 8001812:	21ff      	movs	r1, #255	@ 0xff
 8001814:	4091      	lsls	r1, r2
 8001816:	000a      	movs	r2, r1
 8001818:	43d2      	mvns	r2, r2
 800181a:	401a      	ands	r2, r3
 800181c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	22ff      	movs	r2, #255	@ 0xff
 8001824:	401a      	ands	r2, r3
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	0018      	movs	r0, r3
 800182c:	2303      	movs	r3, #3
 800182e:	4003      	ands	r3, r0
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001834:	4809      	ldr	r0, [pc, #36]	@ (800185c <__NVIC_SetPriority+0xd8>)
 8001836:	1dfb      	adds	r3, r7, #7
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	001c      	movs	r4, r3
 800183c:	230f      	movs	r3, #15
 800183e:	4023      	ands	r3, r4
 8001840:	3b08      	subs	r3, #8
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	430a      	orrs	r2, r1
 8001846:	3306      	adds	r3, #6
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	18c3      	adds	r3, r0, r3
 800184c:	3304      	adds	r3, #4
 800184e:	601a      	str	r2, [r3, #0]
}
 8001850:	46c0      	nop			@ (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b003      	add	sp, #12
 8001856:	bd90      	pop	{r4, r7, pc}
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	1e5a      	subs	r2, r3, #1
 800186c:	2380      	movs	r3, #128	@ 0x80
 800186e:	045b      	lsls	r3, r3, #17
 8001870:	429a      	cmp	r2, r3
 8001872:	d301      	bcc.n	8001878 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001874:	2301      	movs	r3, #1
 8001876:	e010      	b.n	800189a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001878:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <SysTick_Config+0x44>)
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	3a01      	subs	r2, #1
 800187e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001880:	2301      	movs	r3, #1
 8001882:	425b      	negs	r3, r3
 8001884:	2103      	movs	r1, #3
 8001886:	0018      	movs	r0, r3
 8001888:	f7ff ff7c 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <SysTick_Config+0x44>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <SysTick_Config+0x44>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	210f      	movs	r1, #15
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	1c02      	adds	r2, r0, #0
 80018b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	187b      	adds	r3, r7, r1
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	46c0      	nop			@ (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b004      	add	sp, #16
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	0002      	movs	r2, r0
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018de:	1dfb      	adds	r3, r7, #7
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7ff ff33 	bl	8001750 <__NVIC_EnableIRQ>
}
 80018ea:	46c0      	nop			@ (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b002      	add	sp, #8
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ffaf 	bl	8001860 <SysTick_Config>
 8001902:	0003      	movs	r3, r0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b002      	add	sp, #8
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e061      	b.n	80019e2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a32      	ldr	r2, [pc, #200]	@ (80019ec <HAL_DMA_Init+0xe0>)
 8001924:	4694      	mov	ip, r2
 8001926:	4463      	add	r3, ip
 8001928:	2114      	movs	r1, #20
 800192a:	0018      	movs	r0, r3
 800192c:	f7fe fbec 	bl	8000108 <__udivsi3>
 8001930:	0003      	movs	r3, r0
 8001932:	009a      	lsls	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a2d      	ldr	r2, [pc, #180]	@ (80019f0 <HAL_DMA_Init+0xe4>)
 800193c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2225      	movs	r2, #37	@ 0x25
 8001942:	2102      	movs	r1, #2
 8001944:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4a28      	ldr	r2, [pc, #160]	@ (80019f4 <HAL_DMA_Init+0xe8>)
 8001952:	4013      	ands	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800195e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800196a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	01db      	lsls	r3, r3, #7
 8001994:	429a      	cmp	r2, r3
 8001996:	d018      	beq.n	80019ca <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <HAL_DMA_Init+0xec>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	211c      	movs	r1, #28
 80019a2:	400b      	ands	r3, r1
 80019a4:	210f      	movs	r1, #15
 80019a6:	4099      	lsls	r1, r3
 80019a8:	000b      	movs	r3, r1
 80019aa:	43d9      	mvns	r1, r3
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <HAL_DMA_Init+0xec>)
 80019ae:	400a      	ands	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_DMA_Init+0xec>)
 80019b4:	6819      	ldr	r1, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	201c      	movs	r0, #28
 80019c0:	4003      	ands	r3, r0
 80019c2:	409a      	lsls	r2, r3
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <HAL_DMA_Init+0xec>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2225      	movs	r2, #37	@ 0x25
 80019d4:	2101      	movs	r1, #1
 80019d6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	@ 0x24
 80019dc:	2100      	movs	r1, #0
 80019de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	0018      	movs	r0, r3
 80019e4:	46bd      	mov	sp, r7
 80019e6:	b004      	add	sp, #16
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	bffdfff8 	.word	0xbffdfff8
 80019f0:	40020000 	.word	0x40020000
 80019f4:	ffff800f 	.word	0xffff800f
 80019f8:	400200a8 	.word	0x400200a8

080019fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0a:	2317      	movs	r3, #23
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2224      	movs	r2, #36	@ 0x24
 8001a16:	5c9b      	ldrb	r3, [r3, r2]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <HAL_DMA_Start_IT+0x24>
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	e04f      	b.n	8001ac0 <HAL_DMA_Start_IT+0xc4>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2224      	movs	r2, #36	@ 0x24
 8001a24:	2101      	movs	r1, #1
 8001a26:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2225      	movs	r2, #37	@ 0x25
 8001a2c:	5c9b      	ldrb	r3, [r3, r2]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d13a      	bne.n	8001aaa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2225      	movs	r2, #37	@ 0x25
 8001a38:	2102      	movs	r1, #2
 8001a3a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	438a      	bics	r2, r1
 8001a50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	68f8      	ldr	r0, [r7, #12]
 8001a5a:	f000 f8e3 	bl	8001c24 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	210e      	movs	r1, #14
 8001a72:	430a      	orrs	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e00f      	b.n	8001a98 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2104      	movs	r1, #4
 8001a84:	438a      	bics	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	210a      	movs	r1, #10
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	e007      	b.n	8001aba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2224      	movs	r2, #36	@ 0x24
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001ab2:	2317      	movs	r3, #23
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001aba:	2317      	movs	r3, #23
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	781b      	ldrb	r3, [r3, #0]
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b006      	add	sp, #24
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae4:	221c      	movs	r2, #28
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2204      	movs	r2, #4
 8001aea:	409a      	lsls	r2, r3
 8001aec:	0013      	movs	r3, r2
 8001aee:	68fa      	ldr	r2, [r7, #12]
 8001af0:	4013      	ands	r3, r2
 8001af2:	d026      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x7a>
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2204      	movs	r2, #4
 8001af8:	4013      	ands	r3, r2
 8001afa:	d022      	beq.n	8001b42 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2220      	movs	r2, #32
 8001b04:	4013      	ands	r3, r2
 8001b06:	d107      	bne.n	8001b18 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2104      	movs	r1, #4
 8001b14:	438a      	bics	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1c:	221c      	movs	r2, #28
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	2104      	movs	r1, #4
 8001b26:	4091      	lsls	r1, r2
 8001b28:	000a      	movs	r2, r1
 8001b2a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d100      	bne.n	8001b36 <HAL_DMA_IRQHandler+0x6e>
 8001b34:	e071      	b.n	8001c1a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	0010      	movs	r0, r2
 8001b3e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001b40:	e06b      	b.n	8001c1a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	221c      	movs	r2, #28
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	d02d      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xea>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2202      	movs	r2, #2
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d029      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2220      	movs	r2, #32
 8001b66:	4013      	ands	r3, r2
 8001b68:	d10b      	bne.n	8001b82 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	210a      	movs	r1, #10
 8001b76:	438a      	bics	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2225      	movs	r2, #37	@ 0x25
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	221c      	movs	r2, #28
 8001b88:	401a      	ands	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	2102      	movs	r1, #2
 8001b90:	4091      	lsls	r1, r2
 8001b92:	000a      	movs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2224      	movs	r2, #36	@ 0x24
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d039      	beq.n	8001c1a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	0010      	movs	r0, r2
 8001bae:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001bb0:	e033      	b.n	8001c1a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	221c      	movs	r2, #28
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2208      	movs	r2, #8
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d02a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x154>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d026      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	210e      	movs	r1, #14
 8001bda:	438a      	bics	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	221c      	movs	r2, #28
 8001be4:	401a      	ands	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	2101      	movs	r1, #1
 8001bec:	4091      	lsls	r1, r2
 8001bee:	000a      	movs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2225      	movs	r2, #37	@ 0x25
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2224      	movs	r2, #36	@ 0x24
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	0010      	movs	r0, r2
 8001c18:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	46c0      	nop			@ (mov r8, r8)
}
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b004      	add	sp, #16
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	221c      	movs	r2, #28
 8001c38:	401a      	ands	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4091      	lsls	r1, r2
 8001c42:	000a      	movs	r2, r1
 8001c44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b10      	cmp	r3, #16
 8001c54:	d108      	bne.n	8001c68 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c66:	e007      	b.n	8001c78 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	60da      	str	r2, [r3, #12]
}
 8001c78:	46c0      	nop			@ (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b004      	add	sp, #16
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001c96:	e149      	b.n	8001f2c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4091      	lsls	r1, r2
 8001ca2:	000a      	movs	r2, r1
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d100      	bne.n	8001cb0 <HAL_GPIO_Init+0x30>
 8001cae:	e13a      	b.n	8001f26 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	0013      	movs	r3, r2
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
 8001d04:	0013      	movs	r3, r2
 8001d06:	43da      	mvns	r2, r3
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	2201      	movs	r2, #1
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	0013      	movs	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d017      	beq.n	8001d66 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	43da      	mvns	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	409a      	lsls	r2, r3
 8001d58:	0013      	movs	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2207      	movs	r2, #7
 8001d84:	4013      	ands	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2107      	movs	r1, #7
 8001d9e:	400b      	ands	r3, r1
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	409a      	lsls	r2, r3
 8001da4:	0013      	movs	r3, r2
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	6939      	ldr	r1, [r7, #16]
 8001db8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	0013      	movs	r3, r2
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	401a      	ands	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	23c0      	movs	r3, #192	@ 0xc0
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	4013      	ands	r3, r2
 8001df8:	d100      	bne.n	8001dfc <HAL_GPIO_Init+0x17c>
 8001dfa:	e094      	b.n	8001f26 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b51      	ldr	r3, [pc, #324]	@ (8001f44 <HAL_GPIO_Init+0x2c4>)
 8001dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e00:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_GPIO_Init+0x2c4>)
 8001e02:	2101      	movs	r1, #1
 8001e04:	430a      	orrs	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e08:	4a4f      	ldr	r2, [pc, #316]	@ (8001f48 <HAL_GPIO_Init+0x2c8>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	589b      	ldr	r3, [r3, r2]
 8001e14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	2203      	movs	r2, #3
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	409a      	lsls	r2, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	43da      	mvns	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	23a0      	movs	r3, #160	@ 0xa0
 8001e30:	05db      	lsls	r3, r3, #23
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d013      	beq.n	8001e5e <HAL_GPIO_Init+0x1de>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a44      	ldr	r2, [pc, #272]	@ (8001f4c <HAL_GPIO_Init+0x2cc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d00d      	beq.n	8001e5a <HAL_GPIO_Init+0x1da>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a43      	ldr	r2, [pc, #268]	@ (8001f50 <HAL_GPIO_Init+0x2d0>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d007      	beq.n	8001e56 <HAL_GPIO_Init+0x1d6>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a42      	ldr	r2, [pc, #264]	@ (8001f54 <HAL_GPIO_Init+0x2d4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d101      	bne.n	8001e52 <HAL_GPIO_Init+0x1d2>
 8001e4e:	2305      	movs	r3, #5
 8001e50:	e006      	b.n	8001e60 <HAL_GPIO_Init+0x1e0>
 8001e52:	2306      	movs	r3, #6
 8001e54:	e004      	b.n	8001e60 <HAL_GPIO_Init+0x1e0>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e002      	b.n	8001e60 <HAL_GPIO_Init+0x1e0>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_GPIO_Init+0x1e0>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	2103      	movs	r1, #3
 8001e64:	400a      	ands	r2, r1
 8001e66:	0092      	lsls	r2, r2, #2
 8001e68:	4093      	lsls	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e70:	4935      	ldr	r1, [pc, #212]	@ (8001f48 <HAL_GPIO_Init+0x2c8>)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	3302      	adds	r3, #2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7e:	4b36      	ldr	r3, [pc, #216]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	43da      	mvns	r2, r3
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	035b      	lsls	r3, r3, #13
 8001e96:	4013      	ands	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	039b      	lsls	r3, r3, #14
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001efc:	4b16      	ldr	r3, [pc, #88]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	025b      	lsls	r3, r3, #9
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_GPIO_Init+0x2d8>)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	40da      	lsrs	r2, r3
 8001f34:	1e13      	subs	r3, r2, #0
 8001f36:	d000      	beq.n	8001f3a <HAL_GPIO_Init+0x2ba>
 8001f38:	e6ae      	b.n	8001c98 <HAL_GPIO_Init+0x18>
  }
}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	46c0      	nop			@ (mov r8, r8)
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	b006      	add	sp, #24
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	50000400 	.word	0x50000400
 8001f50:	50000800 	.word	0x50000800
 8001f54:	50001c00 	.word	0x50001c00
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	0008      	movs	r0, r1
 8001f66:	0011      	movs	r1, r2
 8001f68:	1cbb      	adds	r3, r7, #2
 8001f6a:	1c02      	adds	r2, r0, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	1c7b      	adds	r3, r7, #1
 8001f70:	1c0a      	adds	r2, r1, #0
 8001f72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	1c7b      	adds	r3, r7, #1
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7c:	1cbb      	adds	r3, r7, #2
 8001f7e:	881a      	ldrh	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001f84:	e003      	b.n	8001f8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001f86:	1cbb      	adds	r3, r7, #2
 8001f88:	881a      	ldrh	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b5b0      	push	{r4, r5, r7, lr}
 8001f9a:	b08a      	sub	sp, #40	@ 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f000 fb6c 	bl	8002684 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fac:	4bc8      	ldr	r3, [pc, #800]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	220c      	movs	r2, #12
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb6:	4bc6      	ldr	r3, [pc, #792]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	2380      	movs	r3, #128	@ 0x80
 8001fbc:	025b      	lsls	r3, r3, #9
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d100      	bne.n	8001fce <HAL_RCC_OscConfig+0x36>
 8001fcc:	e07d      	b.n	80020ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	d007      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d112      	bne.n	8002000 <HAL_RCC_OscConfig+0x68>
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	2380      	movs	r3, #128	@ 0x80
 8001fde:	025b      	lsls	r3, r3, #9
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d10d      	bne.n	8002000 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	4bba      	ldr	r3, [pc, #744]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	029b      	lsls	r3, r3, #10
 8001fec:	4013      	ands	r3, r2
 8001fee:	d100      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x5a>
 8001ff0:	e06a      	b.n	80020c8 <HAL_RCC_OscConfig+0x130>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d166      	bne.n	80020c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f000 fb42 	bl	8002684 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	025b      	lsls	r3, r3, #9
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x84>
 800200c:	4bb0      	ldr	r3, [pc, #704]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4baf      	ldr	r3, [pc, #700]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002012:	2180      	movs	r1, #128	@ 0x80
 8002014:	0249      	lsls	r1, r1, #9
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e027      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	23a0      	movs	r3, #160	@ 0xa0
 8002022:	02db      	lsls	r3, r3, #11
 8002024:	429a      	cmp	r2, r3
 8002026:	d10e      	bne.n	8002046 <HAL_RCC_OscConfig+0xae>
 8002028:	4ba9      	ldr	r3, [pc, #676]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4ba8      	ldr	r3, [pc, #672]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800202e:	2180      	movs	r1, #128	@ 0x80
 8002030:	02c9      	lsls	r1, r1, #11
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	4ba6      	ldr	r3, [pc, #664]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	4ba5      	ldr	r3, [pc, #660]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800203c:	2180      	movs	r1, #128	@ 0x80
 800203e:	0249      	lsls	r1, r1, #9
 8002040:	430a      	orrs	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e012      	b.n	800206c <HAL_RCC_OscConfig+0xd4>
 8002046:	4ba2      	ldr	r3, [pc, #648]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4ba1      	ldr	r3, [pc, #644]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800204c:	49a1      	ldr	r1, [pc, #644]	@ (80022d4 <HAL_RCC_OscConfig+0x33c>)
 800204e:	400a      	ands	r2, r1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	4b9f      	ldr	r3, [pc, #636]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	2380      	movs	r3, #128	@ 0x80
 8002058:	025b      	lsls	r3, r3, #9
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4b9b      	ldr	r3, [pc, #620]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b9a      	ldr	r3, [pc, #616]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002066:	499c      	ldr	r1, [pc, #624]	@ (80022d8 <HAL_RCC_OscConfig+0x340>)
 8002068:	400a      	ands	r2, r1
 800206a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d014      	beq.n	800209e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe ff84 	bl	8000f80 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207e:	f7fe ff7f 	bl	8000f80 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b64      	cmp	r3, #100	@ 0x64
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e2f9      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002090:	4b8f      	ldr	r3, [pc, #572]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	029b      	lsls	r3, r3, #10
 8002098:	4013      	ands	r3, r2
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0xe6>
 800209c:	e015      	b.n	80020ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe ff6f 	bl	8000f80 <HAL_GetTick>
 80020a2:	0003      	movs	r3, r0
 80020a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a8:	f7fe ff6a 	bl	8000f80 <HAL_GetTick>
 80020ac:	0002      	movs	r2, r0
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	@ 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e2e4      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ba:	4b85      	ldr	r3, [pc, #532]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	029b      	lsls	r3, r3, #10
 80020c2:	4013      	ands	r3, r2
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x110>
 80020c6:	e000      	b.n	80020ca <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2202      	movs	r2, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	d100      	bne.n	80020d6 <HAL_RCC_OscConfig+0x13e>
 80020d4:	e099      	b.n	800220a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020de:	2220      	movs	r2, #32
 80020e0:	4013      	ands	r3, r2
 80020e2:	d009      	beq.n	80020f8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020e4:	4b7a      	ldr	r3, [pc, #488]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b79      	ldr	r3, [pc, #484]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80020ea:	2120      	movs	r1, #32
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	2220      	movs	r2, #32
 80020f4:	4393      	bics	r3, r2
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d13e      	bne.n	8002182 <HAL_RCC_OscConfig+0x1ea>
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13b      	bne.n	8002182 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800210a:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_RCC_OscConfig+0x186>
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e2b2      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b6c      	ldr	r3, [pc, #432]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	4a6e      	ldr	r2, [pc, #440]	@ (80022dc <HAL_RCC_OscConfig+0x344>)
 8002124:	4013      	ands	r3, r2
 8002126:	0019      	movs	r1, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	021a      	lsls	r2, r3, #8
 800212e:	4b68      	ldr	r3, [pc, #416]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002134:	4b66      	ldr	r3, [pc, #408]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2209      	movs	r2, #9
 800213a:	4393      	bics	r3, r2
 800213c:	0019      	movs	r1, r3
 800213e:	4b64      	ldr	r3, [pc, #400]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002142:	430a      	orrs	r2, r1
 8002144:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002146:	f000 fbeb 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 800214a:	0001      	movs	r1, r0
 800214c:	4b60      	ldr	r3, [pc, #384]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	220f      	movs	r2, #15
 8002154:	4013      	ands	r3, r2
 8002156:	4a62      	ldr	r2, [pc, #392]	@ (80022e0 <HAL_RCC_OscConfig+0x348>)
 8002158:	5cd3      	ldrb	r3, [r2, r3]
 800215a:	000a      	movs	r2, r1
 800215c:	40da      	lsrs	r2, r3
 800215e:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <HAL_RCC_OscConfig+0x34c>)
 8002160:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002162:	4b61      	ldr	r3, [pc, #388]	@ (80022e8 <HAL_RCC_OscConfig+0x350>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2513      	movs	r5, #19
 8002168:	197c      	adds	r4, r7, r5
 800216a:	0018      	movs	r0, r3
 800216c:	f7fe fec2 	bl	8000ef4 <HAL_InitTick>
 8002170:	0003      	movs	r3, r0
 8002172:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002174:	197b      	adds	r3, r7, r5
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d046      	beq.n	800220a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800217c:	197b      	adds	r3, r7, r5
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	e280      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d027      	beq.n	80021d8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002188:	4b51      	ldr	r3, [pc, #324]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2209      	movs	r2, #9
 800218e:	4393      	bics	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	4b4f      	ldr	r3, [pc, #316]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002196:	430a      	orrs	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fef1 	bl	8000f80 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a4:	f7fe feec 	bl	8000f80 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e266      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b6:	4b46      	ldr	r3, [pc, #280]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	4013      	ands	r3, r2
 80021be:	d0f1      	beq.n	80021a4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c0:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a45      	ldr	r2, [pc, #276]	@ (80022dc <HAL_RCC_OscConfig+0x344>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	0019      	movs	r1, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	021a      	lsls	r2, r3, #8
 80021d0:	4b3f      	ldr	r3, [pc, #252]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	e018      	b.n	800220a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d8:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b3c      	ldr	r3, [pc, #240]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7fe fecc 	bl	8000f80 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ee:	f7fe fec7 	bl	8000f80 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e241      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002200:	4b33      	ldr	r3, [pc, #204]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d1f1      	bne.n	80021ee <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2210      	movs	r2, #16
 8002210:	4013      	ands	r3, r2
 8002212:	d100      	bne.n	8002216 <HAL_RCC_OscConfig+0x27e>
 8002214:	e0a1      	b.n	800235a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d140      	bne.n	800229e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800221c:	4b2c      	ldr	r3, [pc, #176]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x29c>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e227      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002234:	4b26      	ldr	r3, [pc, #152]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	4a2c      	ldr	r2, [pc, #176]	@ (80022ec <HAL_RCC_OscConfig+0x354>)
 800223a:	4013      	ands	r3, r2
 800223c:	0019      	movs	r1, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002244:	430a      	orrs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002248:	4b21      	ldr	r3, [pc, #132]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	0a19      	lsrs	r1, r3, #8
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	061a      	lsls	r2, r3, #24
 8002256:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 8002258:	430a      	orrs	r2, r1
 800225a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	0b5b      	lsrs	r3, r3, #13
 8002262:	3301      	adds	r3, #1
 8002264:	2280      	movs	r2, #128	@ 0x80
 8002266:	0212      	lsls	r2, r2, #8
 8002268:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800226a:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	210f      	movs	r1, #15
 8002272:	400b      	ands	r3, r1
 8002274:	491a      	ldr	r1, [pc, #104]	@ (80022e0 <HAL_RCC_OscConfig+0x348>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800227a:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <HAL_RCC_OscConfig+0x34c>)
 800227c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800227e:	4b1a      	ldr	r3, [pc, #104]	@ (80022e8 <HAL_RCC_OscConfig+0x350>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2513      	movs	r5, #19
 8002284:	197c      	adds	r4, r7, r5
 8002286:	0018      	movs	r0, r3
 8002288:	f7fe fe34 	bl	8000ef4 <HAL_InitTick>
 800228c:	0003      	movs	r3, r0
 800228e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002290:	197b      	adds	r3, r7, r5
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d060      	beq.n	800235a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002298:	197b      	adds	r3, r7, r5
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	e1f2      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03f      	beq.n	8002326 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022a6:	4b0a      	ldr	r3, [pc, #40]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <HAL_RCC_OscConfig+0x338>)
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	0049      	lsls	r1, r1, #1
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe fe64 	bl	8000f80 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022bc:	e018      	b.n	80022f0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022be:	f7fe fe5f 	bl	8000f80 <HAL_GetTick>
 80022c2:	0002      	movs	r2, r0
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d911      	bls.n	80022f0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1d9      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
 80022d0:	40021000 	.word	0x40021000
 80022d4:	fffeffff 	.word	0xfffeffff
 80022d8:	fffbffff 	.word	0xfffbffff
 80022dc:	ffffe0ff 	.word	0xffffe0ff
 80022e0:	08003b90 	.word	0x08003b90
 80022e4:	20000004 	.word	0x20000004
 80022e8:	20000008 	.word	0x20000008
 80022ec:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022f0:	4bc9      	ldr	r3, [pc, #804]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2380      	movs	r3, #128	@ 0x80
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0e0      	beq.n	80022be <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fc:	4bc6      	ldr	r3, [pc, #792]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4ac6      	ldr	r2, [pc, #792]	@ (800261c <HAL_RCC_OscConfig+0x684>)
 8002302:	4013      	ands	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1a      	ldr	r2, [r3, #32]
 800230a:	4bc3      	ldr	r3, [pc, #780]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002310:	4bc1      	ldr	r3, [pc, #772]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	0a19      	lsrs	r1, r3, #8
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	061a      	lsls	r2, r3, #24
 800231e:	4bbe      	ldr	r3, [pc, #760]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	e019      	b.n	800235a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002326:	4bbc      	ldr	r3, [pc, #752]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4bbb      	ldr	r3, [pc, #748]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800232c:	49bc      	ldr	r1, [pc, #752]	@ (8002620 <HAL_RCC_OscConfig+0x688>)
 800232e:	400a      	ands	r2, r1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe fe25 	bl	8000f80 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800233c:	f7fe fe20 	bl	8000f80 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e19a      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800234e:	4bb2      	ldr	r3, [pc, #712]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	@ 0x80
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2208      	movs	r2, #8
 8002360:	4013      	ands	r3, r2
 8002362:	d036      	beq.n	80023d2 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d019      	beq.n	80023a0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800236c:	4baa      	ldr	r3, [pc, #680]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800236e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002370:	4ba9      	ldr	r3, [pc, #676]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002372:	2101      	movs	r1, #1
 8002374:	430a      	orrs	r2, r1
 8002376:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7fe fe02 	bl	8000f80 <HAL_GetTick>
 800237c:	0003      	movs	r3, r0
 800237e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002382:	f7fe fdfd 	bl	8000f80 <HAL_GetTick>
 8002386:	0002      	movs	r2, r0
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e177      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002394:	4ba0      	ldr	r3, [pc, #640]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002398:	2202      	movs	r2, #2
 800239a:	4013      	ands	r3, r2
 800239c:	d0f1      	beq.n	8002382 <HAL_RCC_OscConfig+0x3ea>
 800239e:	e018      	b.n	80023d2 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80023a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023a4:	4b9c      	ldr	r3, [pc, #624]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80023a6:	2101      	movs	r1, #1
 80023a8:	438a      	bics	r2, r1
 80023aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f7fe fde8 	bl	8000f80 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b6:	f7fe fde3 	bl	8000f80 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e15d      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80023c8:	4b93      	ldr	r3, [pc, #588]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80023ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d1f1      	bne.n	80023b6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2204      	movs	r2, #4
 80023d8:	4013      	ands	r3, r2
 80023da:	d100      	bne.n	80023de <HAL_RCC_OscConfig+0x446>
 80023dc:	e0ae      	b.n	800253c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023de:	2023      	movs	r0, #35	@ 0x23
 80023e0:	183b      	adds	r3, r7, r0
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023e6:	4b8c      	ldr	r3, [pc, #560]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80023e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ea:	2380      	movs	r3, #128	@ 0x80
 80023ec:	055b      	lsls	r3, r3, #21
 80023ee:	4013      	ands	r3, r2
 80023f0:	d109      	bne.n	8002406 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f2:	4b89      	ldr	r3, [pc, #548]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80023f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023f6:	4b88      	ldr	r3, [pc, #544]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80023f8:	2180      	movs	r1, #128	@ 0x80
 80023fa:	0549      	lsls	r1, r1, #21
 80023fc:	430a      	orrs	r2, r1
 80023fe:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002400:	183b      	adds	r3, r7, r0
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002406:	4b87      	ldr	r3, [pc, #540]	@ (8002624 <HAL_RCC_OscConfig+0x68c>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	2380      	movs	r3, #128	@ 0x80
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4013      	ands	r3, r2
 8002410:	d11a      	bne.n	8002448 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002412:	4b84      	ldr	r3, [pc, #528]	@ (8002624 <HAL_RCC_OscConfig+0x68c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	4b83      	ldr	r3, [pc, #524]	@ (8002624 <HAL_RCC_OscConfig+0x68c>)
 8002418:	2180      	movs	r1, #128	@ 0x80
 800241a:	0049      	lsls	r1, r1, #1
 800241c:	430a      	orrs	r2, r1
 800241e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002420:	f7fe fdae 	bl	8000f80 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7fe fda9 	bl	8000f80 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	@ 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e123      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800243c:	4b79      	ldr	r3, [pc, #484]	@ (8002624 <HAL_RCC_OscConfig+0x68c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4013      	ands	r3, r2
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	2380      	movs	r3, #128	@ 0x80
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x4cc>
 8002454:	4b70      	ldr	r3, [pc, #448]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002456:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002458:	4b6f      	ldr	r3, [pc, #444]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800245a:	2180      	movs	r1, #128	@ 0x80
 800245c:	0049      	lsls	r1, r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	651a      	str	r2, [r3, #80]	@ 0x50
 8002462:	e031      	b.n	80024c8 <HAL_RCC_OscConfig+0x530>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10c      	bne.n	8002486 <HAL_RCC_OscConfig+0x4ee>
 800246c:	4b6a      	ldr	r3, [pc, #424]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800246e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002470:	4b69      	ldr	r3, [pc, #420]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002472:	496b      	ldr	r1, [pc, #428]	@ (8002620 <HAL_RCC_OscConfig+0x688>)
 8002474:	400a      	ands	r2, r1
 8002476:	651a      	str	r2, [r3, #80]	@ 0x50
 8002478:	4b67      	ldr	r3, [pc, #412]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800247a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800247c:	4b66      	ldr	r3, [pc, #408]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800247e:	496a      	ldr	r1, [pc, #424]	@ (8002628 <HAL_RCC_OscConfig+0x690>)
 8002480:	400a      	ands	r2, r1
 8002482:	651a      	str	r2, [r3, #80]	@ 0x50
 8002484:	e020      	b.n	80024c8 <HAL_RCC_OscConfig+0x530>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	23a0      	movs	r3, #160	@ 0xa0
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	429a      	cmp	r2, r3
 8002490:	d10e      	bne.n	80024b0 <HAL_RCC_OscConfig+0x518>
 8002492:	4b61      	ldr	r3, [pc, #388]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002494:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002496:	4b60      	ldr	r3, [pc, #384]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002498:	2180      	movs	r1, #128	@ 0x80
 800249a:	00c9      	lsls	r1, r1, #3
 800249c:	430a      	orrs	r2, r1
 800249e:	651a      	str	r2, [r3, #80]	@ 0x50
 80024a0:	4b5d      	ldr	r3, [pc, #372]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80024a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80024a6:	2180      	movs	r1, #128	@ 0x80
 80024a8:	0049      	lsls	r1, r1, #1
 80024aa:	430a      	orrs	r2, r1
 80024ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0x530>
 80024b0:	4b59      	ldr	r3, [pc, #356]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80024b2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024b4:	4b58      	ldr	r3, [pc, #352]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80024b6:	495a      	ldr	r1, [pc, #360]	@ (8002620 <HAL_RCC_OscConfig+0x688>)
 80024b8:	400a      	ands	r2, r1
 80024ba:	651a      	str	r2, [r3, #80]	@ 0x50
 80024bc:	4b56      	ldr	r3, [pc, #344]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80024be:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024c0:	4b55      	ldr	r3, [pc, #340]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80024c2:	4959      	ldr	r1, [pc, #356]	@ (8002628 <HAL_RCC_OscConfig+0x690>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d015      	beq.n	80024fc <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024d0:	f7fe fd56 	bl	8000f80 <HAL_GetTick>
 80024d4:	0003      	movs	r3, r0
 80024d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024d8:	e009      	b.n	80024ee <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024da:	f7fe fd51 	bl	8000f80 <HAL_GetTick>
 80024de:	0002      	movs	r2, r0
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	4a51      	ldr	r2, [pc, #324]	@ (800262c <HAL_RCC_OscConfig+0x694>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0ca      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80024f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d0ef      	beq.n	80024da <HAL_RCC_OscConfig+0x542>
 80024fa:	e014      	b.n	8002526 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fc:	f7fe fd40 	bl	8000f80 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002504:	e009      	b.n	800251a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7fe fd3b 	bl	8000f80 <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	4a46      	ldr	r2, [pc, #280]	@ (800262c <HAL_RCC_OscConfig+0x694>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0b4      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800251a:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800251c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800251e:	2380      	movs	r3, #128	@ 0x80
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4013      	ands	r3, r2
 8002524:	d1ef      	bne.n	8002506 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002526:	2323      	movs	r3, #35	@ 0x23
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b39      	ldr	r3, [pc, #228]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002532:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002534:	4b38      	ldr	r3, [pc, #224]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002536:	493e      	ldr	r1, [pc, #248]	@ (8002630 <HAL_RCC_OscConfig+0x698>)
 8002538:	400a      	ands	r2, r1
 800253a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	2b00      	cmp	r3, #0
 8002542:	d100      	bne.n	8002546 <HAL_RCC_OscConfig+0x5ae>
 8002544:	e09d      	b.n	8002682 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	d100      	bne.n	800254e <HAL_RCC_OscConfig+0x5b6>
 800254c:	e076      	b.n	800263c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002552:	2b02      	cmp	r3, #2
 8002554:	d145      	bne.n	80025e2 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b30      	ldr	r3, [pc, #192]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800255c:	4935      	ldr	r1, [pc, #212]	@ (8002634 <HAL_RCC_OscConfig+0x69c>)
 800255e:	400a      	ands	r2, r1
 8002560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe fd0d 	bl	8000f80 <HAL_GetTick>
 8002566:	0003      	movs	r3, r0
 8002568:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe fd08 	bl	8000f80 <HAL_GetTick>
 8002570:	0002      	movs	r2, r0
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e082      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800257e:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	049b      	lsls	r3, r3, #18
 8002586:	4013      	ands	r3, r2
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258a:	4b23      	ldr	r3, [pc, #140]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4a2a      	ldr	r2, [pc, #168]	@ (8002638 <HAL_RCC_OscConfig+0x6a0>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	431a      	orrs	r2, r3
 80025a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80025a6:	430a      	orrs	r2, r1
 80025a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80025b0:	2180      	movs	r1, #128	@ 0x80
 80025b2:	0449      	lsls	r1, r1, #17
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fce2 	bl	8000f80 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fcdd 	bl	8000f80 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e057      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80025d4:	4b10      	ldr	r3, [pc, #64]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	4013      	ands	r3, r2
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x62a>
 80025e0:	e04f      	b.n	8002682 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 80025e8:	4912      	ldr	r1, [pc, #72]	@ (8002634 <HAL_RCC_OscConfig+0x69c>)
 80025ea:	400a      	ands	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fcc7 	bl	8000f80 <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fcc2 	bl	8000f80 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e03c      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800260a:	4b03      	ldr	r3, [pc, #12]	@ (8002618 <HAL_RCC_OscConfig+0x680>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	4013      	ands	r3, r2
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x660>
 8002616:	e034      	b.n	8002682 <HAL_RCC_OscConfig+0x6ea>
 8002618:	40021000 	.word	0x40021000
 800261c:	ffff1fff 	.word	0xffff1fff
 8002620:	fffffeff 	.word	0xfffffeff
 8002624:	40007000 	.word	0x40007000
 8002628:	fffffbff 	.word	0xfffffbff
 800262c:	00001388 	.word	0x00001388
 8002630:	efffffff 	.word	0xefffffff
 8002634:	feffffff 	.word	0xfeffffff
 8002638:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e01d      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_RCC_OscConfig+0x6f4>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	429a      	cmp	r2, r3
 800265c:	d10f      	bne.n	800267e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	23f0      	movs	r3, #240	@ 0xf0
 8002662:	039b      	lsls	r3, r3, #14
 8002664:	401a      	ands	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d107      	bne.n	800267e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	23c0      	movs	r3, #192	@ 0xc0
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b00a      	add	sp, #40	@ 0x28
 800268a:	bdb0      	pop	{r4, r5, r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e128      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026a4:	4b96      	ldr	r3, [pc, #600]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4013      	ands	r3, r2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d91e      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b93      	ldr	r3, [pc, #588]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4393      	bics	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	4b90      	ldr	r3, [pc, #576]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fc5c 	bl	8000f80 <HAL_GetTick>
 80026c8:	0003      	movs	r3, r0
 80026ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026cc:	e009      	b.n	80026e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ce:	f7fe fc57 	bl	8000f80 <HAL_GetTick>
 80026d2:	0002      	movs	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	4a8a      	ldr	r2, [pc, #552]	@ (8002904 <HAL_RCC_ClockConfig+0x274>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e109      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b87      	ldr	r3, [pc, #540]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2201      	movs	r2, #1
 80026e8:	4013      	ands	r3, r2
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ee      	bne.n	80026ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2202      	movs	r2, #2
 80026f6:	4013      	ands	r3, r2
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026fa:	4b83      	ldr	r3, [pc, #524]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	22f0      	movs	r2, #240	@ 0xf0
 8002700:	4393      	bics	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 800270a:	430a      	orrs	r2, r1
 800270c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_ClockConfig+0x8a>
 8002718:	e089      	b.n	800282e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d107      	bne.n	8002732 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002722:	4b79      	ldr	r3, [pc, #484]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	2380      	movs	r3, #128	@ 0x80
 8002728:	029b      	lsls	r3, r3, #10
 800272a:	4013      	ands	r3, r2
 800272c:	d120      	bne.n	8002770 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e0e1      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b03      	cmp	r3, #3
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800273a:	4b73      	ldr	r3, [pc, #460]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	049b      	lsls	r3, r3, #18
 8002742:	4013      	ands	r3, r2
 8002744:	d114      	bne.n	8002770 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0d5      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d106      	bne.n	8002760 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002752:	4b6d      	ldr	r3, [pc, #436]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2204      	movs	r2, #4
 8002758:	4013      	ands	r3, r2
 800275a:	d109      	bne.n	8002770 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0ca      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002760:	4b69      	ldr	r3, [pc, #420]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4013      	ands	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0c2      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002770:	4b65      	ldr	r3, [pc, #404]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	2203      	movs	r2, #3
 8002776:	4393      	bics	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4b62      	ldr	r3, [pc, #392]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002780:	430a      	orrs	r2, r1
 8002782:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002784:	f7fe fbfc 	bl	8000f80 <HAL_GetTick>
 8002788:	0003      	movs	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d111      	bne.n	80027b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002794:	e009      	b.n	80027aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002796:	f7fe fbf3 	bl	8000f80 <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	4a58      	ldr	r2, [pc, #352]	@ (8002904 <HAL_RCC_ClockConfig+0x274>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e0a5      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80027aa:	4b57      	ldr	r3, [pc, #348]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	220c      	movs	r2, #12
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d1ef      	bne.n	8002796 <HAL_RCC_ClockConfig+0x106>
 80027b6:	e03a      	b.n	800282e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d111      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027c0:	e009      	b.n	80027d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c2:	f7fe fbdd 	bl	8000f80 <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002904 <HAL_RCC_ClockConfig+0x274>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e08f      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	220c      	movs	r2, #12
 80027dc:	4013      	ands	r3, r2
 80027de:	2b0c      	cmp	r3, #12
 80027e0:	d1ef      	bne.n	80027c2 <HAL_RCC_ClockConfig+0x132>
 80027e2:	e024      	b.n	800282e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d11b      	bne.n	8002824 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ec:	e009      	b.n	8002802 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ee:	f7fe fbc7 	bl	8000f80 <HAL_GetTick>
 80027f2:	0002      	movs	r2, r0
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <HAL_RCC_ClockConfig+0x274>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e079      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002802:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	220c      	movs	r2, #12
 8002808:	4013      	ands	r3, r2
 800280a:	2b04      	cmp	r3, #4
 800280c:	d1ef      	bne.n	80027ee <HAL_RCC_ClockConfig+0x15e>
 800280e:	e00e      	b.n	800282e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002810:	f7fe fbb6 	bl	8000f80 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	4a3a      	ldr	r2, [pc, #232]	@ (8002904 <HAL_RCC_ClockConfig+0x274>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e068      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002824:	4b38      	ldr	r3, [pc, #224]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	220c      	movs	r2, #12
 800282a:	4013      	ands	r3, r2
 800282c:	d1f0      	bne.n	8002810 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800282e:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d21e      	bcs.n	800287a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283c:	4b30      	ldr	r3, [pc, #192]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	4393      	bics	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800284e:	f7fe fb97 	bl	8000f80 <HAL_GetTick>
 8002852:	0003      	movs	r3, r0
 8002854:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	e009      	b.n	800286c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002858:	f7fe fb92 	bl	8000f80 <HAL_GetTick>
 800285c:	0002      	movs	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	4a28      	ldr	r2, [pc, #160]	@ (8002904 <HAL_RCC_ClockConfig+0x274>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e044      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286c:	4b24      	ldr	r3, [pc, #144]	@ (8002900 <HAL_RCC_ClockConfig+0x270>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2201      	movs	r2, #1
 8002872:	4013      	ands	r3, r2
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d1ee      	bne.n	8002858 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2204      	movs	r2, #4
 8002880:	4013      	ands	r3, r2
 8002882:	d009      	beq.n	8002898 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4a20      	ldr	r2, [pc, #128]	@ (800290c <HAL_RCC_ClockConfig+0x27c>)
 800288a:	4013      	ands	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68da      	ldr	r2, [r3, #12]
 8002892:	4b1d      	ldr	r3, [pc, #116]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 8002894:	430a      	orrs	r2, r1
 8002896:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2208      	movs	r2, #8
 800289e:	4013      	ands	r3, r2
 80028a0:	d00a      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028a2:	4b19      	ldr	r3, [pc, #100]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <HAL_RCC_ClockConfig+0x280>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	0019      	movs	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	00da      	lsls	r2, r3, #3
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028b8:	f000 f832 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80028bc:	0001      	movs	r1, r0
 80028be:	4b12      	ldr	r3, [pc, #72]	@ (8002908 <HAL_RCC_ClockConfig+0x278>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	220f      	movs	r2, #15
 80028c6:	4013      	ands	r3, r2
 80028c8:	4a12      	ldr	r2, [pc, #72]	@ (8002914 <HAL_RCC_ClockConfig+0x284>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	000a      	movs	r2, r1
 80028ce:	40da      	lsrs	r2, r3
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_RCC_ClockConfig+0x288>)
 80028d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d4:	4b11      	ldr	r3, [pc, #68]	@ (800291c <HAL_RCC_ClockConfig+0x28c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	250b      	movs	r5, #11
 80028da:	197c      	adds	r4, r7, r5
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe fb09 	bl	8000ef4 <HAL_InitTick>
 80028e2:	0003      	movs	r3, r0
 80028e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80028e6:	197b      	adds	r3, r7, r5
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80028ee:	197b      	adds	r3, r7, r5
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	e000      	b.n	80028f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	0018      	movs	r0, r3
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b004      	add	sp, #16
 80028fc:	bdb0      	pop	{r4, r5, r7, pc}
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	40022000 	.word	0x40022000
 8002904:	00001388 	.word	0x00001388
 8002908:	40021000 	.word	0x40021000
 800290c:	fffff8ff 	.word	0xfffff8ff
 8002910:	ffffc7ff 	.word	0xffffc7ff
 8002914:	08003b90 	.word	0x08003b90
 8002918:	20000004 	.word	0x20000004
 800291c:	20000008 	.word	0x20000008

08002920 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b08e      	sub	sp, #56	@ 0x38
 8002924:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002926:	4b4c      	ldr	r3, [pc, #304]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800292e:	230c      	movs	r3, #12
 8002930:	4013      	ands	r3, r2
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d014      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x40>
 8002936:	d900      	bls.n	800293a <HAL_RCC_GetSysClockFreq+0x1a>
 8002938:	e07b      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x112>
 800293a:	2b04      	cmp	r3, #4
 800293c:	d002      	beq.n	8002944 <HAL_RCC_GetSysClockFreq+0x24>
 800293e:	2b08      	cmp	r3, #8
 8002940:	d00b      	beq.n	800295a <HAL_RCC_GetSysClockFreq+0x3a>
 8002942:	e076      	b.n	8002a32 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002944:	4b44      	ldr	r3, [pc, #272]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2210      	movs	r2, #16
 800294a:	4013      	ands	r3, r2
 800294c:	d002      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800294e:	4b43      	ldr	r3, [pc, #268]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002950:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002952:	e07c      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002954:	4b42      	ldr	r3, [pc, #264]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x140>)
 8002956:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002958:	e079      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800295a:	4b42      	ldr	r3, [pc, #264]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x144>)
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800295e:	e076      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002962:	0c9a      	lsrs	r2, r3, #18
 8002964:	230f      	movs	r3, #15
 8002966:	401a      	ands	r2, r3
 8002968:	4b3f      	ldr	r3, [pc, #252]	@ (8002a68 <HAL_RCC_GetSysClockFreq+0x148>)
 800296a:	5c9b      	ldrb	r3, [r3, r2]
 800296c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800296e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002970:	0d9a      	lsrs	r2, r3, #22
 8002972:	2303      	movs	r3, #3
 8002974:	4013      	ands	r3, r2
 8002976:	3301      	adds	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800297a:	4b37      	ldr	r3, [pc, #220]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x138>)
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	025b      	lsls	r3, r3, #9
 8002982:	4013      	ands	r3, r2
 8002984:	d01a      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	4a35      	ldr	r2, [pc, #212]	@ (8002a64 <HAL_RCC_GetSysClockFreq+0x144>)
 8002990:	2300      	movs	r3, #0
 8002992:	69b8      	ldr	r0, [r7, #24]
 8002994:	69f9      	ldr	r1, [r7, #28]
 8002996:	f7fd fc63 	bl	8000260 <__aeabi_lmul>
 800299a:	0002      	movs	r2, r0
 800299c:	000b      	movs	r3, r1
 800299e:	0010      	movs	r0, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f7fd fc37 	bl	8000220 <__aeabi_uldivmod>
 80029b2:	0002      	movs	r2, r0
 80029b4:	000b      	movs	r3, r1
 80029b6:	0013      	movs	r3, r2
 80029b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029ba:	e037      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80029bc:	4b26      	ldr	r3, [pc, #152]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x138>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d01a      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80029c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4a23      	ldr	r2, [pc, #140]	@ (8002a5c <HAL_RCC_GetSysClockFreq+0x13c>)
 80029d0:	2300      	movs	r3, #0
 80029d2:	68b8      	ldr	r0, [r7, #8]
 80029d4:	68f9      	ldr	r1, [r7, #12]
 80029d6:	f7fd fc43 	bl	8000260 <__aeabi_lmul>
 80029da:	0002      	movs	r2, r0
 80029dc:	000b      	movs	r3, r1
 80029de:	0010      	movs	r0, r2
 80029e0:	0019      	movs	r1, r3
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f7fd fc17 	bl	8000220 <__aeabi_uldivmod>
 80029f2:	0002      	movs	r2, r0
 80029f4:	000b      	movs	r3, r1
 80029f6:	0013      	movs	r3, r2
 80029f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029fa:	e017      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80029fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fe:	0018      	movs	r0, r3
 8002a00:	2300      	movs	r3, #0
 8002a02:	0019      	movs	r1, r3
 8002a04:	4a16      	ldr	r2, [pc, #88]	@ (8002a60 <HAL_RCC_GetSysClockFreq+0x140>)
 8002a06:	2300      	movs	r3, #0
 8002a08:	f7fd fc2a 	bl	8000260 <__aeabi_lmul>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	000b      	movs	r3, r1
 8002a10:	0010      	movs	r0, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a16:	001c      	movs	r4, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	001d      	movs	r5, r3
 8002a1c:	0022      	movs	r2, r4
 8002a1e:	002b      	movs	r3, r5
 8002a20:	f7fd fbfe 	bl	8000220 <__aeabi_uldivmod>
 8002a24:	0002      	movs	r2, r0
 8002a26:	000b      	movs	r3, r1
 8002a28:	0013      	movs	r3, r2
 8002a2a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a30:	e00d      	b.n	8002a4e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_RCC_GetSysClockFreq+0x138>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	2207      	movs	r2, #7
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	3301      	adds	r3, #1
 8002a42:	2280      	movs	r2, #128	@ 0x80
 8002a44:	0212      	lsls	r2, r2, #8
 8002a46:	409a      	lsls	r2, r3
 8002a48:	0013      	movs	r3, r2
 8002a4a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002a4c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b00e      	add	sp, #56	@ 0x38
 8002a56:	bdb0      	pop	{r4, r5, r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	003d0900 	.word	0x003d0900
 8002a60:	00f42400 	.word	0x00f42400
 8002a64:	007a1200 	.word	0x007a1200
 8002a68:	08003ba8 	.word	0x08003ba8

08002a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a70:	4b02      	ldr	r3, [pc, #8]	@ (8002a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a72:	681b      	ldr	r3, [r3, #0]
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a84:	f7ff fff2 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002a88:	0001      	movs	r1, r0
 8002a8a:	4b06      	ldr	r3, [pc, #24]	@ (8002aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	2207      	movs	r2, #7
 8002a92:	4013      	ands	r3, r2
 8002a94:	4a04      	ldr	r2, [pc, #16]	@ (8002aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a96:	5cd3      	ldrb	r3, [r2, r3]
 8002a98:	40d9      	lsrs	r1, r3
 8002a9a:	000b      	movs	r3, r1
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	46c0      	nop			@ (mov r8, r8)
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	08003ba0 	.word	0x08003ba0

08002aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ab0:	f7ff ffdc 	bl	8002a6c <HAL_RCC_GetHCLKFreq>
 8002ab4:	0001      	movs	r1, r0
 8002ab6:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	0adb      	lsrs	r3, r3, #11
 8002abc:	2207      	movs	r2, #7
 8002abe:	4013      	ands	r3, r2
 8002ac0:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	40d9      	lsrs	r1, r3
 8002ac6:	000b      	movs	r3, r1
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	08003ba0 	.word	0x08003ba0

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002ae0:	2017      	movs	r0, #23
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	4013      	ands	r3, r2
 8002af0:	d100      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002af2:	e0c7      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af4:	4b84      	ldr	r3, [pc, #528]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002af6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	4013      	ands	r3, r2
 8002afe:	d109      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b00:	4b81      	ldr	r3, [pc, #516]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b04:	4b80      	ldr	r3, [pc, #512]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b06:	2180      	movs	r1, #128	@ 0x80
 8002b08:	0549      	lsls	r1, r1, #21
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002b0e:	183b      	adds	r3, r7, r0
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b14:	4b7d      	ldr	r3, [pc, #500]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	@ 0x80
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d11a      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b20:	4b7a      	ldr	r3, [pc, #488]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b79      	ldr	r3, [pc, #484]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	0049      	lsls	r1, r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fa27 	bl	8000f80 <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	e008      	b.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b38:	f7fe fa22 	bl	8000f80 <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0d9      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4a:	4b70      	ldr	r3, [pc, #448]	@ (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	4013      	ands	r3, r2
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002b56:	4b6c      	ldr	r3, [pc, #432]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	23c0      	movs	r3, #192	@ 0xc0
 8002b5c:	039b      	lsls	r3, r3, #14
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	23c0      	movs	r3, #192	@ 0xc0
 8002b68:	039b      	lsls	r3, r3, #14
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d013      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	23c0      	movs	r3, #192	@ 0xc0
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	401a      	ands	r2, r3
 8002b7c:	23c0      	movs	r3, #192	@ 0xc0
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d10a      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b84:	4b60      	ldr	r3, [pc, #384]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	029b      	lsls	r3, r3, #10
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	2380      	movs	r3, #128	@ 0x80
 8002b90:	029b      	lsls	r3, r3, #10
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0b1      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b9e:	23c0      	movs	r3, #192	@ 0xc0
 8002ba0:	029b      	lsls	r3, r3, #10
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d03b      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	23c0      	movs	r3, #192	@ 0xc0
 8002bb2:	029b      	lsls	r3, r3, #10
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d033      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d02e      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002bc6:	4b50      	ldr	r3, [pc, #320]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	4a51      	ldr	r2, [pc, #324]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002bcc:	4013      	ands	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bd6:	2180      	movs	r1, #128	@ 0x80
 8002bd8:	0309      	lsls	r1, r1, #12
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bde:	4b4a      	ldr	r3, [pc, #296]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002be0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002be2:	4b49      	ldr	r3, [pc, #292]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002be4:	494b      	ldr	r1, [pc, #300]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002be6:	400a      	ands	r2, r1
 8002be8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002bea:	4b47      	ldr	r3, [pc, #284]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d014      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fe f9c1 	bl	8000f80 <HAL_GetTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c02:	e009      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe f9bc 	bl	8000f80 <HAL_GetTick>
 8002c08:	0002      	movs	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	4a42      	ldr	r2, [pc, #264]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e072      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c18:	4b3b      	ldr	r3, [pc, #236]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d0ef      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	23c0      	movs	r3, #192	@ 0xc0
 8002c34:	029b      	lsls	r3, r3, #10
 8002c36:	401a      	ands	r2, r3
 8002c38:	23c0      	movs	r3, #192	@ 0xc0
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002c40:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a35      	ldr	r2, [pc, #212]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	23c0      	movs	r3, #192	@ 0xc0
 8002c50:	039b      	lsls	r3, r3, #14
 8002c52:	401a      	ands	r2, r3
 8002c54:	4b2c      	ldr	r3, [pc, #176]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c5c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	23c0      	movs	r3, #192	@ 0xc0
 8002c64:	029b      	lsls	r3, r3, #10
 8002c66:	401a      	ands	r2, r3
 8002c68:	4b27      	ldr	r3, [pc, #156]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c6e:	2317      	movs	r3, #23
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c78:	4b23      	ldr	r3, [pc, #140]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c7c:	4b22      	ldr	r3, [pc, #136]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c7e:	4928      	ldr	r1, [pc, #160]	@ (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	220c      	movs	r2, #12
 8002c94:	4393      	bics	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2204      	movs	r2, #4
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d009      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cac:	4b16      	ldr	r3, [pc, #88]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cca:	4b0f      	ldr	r3, [pc, #60]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cce:	4a16      	ldr	r2, [pc, #88]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2280      	movs	r2, #128	@ 0x80
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d009      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ce8:	4b07      	ldr	r3, [pc, #28]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cec:	4a0f      	ldr	r2, [pc, #60]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695a      	ldr	r2, [r3, #20]
 8002cf6:	4b04      	ldr	r3, [pc, #16]	@ (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b006      	add	sp, #24
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	fffcffff 	.word	0xfffcffff
 8002d14:	fff7ffff 	.word	0xfff7ffff
 8002d18:	00001388 	.word	0x00001388
 8002d1c:	ffcfffff 	.word	0xffcfffff
 8002d20:	efffffff 	.word	0xefffffff
 8002d24:	fffff3ff 	.word	0xfffff3ff
 8002d28:	ffffcfff 	.word	0xffffcfff
 8002d2c:	fff3ffff 	.word	0xfff3ffff

08002d30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e044      	b.n	8002dcc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2278      	movs	r2, #120	@ 0x78
 8002d4e:	2100      	movs	r1, #0
 8002d50:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fe f811 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2224      	movs	r2, #36	@ 0x24
 8002d5e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	438a      	bics	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 f89a 	bl	8002eac <UART_SetConfig>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e024      	b.n	8002dcc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fad7 	bl	8003340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	490d      	ldr	r1, [pc, #52]	@ (8002dd4 <HAL_UART_Init+0xa4>)
 8002d9e:	400a      	ands	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	212a      	movs	r1, #42	@ 0x2a
 8002dae:	438a      	bics	r2, r1
 8002db0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f000 fb6f 	bl	80034a8 <UART_CheckIdleState>
 8002dca:	0003      	movs	r3, r0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	ffffb7ff 	.word	0xffffb7ff

08002dd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	1dbb      	adds	r3, r7, #6
 8002de4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	589b      	ldr	r3, [r3, r2]
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d14a      	bne.n	8002e86 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_UART_Receive_DMA+0x26>
 8002df6:	1dbb      	adds	r3, r7, #6
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e042      	b.n	8002e88 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	015b      	lsls	r3, r3, #5
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d109      	bne.n	8002e22 <HAL_UART_Receive_DMA+0x4a>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d105      	bne.n	8002e22 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d001      	beq.n	8002e22 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e032      	b.n	8002e88 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a18      	ldr	r2, [pc, #96]	@ (8002e90 <HAL_UART_Receive_DMA+0xb8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d020      	beq.n	8002e74 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	041b      	lsls	r3, r3, #16
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d019      	beq.n	8002e74 <HAL_UART_Receive_DMA+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e40:	f3ef 8310 	mrs	r3, PRIMASK
 8002e44:	613b      	str	r3, [r7, #16]
  return(result);
 8002e46:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	04c9      	lsls	r1, r1, #19
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f383 8810 	msr	PRIMASK, r3
}
 8002e72:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e74:	1dbb      	adds	r3, r7, #6
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 fc25 	bl	80036cc <UART_Start_Receive_DMA>
 8002e82:	0003      	movs	r3, r0
 8002e84:	e000      	b.n	8002e88 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8002e86:	2302      	movs	r3, #2
  }
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b008      	add	sp, #32
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40004800 	.word	0x40004800

08002e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	000a      	movs	r2, r1
 8002e9e:	1cbb      	adds	r3, r7, #2
 8002ea0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b002      	add	sp, #8
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eac:	b5b0      	push	{r4, r5, r7, lr}
 8002eae:	b08e      	sub	sp, #56	@ 0x38
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eb4:	231a      	movs	r3, #26
 8002eb6:	2218      	movs	r2, #24
 8002eb8:	189b      	adds	r3, r3, r2
 8002eba:	19db      	adds	r3, r3, r7
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4ab4      	ldr	r2, [pc, #720]	@ (80031b0 <UART_SetConfig+0x304>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002eea:	430a      	orrs	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	4aaf      	ldr	r2, [pc, #700]	@ (80031b4 <UART_SetConfig+0x308>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4aa9      	ldr	r2, [pc, #676]	@ (80031b8 <UART_SetConfig+0x30c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	4aa5      	ldr	r2, [pc, #660]	@ (80031bc <UART_SetConfig+0x310>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4aa1      	ldr	r2, [pc, #644]	@ (80031c0 <UART_SetConfig+0x314>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d131      	bne.n	8002fa4 <UART_SetConfig+0xf8>
 8002f40:	4ba0      	ldr	r3, [pc, #640]	@ (80031c4 <UART_SetConfig+0x318>)
 8002f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f44:	220c      	movs	r2, #12
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b0c      	cmp	r3, #12
 8002f4a:	d01d      	beq.n	8002f88 <UART_SetConfig+0xdc>
 8002f4c:	d823      	bhi.n	8002f96 <UART_SetConfig+0xea>
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d00c      	beq.n	8002f6c <UART_SetConfig+0xc0>
 8002f52:	d820      	bhi.n	8002f96 <UART_SetConfig+0xea>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <UART_SetConfig+0xb2>
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d00e      	beq.n	8002f7a <UART_SetConfig+0xce>
 8002f5c:	e01b      	b.n	8002f96 <UART_SetConfig+0xea>
 8002f5e:	231b      	movs	r3, #27
 8002f60:	2218      	movs	r2, #24
 8002f62:	189b      	adds	r3, r3, r2
 8002f64:	19db      	adds	r3, r3, r7
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
 8002f6a:	e065      	b.n	8003038 <UART_SetConfig+0x18c>
 8002f6c:	231b      	movs	r3, #27
 8002f6e:	2218      	movs	r2, #24
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	19db      	adds	r3, r3, r7
 8002f74:	2202      	movs	r2, #2
 8002f76:	701a      	strb	r2, [r3, #0]
 8002f78:	e05e      	b.n	8003038 <UART_SetConfig+0x18c>
 8002f7a:	231b      	movs	r3, #27
 8002f7c:	2218      	movs	r2, #24
 8002f7e:	189b      	adds	r3, r3, r2
 8002f80:	19db      	adds	r3, r3, r7
 8002f82:	2204      	movs	r2, #4
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	e057      	b.n	8003038 <UART_SetConfig+0x18c>
 8002f88:	231b      	movs	r3, #27
 8002f8a:	2218      	movs	r2, #24
 8002f8c:	189b      	adds	r3, r3, r2
 8002f8e:	19db      	adds	r3, r3, r7
 8002f90:	2208      	movs	r2, #8
 8002f92:	701a      	strb	r2, [r3, #0]
 8002f94:	e050      	b.n	8003038 <UART_SetConfig+0x18c>
 8002f96:	231b      	movs	r3, #27
 8002f98:	2218      	movs	r2, #24
 8002f9a:	189b      	adds	r3, r3, r2
 8002f9c:	19db      	adds	r3, r3, r7
 8002f9e:	2210      	movs	r2, #16
 8002fa0:	701a      	strb	r2, [r3, #0]
 8002fa2:	e049      	b.n	8003038 <UART_SetConfig+0x18c>
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a83      	ldr	r2, [pc, #524]	@ (80031b8 <UART_SetConfig+0x30c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d13e      	bne.n	800302c <UART_SetConfig+0x180>
 8002fae:	4b85      	ldr	r3, [pc, #532]	@ (80031c4 <UART_SetConfig+0x318>)
 8002fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fb2:	23c0      	movs	r3, #192	@ 0xc0
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	22c0      	movs	r2, #192	@ 0xc0
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d027      	beq.n	8003010 <UART_SetConfig+0x164>
 8002fc0:	22c0      	movs	r2, #192	@ 0xc0
 8002fc2:	0112      	lsls	r2, r2, #4
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d82a      	bhi.n	800301e <UART_SetConfig+0x172>
 8002fc8:	2280      	movs	r2, #128	@ 0x80
 8002fca:	0112      	lsls	r2, r2, #4
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d011      	beq.n	8002ff4 <UART_SetConfig+0x148>
 8002fd0:	2280      	movs	r2, #128	@ 0x80
 8002fd2:	0112      	lsls	r2, r2, #4
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d822      	bhi.n	800301e <UART_SetConfig+0x172>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <UART_SetConfig+0x13a>
 8002fdc:	2280      	movs	r2, #128	@ 0x80
 8002fde:	00d2      	lsls	r2, r2, #3
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <UART_SetConfig+0x156>
 8002fe4:	e01b      	b.n	800301e <UART_SetConfig+0x172>
 8002fe6:	231b      	movs	r3, #27
 8002fe8:	2218      	movs	r2, #24
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	19db      	adds	r3, r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	701a      	strb	r2, [r3, #0]
 8002ff2:	e021      	b.n	8003038 <UART_SetConfig+0x18c>
 8002ff4:	231b      	movs	r3, #27
 8002ff6:	2218      	movs	r2, #24
 8002ff8:	189b      	adds	r3, r3, r2
 8002ffa:	19db      	adds	r3, r3, r7
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e01a      	b.n	8003038 <UART_SetConfig+0x18c>
 8003002:	231b      	movs	r3, #27
 8003004:	2218      	movs	r2, #24
 8003006:	189b      	adds	r3, r3, r2
 8003008:	19db      	adds	r3, r3, r7
 800300a:	2204      	movs	r2, #4
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e013      	b.n	8003038 <UART_SetConfig+0x18c>
 8003010:	231b      	movs	r3, #27
 8003012:	2218      	movs	r2, #24
 8003014:	189b      	adds	r3, r3, r2
 8003016:	19db      	adds	r3, r3, r7
 8003018:	2208      	movs	r2, #8
 800301a:	701a      	strb	r2, [r3, #0]
 800301c:	e00c      	b.n	8003038 <UART_SetConfig+0x18c>
 800301e:	231b      	movs	r3, #27
 8003020:	2218      	movs	r2, #24
 8003022:	189b      	adds	r3, r3, r2
 8003024:	19db      	adds	r3, r3, r7
 8003026:	2210      	movs	r2, #16
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e005      	b.n	8003038 <UART_SetConfig+0x18c>
 800302c:	231b      	movs	r3, #27
 800302e:	2218      	movs	r2, #24
 8003030:	189b      	adds	r3, r3, r2
 8003032:	19db      	adds	r3, r3, r7
 8003034:	2210      	movs	r2, #16
 8003036:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5e      	ldr	r2, [pc, #376]	@ (80031b8 <UART_SetConfig+0x30c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d000      	beq.n	8003044 <UART_SetConfig+0x198>
 8003042:	e084      	b.n	800314e <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003044:	231b      	movs	r3, #27
 8003046:	2218      	movs	r2, #24
 8003048:	189b      	adds	r3, r3, r2
 800304a:	19db      	adds	r3, r3, r7
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d01d      	beq.n	800308e <UART_SetConfig+0x1e2>
 8003052:	dc20      	bgt.n	8003096 <UART_SetConfig+0x1ea>
 8003054:	2b04      	cmp	r3, #4
 8003056:	d015      	beq.n	8003084 <UART_SetConfig+0x1d8>
 8003058:	dc1d      	bgt.n	8003096 <UART_SetConfig+0x1ea>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <UART_SetConfig+0x1b8>
 800305e:	2b02      	cmp	r3, #2
 8003060:	d005      	beq.n	800306e <UART_SetConfig+0x1c2>
 8003062:	e018      	b.n	8003096 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7ff fd0c 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003068:	0003      	movs	r3, r0
 800306a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800306c:	e01c      	b.n	80030a8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800306e:	4b55      	ldr	r3, [pc, #340]	@ (80031c4 <UART_SetConfig+0x318>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2210      	movs	r2, #16
 8003074:	4013      	ands	r3, r2
 8003076:	d002      	beq.n	800307e <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003078:	4b53      	ldr	r3, [pc, #332]	@ (80031c8 <UART_SetConfig+0x31c>)
 800307a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800307c:	e014      	b.n	80030a8 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 800307e:	4b53      	ldr	r3, [pc, #332]	@ (80031cc <UART_SetConfig+0x320>)
 8003080:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003082:	e011      	b.n	80030a8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003084:	f7ff fc4c 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 8003088:	0003      	movs	r3, r0
 800308a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800308c:	e00c      	b.n	80030a8 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	2380      	movs	r3, #128	@ 0x80
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003094:	e008      	b.n	80030a8 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800309a:	231a      	movs	r3, #26
 800309c:	2218      	movs	r2, #24
 800309e:	189b      	adds	r3, r3, r2
 80030a0:	19db      	adds	r3, r3, r7
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
        break;
 80030a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d100      	bne.n	80030b0 <UART_SetConfig+0x204>
 80030ae:	e12f      	b.n	8003310 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	0013      	movs	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	189b      	adds	r3, r3, r2
 80030ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030bc:	429a      	cmp	r2, r3
 80030be:	d305      	bcc.n	80030cc <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d906      	bls.n	80030da <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80030cc:	231a      	movs	r3, #26
 80030ce:	2218      	movs	r2, #24
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	19db      	adds	r3, r3, r7
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
 80030d8:	e11a      	b.n	8003310 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	6939      	ldr	r1, [r7, #16]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	000b      	movs	r3, r1
 80030e8:	0e1b      	lsrs	r3, r3, #24
 80030ea:	0010      	movs	r0, r2
 80030ec:	0205      	lsls	r5, r0, #8
 80030ee:	431d      	orrs	r5, r3
 80030f0:	000b      	movs	r3, r1
 80030f2:	021c      	lsls	r4, r3, #8
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	085b      	lsrs	r3, r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68b8      	ldr	r0, [r7, #8]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	1900      	adds	r0, r0, r4
 8003106:	4169      	adcs	r1, r5
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f7fd f883 	bl	8000220 <__aeabi_uldivmod>
 800311a:	0002      	movs	r2, r0
 800311c:	000b      	movs	r3, r1
 800311e:	0013      	movs	r3, r2
 8003120:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003124:	23c0      	movs	r3, #192	@ 0xc0
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	429a      	cmp	r2, r3
 800312a:	d309      	bcc.n	8003140 <UART_SetConfig+0x294>
 800312c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	035b      	lsls	r3, r3, #13
 8003132:	429a      	cmp	r2, r3
 8003134:	d204      	bcs.n	8003140 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800313c:	60da      	str	r2, [r3, #12]
 800313e:	e0e7      	b.n	8003310 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8003140:	231a      	movs	r3, #26
 8003142:	2218      	movs	r2, #24
 8003144:	189b      	adds	r3, r3, r2
 8003146:	19db      	adds	r3, r3, r7
 8003148:	2201      	movs	r2, #1
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e0e0      	b.n	8003310 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	429a      	cmp	r2, r3
 8003158:	d000      	beq.n	800315c <UART_SetConfig+0x2b0>
 800315a:	e082      	b.n	8003262 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 800315c:	231b      	movs	r3, #27
 800315e:	2218      	movs	r2, #24
 8003160:	189b      	adds	r3, r3, r2
 8003162:	19db      	adds	r3, r3, r7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b08      	cmp	r3, #8
 8003168:	d834      	bhi.n	80031d4 <UART_SetConfig+0x328>
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <UART_SetConfig+0x324>)
 800316e:	18d3      	adds	r3, r2, r3
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003174:	f7ff fc84 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 8003178:	0003      	movs	r3, r0
 800317a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800317c:	e033      	b.n	80031e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800317e:	f7ff fc95 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003182:	0003      	movs	r3, r0
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003186:	e02e      	b.n	80031e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003188:	4b0e      	ldr	r3, [pc, #56]	@ (80031c4 <UART_SetConfig+0x318>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d002      	beq.n	8003198 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003192:	4b0d      	ldr	r3, [pc, #52]	@ (80031c8 <UART_SetConfig+0x31c>)
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003196:	e026      	b.n	80031e6 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <UART_SetConfig+0x320>)
 800319a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800319c:	e023      	b.n	80031e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319e:	f7ff fbbf 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80031a2:	0003      	movs	r3, r0
 80031a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031a6:	e01e      	b.n	80031e6 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a8:	2380      	movs	r3, #128	@ 0x80
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80031ae:	e01a      	b.n	80031e6 <UART_SetConfig+0x33a>
 80031b0:	efff69f3 	.word	0xefff69f3
 80031b4:	ffffcfff 	.word	0xffffcfff
 80031b8:	40004800 	.word	0x40004800
 80031bc:	fffff4ff 	.word	0xfffff4ff
 80031c0:	40004400 	.word	0x40004400
 80031c4:	40021000 	.word	0x40021000
 80031c8:	003d0900 	.word	0x003d0900
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	08003bb4 	.word	0x08003bb4
      default:
        pclk = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80031d8:	231a      	movs	r3, #26
 80031da:	2218      	movs	r2, #24
 80031dc:	189b      	adds	r3, r3, r2
 80031de:	19db      	adds	r3, r3, r7
 80031e0:	2201      	movs	r2, #1
 80031e2:	701a      	strb	r2, [r3, #0]
        break;
 80031e4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d100      	bne.n	80031ee <UART_SetConfig+0x342>
 80031ec:	e090      	b.n	8003310 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f0:	005a      	lsls	r2, r3, #1
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	18d2      	adds	r2, r2, r3
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0019      	movs	r1, r3
 8003200:	0010      	movs	r0, r2
 8003202:	f7fc ff81 	bl	8000108 <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d921      	bls.n	8003254 <UART_SetConfig+0x3a8>
 8003210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	025b      	lsls	r3, r3, #9
 8003216:	429a      	cmp	r2, r3
 8003218:	d21c      	bcs.n	8003254 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800321a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321c:	b29a      	uxth	r2, r3
 800321e:	200e      	movs	r0, #14
 8003220:	2418      	movs	r4, #24
 8003222:	1903      	adds	r3, r0, r4
 8003224:	19db      	adds	r3, r3, r7
 8003226:	210f      	movs	r1, #15
 8003228:	438a      	bics	r2, r1
 800322a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	2207      	movs	r2, #7
 8003234:	4013      	ands	r3, r2
 8003236:	b299      	uxth	r1, r3
 8003238:	1903      	adds	r3, r0, r4
 800323a:	19db      	adds	r3, r3, r7
 800323c:	1902      	adds	r2, r0, r4
 800323e:	19d2      	adds	r2, r2, r7
 8003240:	8812      	ldrh	r2, [r2, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	1902      	adds	r2, r0, r4
 800324c:	19d2      	adds	r2, r2, r7
 800324e:	8812      	ldrh	r2, [r2, #0]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e05d      	b.n	8003310 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003254:	231a      	movs	r3, #26
 8003256:	2218      	movs	r2, #24
 8003258:	189b      	adds	r3, r3, r2
 800325a:	19db      	adds	r3, r3, r7
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	e056      	b.n	8003310 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003262:	231b      	movs	r3, #27
 8003264:	2218      	movs	r2, #24
 8003266:	189b      	adds	r3, r3, r2
 8003268:	19db      	adds	r3, r3, r7
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d822      	bhi.n	80032b6 <UART_SetConfig+0x40a>
 8003270:	009a      	lsls	r2, r3, #2
 8003272:	4b2f      	ldr	r3, [pc, #188]	@ (8003330 <UART_SetConfig+0x484>)
 8003274:	18d3      	adds	r3, r2, r3
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327a:	f7ff fc01 	bl	8002a80 <HAL_RCC_GetPCLK1Freq>
 800327e:	0003      	movs	r3, r0
 8003280:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003282:	e021      	b.n	80032c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7ff fc12 	bl	8002aac <HAL_RCC_GetPCLK2Freq>
 8003288:	0003      	movs	r3, r0
 800328a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800328c:	e01c      	b.n	80032c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800328e:	4b29      	ldr	r3, [pc, #164]	@ (8003334 <UART_SetConfig+0x488>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	4013      	ands	r3, r2
 8003296:	d002      	beq.n	800329e <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003298:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <UART_SetConfig+0x48c>)
 800329a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800329c:	e014      	b.n	80032c8 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 800329e:	4b27      	ldr	r3, [pc, #156]	@ (800333c <UART_SetConfig+0x490>)
 80032a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032a2:	e011      	b.n	80032c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032a4:	f7ff fb3c 	bl	8002920 <HAL_RCC_GetSysClockFreq>
 80032a8:	0003      	movs	r3, r0
 80032aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032ac:	e00c      	b.n	80032c8 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	021b      	lsls	r3, r3, #8
 80032b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80032b4:	e008      	b.n	80032c8 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80032ba:	231a      	movs	r3, #26
 80032bc:	2218      	movs	r2, #24
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	19db      	adds	r3, r3, r7
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
        break;
 80032c6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80032c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d020      	beq.n	8003310 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	085a      	lsrs	r2, r3, #1
 80032d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d6:	18d2      	adds	r2, r2, r3
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	0019      	movs	r1, r3
 80032de:	0010      	movs	r0, r2
 80032e0:	f7fc ff12 	bl	8000108 <__udivsi3>
 80032e4:	0003      	movs	r3, r0
 80032e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	2b0f      	cmp	r3, #15
 80032ec:	d90a      	bls.n	8003304 <UART_SetConfig+0x458>
 80032ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032f0:	2380      	movs	r3, #128	@ 0x80
 80032f2:	025b      	lsls	r3, r3, #9
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d205      	bcs.n	8003304 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	e005      	b.n	8003310 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8003304:	231a      	movs	r3, #26
 8003306:	2218      	movs	r2, #24
 8003308:	189b      	adds	r3, r3, r2
 800330a:	19db      	adds	r3, r3, r7
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2200      	movs	r2, #0
 8003314:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	2200      	movs	r2, #0
 800331a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800331c:	231a      	movs	r3, #26
 800331e:	2218      	movs	r2, #24
 8003320:	189b      	adds	r3, r3, r2
 8003322:	19db      	adds	r3, r3, r7
 8003324:	781b      	ldrb	r3, [r3, #0]
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b00e      	add	sp, #56	@ 0x38
 800332c:	bdb0      	pop	{r4, r5, r7, pc}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	08003bd8 	.word	0x08003bd8
 8003334:	40021000 	.word	0x40021000
 8003338:	003d0900 	.word	0x003d0900
 800333c:	00f42400 	.word	0x00f42400

08003340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	d00b      	beq.n	800336a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a4a      	ldr	r2, [pc, #296]	@ (8003484 <UART_AdvFeatureConfig+0x144>)
 800335a:	4013      	ands	r3, r2
 800335c:	0019      	movs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	2202      	movs	r2, #2
 8003370:	4013      	ands	r3, r2
 8003372:	d00b      	beq.n	800338c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a43      	ldr	r2, [pc, #268]	@ (8003488 <UART_AdvFeatureConfig+0x148>)
 800337c:	4013      	ands	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	2204      	movs	r2, #4
 8003392:	4013      	ands	r3, r2
 8003394:	d00b      	beq.n	80033ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	4a3b      	ldr	r2, [pc, #236]	@ (800348c <UART_AdvFeatureConfig+0x14c>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b2:	2208      	movs	r2, #8
 80033b4:	4013      	ands	r3, r2
 80033b6:	d00b      	beq.n	80033d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	4a34      	ldr	r2, [pc, #208]	@ (8003490 <UART_AdvFeatureConfig+0x150>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	0019      	movs	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	2210      	movs	r2, #16
 80033d6:	4013      	ands	r3, r2
 80033d8:	d00b      	beq.n	80033f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003494 <UART_AdvFeatureConfig+0x154>)
 80033e2:	4013      	ands	r3, r2
 80033e4:	0019      	movs	r1, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	2220      	movs	r2, #32
 80033f8:	4013      	ands	r3, r2
 80033fa:	d00b      	beq.n	8003414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <UART_AdvFeatureConfig+0x158>)
 8003404:	4013      	ands	r3, r2
 8003406:	0019      	movs	r1, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	2240      	movs	r2, #64	@ 0x40
 800341a:	4013      	ands	r3, r2
 800341c:	d01d      	beq.n	800345a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a1d      	ldr	r2, [pc, #116]	@ (800349c <UART_AdvFeatureConfig+0x15c>)
 8003426:	4013      	ands	r3, r2
 8003428:	0019      	movs	r1, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800343a:	2380      	movs	r3, #128	@ 0x80
 800343c:	035b      	lsls	r3, r3, #13
 800343e:	429a      	cmp	r2, r3
 8003440:	d10b      	bne.n	800345a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a15      	ldr	r2, [pc, #84]	@ (80034a0 <UART_AdvFeatureConfig+0x160>)
 800344a:	4013      	ands	r3, r2
 800344c:	0019      	movs	r1, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345e:	2280      	movs	r2, #128	@ 0x80
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4a0e      	ldr	r2, [pc, #56]	@ (80034a4 <UART_AdvFeatureConfig+0x164>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }
}
 800347c:	46c0      	nop			@ (mov r8, r8)
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}
 8003484:	fffdffff 	.word	0xfffdffff
 8003488:	fffeffff 	.word	0xfffeffff
 800348c:	fffbffff 	.word	0xfffbffff
 8003490:	ffff7fff 	.word	0xffff7fff
 8003494:	ffffefff 	.word	0xffffefff
 8003498:	ffffdfff 	.word	0xffffdfff
 800349c:	ffefffff 	.word	0xffefffff
 80034a0:	ff9fffff 	.word	0xff9fffff
 80034a4:	fff7ffff 	.word	0xfff7ffff

080034a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b092      	sub	sp, #72	@ 0x48
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2284      	movs	r2, #132	@ 0x84
 80034b4:	2100      	movs	r1, #0
 80034b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034b8:	f7fd fd62 	bl	8000f80 <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2208      	movs	r2, #8
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b08      	cmp	r3, #8
 80034cc:	d12c      	bne.n	8003528 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d0:	2280      	movs	r2, #128	@ 0x80
 80034d2:	0391      	lsls	r1, r2, #14
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4a46      	ldr	r2, [pc, #280]	@ (80035f0 <UART_CheckIdleState+0x148>)
 80034d8:	9200      	str	r2, [sp, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	f000 f88c 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d021      	beq.n	8003528 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e4:	f3ef 8310 	mrs	r3, PRIMASK
 80034e8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ec:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034ee:	2301      	movs	r3, #1
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	46c0      	nop			@ (mov r8, r8)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2180      	movs	r1, #128	@ 0x80
 8003506:	438a      	bics	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2278      	movs	r2, #120	@ 0x78
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e05f      	b.n	80035e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	2b04      	cmp	r3, #4
 8003534:	d146      	bne.n	80035c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003538:	2280      	movs	r2, #128	@ 0x80
 800353a:	03d1      	lsls	r1, r2, #15
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4a2c      	ldr	r2, [pc, #176]	@ (80035f0 <UART_CheckIdleState+0x148>)
 8003540:	9200      	str	r2, [sp, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	f000 f858 	bl	80035f8 <UART_WaitOnFlagUntilTimeout>
 8003548:	1e03      	subs	r3, r0, #0
 800354a:	d03b      	beq.n	80035c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354c:	f3ef 8310 	mrs	r3, PRIMASK
 8003550:	60fb      	str	r3, [r7, #12]
  return(result);
 8003552:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003554:	637b      	str	r3, [r7, #52]	@ 0x34
 8003556:	2301      	movs	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4921      	ldr	r1, [pc, #132]	@ (80035f4 <UART_CheckIdleState+0x14c>)
 800356e:	400a      	ands	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f383 8810 	msr	PRIMASK, r3
}
 800357c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	61bb      	str	r3, [r7, #24]
  return(result);
 8003584:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003586:	633b      	str	r3, [r7, #48]	@ 0x30
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2101      	movs	r1, #1
 80035a0:	438a      	bics	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2280      	movs	r2, #128	@ 0x80
 80035b4:	2120      	movs	r1, #32
 80035b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2278      	movs	r2, #120	@ 0x78
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e011      	b.n	80035e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2280      	movs	r2, #128	@ 0x80
 80035ce:	2120      	movs	r1, #32
 80035d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2278      	movs	r2, #120	@ 0x78
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b010      	add	sp, #64	@ 0x40
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	01ffffff 	.word	0x01ffffff
 80035f4:	fffffedf 	.word	0xfffffedf

080035f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003608:	e04b      	b.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	3301      	adds	r3, #1
 800360e:	d048      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003610:	f7fd fcb6 	bl	8000f80 <HAL_GetTick>
 8003614:	0002      	movs	r2, r0
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e04b      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2204      	movs	r2, #4
 8003632:	4013      	ands	r3, r2
 8003634:	d035      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2208      	movs	r2, #8
 800363e:	4013      	ands	r3, r2
 8003640:	2b08      	cmp	r3, #8
 8003642:	d111      	bne.n	8003668 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2208      	movs	r2, #8
 800364a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	0018      	movs	r0, r3
 8003650:	f000 f900 	bl	8003854 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2284      	movs	r2, #132	@ 0x84
 8003658:	2108      	movs	r1, #8
 800365a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2278      	movs	r2, #120	@ 0x78
 8003660:	2100      	movs	r1, #0
 8003662:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e02c      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	2380      	movs	r3, #128	@ 0x80
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	401a      	ands	r2, r3
 8003674:	2380      	movs	r3, #128	@ 0x80
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	429a      	cmp	r2, r3
 800367a:	d112      	bne.n	80036a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2280      	movs	r2, #128	@ 0x80
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f8e3 	bl	8003854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2284      	movs	r2, #132	@ 0x84
 8003692:	2120      	movs	r1, #32
 8003694:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2278      	movs	r2, #120	@ 0x78
 800369a:	2100      	movs	r1, #0
 800369c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e00f      	b.n	80036c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4013      	ands	r3, r2
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	425a      	negs	r2, r3
 80036b2:	4153      	adcs	r3, r2
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	001a      	movs	r2, r3
 80036b8:	1dfb      	adds	r3, r7, #7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d0a4      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	0018      	movs	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b004      	add	sp, #16
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b090      	sub	sp, #64	@ 0x40
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	1dbb      	adds	r3, r7, #6
 80036d8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	1dba      	adds	r2, r7, #6
 80036e4:	2158      	movs	r1, #88	@ 0x58
 80036e6:	8812      	ldrh	r2, [r2, #0]
 80036e8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2284      	movs	r2, #132	@ 0x84
 80036ee:	2100      	movs	r1, #0
 80036f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2280      	movs	r2, #128	@ 0x80
 80036f6:	2122      	movs	r1, #34	@ 0x22
 80036f8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003706:	4a3e      	ldr	r2, [pc, #248]	@ (8003800 <UART_Start_Receive_DMA+0x134>)
 8003708:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370e:	4a3d      	ldr	r2, [pc, #244]	@ (8003804 <UART_Start_Receive_DMA+0x138>)
 8003710:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003716:	4a3c      	ldr	r2, [pc, #240]	@ (8003808 <UART_Start_Receive_DMA+0x13c>)
 8003718:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371e:	2200      	movs	r2, #0
 8003720:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3324      	adds	r3, #36	@ 0x24
 800372c:	0019      	movs	r1, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003732:	001a      	movs	r2, r3
 8003734:	1dbb      	adds	r3, r7, #6
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	f7fe f960 	bl	80019fc <HAL_DMA_Start_IT>
 800373c:	1e03      	subs	r3, r0, #0
 800373e:	d009      	beq.n	8003754 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2284      	movs	r2, #132	@ 0x84
 8003744:	2110      	movs	r1, #16
 8003746:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2280      	movs	r2, #128	@ 0x80
 800374c:	2120      	movs	r1, #32
 800374e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e050      	b.n	80037f6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d019      	beq.n	8003790 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375c:	f3ef 8310 	mrs	r3, PRIMASK
 8003760:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003764:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003766:	2301      	movs	r3, #1
 8003768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2180      	movs	r1, #128	@ 0x80
 800377e:	0049      	lsls	r1, r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003786:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378a:	f383 8810 	msr	PRIMASK, r3
}
 800378e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003790:	f3ef 8310 	mrs	r3, PRIMASK
 8003794:	613b      	str	r3, [r7, #16]
  return(result);
 8003796:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800379a:	2301      	movs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			@ (mov r8, r8)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2101      	movs	r1, #1
 80037b2:	430a      	orrs	r2, r1
 80037b4:	609a      	str	r2, [r3, #8]
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f383 8810 	msr	PRIMASK, r3
}
 80037c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037c2:	f3ef 8310 	mrs	r3, PRIMASK
 80037c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80037c8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80037cc:	2301      	movs	r3, #1
 80037ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			@ (mov r8, r8)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2140      	movs	r1, #64	@ 0x40
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]
 80037e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b010      	add	sp, #64	@ 0x40
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			@ (mov r8, r8)
 8003800:	0800391d 	.word	0x0800391d
 8003804:	08003a4d 	.word	0x08003a4d
 8003808:	08003a8f 	.word	0x08003a8f

0800380c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003814:	f3ef 8310 	mrs	r3, PRIMASK
 8003818:	60bb      	str	r3, [r7, #8]
  return(result);
 800381a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800381c:	617b      	str	r3, [r7, #20]
 800381e:	2301      	movs	r3, #1
 8003820:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f383 8810 	msr	PRIMASK, r3
}
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	21c0      	movs	r1, #192	@ 0xc0
 8003836:	438a      	bics	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f383 8810 	msr	PRIMASK, r3
}
 8003844:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b006      	add	sp, #24
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08e      	sub	sp, #56	@ 0x38
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800385c:	f3ef 8310 	mrs	r3, PRIMASK
 8003860:	617b      	str	r3, [r7, #20]
  return(result);
 8003862:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003864:	637b      	str	r3, [r7, #52]	@ 0x34
 8003866:	2301      	movs	r3, #1
 8003868:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	f383 8810 	msr	PRIMASK, r3
}
 8003870:	46c0      	nop			@ (mov r8, r8)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4926      	ldr	r1, [pc, #152]	@ (8003918 <UART_EndRxTransfer+0xc4>)
 800387e:	400a      	ands	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003884:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f383 8810 	msr	PRIMASK, r3
}
 800388c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388e:	f3ef 8310 	mrs	r3, PRIMASK
 8003892:	623b      	str	r3, [r7, #32]
  return(result);
 8003894:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
 8003898:	2301      	movs	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	f383 8810 	msr	PRIMASK, r3
}
 80038a2:	46c0      	nop			@ (mov r8, r8)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2101      	movs	r1, #1
 80038b0:	438a      	bics	r2, r1
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	f383 8810 	msr	PRIMASK, r3
}
 80038be:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d118      	bne.n	80038fa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038c8:	f3ef 8310 	mrs	r3, PRIMASK
 80038cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038ce:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038d2:	2301      	movs	r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2110      	movs	r1, #16
 80038ea:	438a      	bics	r2, r1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f383 8810 	msr	PRIMASK, r3
}
 80038f8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2280      	movs	r2, #128	@ 0x80
 80038fe:	2120      	movs	r1, #32
 8003900:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	46bd      	mov	sp, r7
 8003912:	b00e      	add	sp, #56	@ 0x38
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	fffffedf 	.word	0xfffffedf

0800391c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b094      	sub	sp, #80	@ 0x50
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2220      	movs	r2, #32
 8003932:	4013      	ands	r3, r2
 8003934:	d16f      	bne.n	8003a16 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003938:	225a      	movs	r2, #90	@ 0x5a
 800393a:	2100      	movs	r1, #0
 800393c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393e:	f3ef 8310 	mrs	r3, PRIMASK
 8003942:	61bb      	str	r3, [r7, #24]
  return(result);
 8003944:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003948:	2301      	movs	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f383 8810 	msr	PRIMASK, r3
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	493a      	ldr	r1, [pc, #232]	@ (8003a48 <UART_DMAReceiveCplt+0x12c>)
 8003960:	400a      	ands	r2, r1
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003966:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003970:	f3ef 8310 	mrs	r3, PRIMASK
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003978:	647b      	str	r3, [r7, #68]	@ 0x44
 800397a:	2301      	movs	r3, #1
 800397c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800397e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003980:	f383 8810 	msr	PRIMASK, r3
}
 8003984:	46c0      	nop			@ (mov r8, r8)
 8003986:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2101      	movs	r1, #1
 8003992:	438a      	bics	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
 8003996:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	f383 8810 	msr	PRIMASK, r3
}
 80039a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a2:	f3ef 8310 	mrs	r3, PRIMASK
 80039a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80039a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ac:	2301      	movs	r3, #1
 80039ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b2:	f383 8810 	msr	PRIMASK, r3
}
 80039b6:	46c0      	nop			@ (mov r8, r8)
 80039b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2140      	movs	r1, #64	@ 0x40
 80039c4:	438a      	bics	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	f383 8810 	msr	PRIMASK, r3
}
 80039d2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80039d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d6:	2280      	movs	r2, #128	@ 0x80
 80039d8:	2120      	movs	r1, #32
 80039da:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d118      	bne.n	8003a16 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e4:	f3ef 8310 	mrs	r3, PRIMASK
 80039e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ea:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039ee:	2301      	movs	r3, #1
 80039f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f383 8810 	msr	PRIMASK, r3
}
 80039f8:	46c0      	nop			@ (mov r8, r8)
 80039fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2110      	movs	r1, #16
 8003a06:	438a      	bics	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a18:	2200      	movs	r2, #0
 8003a1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d108      	bne.n	8003a36 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a26:	2258      	movs	r2, #88	@ 0x58
 8003a28:	5a9a      	ldrh	r2, [r3, r2]
 8003a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f7ff fa30 	bl	8002e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a34:	e003      	b.n	8003a3e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7fd f827 	bl	8000a8c <HAL_UART_RxCpltCallback>
}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b014      	add	sp, #80	@ 0x50
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	fffffeff 	.word	0xfffffeff

08003a4c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10a      	bne.n	8003a7e <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2258      	movs	r2, #88	@ 0x58
 8003a6c:	5a9b      	ldrh	r3, [r3, r2]
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	0011      	movs	r1, r2
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff fa0c 	bl	8002e94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a7c:	e003      	b.n	8003a86 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	0018      	movs	r0, r3
 8003a82:	f7fc fffb 	bl	8000a7c <HAL_UART_RxHalfCpltCallback>
}
 8003a86:	46c0      	nop			@ (mov r8, r8)
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003aa0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2280      	movs	r2, #128	@ 0x80
 8003aa6:	589b      	ldr	r3, [r3, r2]
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2280      	movs	r2, #128	@ 0x80
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b80      	cmp	r3, #128	@ 0x80
 8003ab6:	d10a      	bne.n	8003ace <UART_DMAError+0x40>
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b21      	cmp	r3, #33	@ 0x21
 8003abc:	d107      	bne.n	8003ace <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2252      	movs	r2, #82	@ 0x52
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	0018      	movs	r0, r3
 8003aca:	f7ff fe9f 	bl	800380c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2240      	movs	r2, #64	@ 0x40
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b40      	cmp	r3, #64	@ 0x40
 8003ada:	d10a      	bne.n	8003af2 <UART_DMAError+0x64>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b22      	cmp	r3, #34	@ 0x22
 8003ae0:	d107      	bne.n	8003af2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	225a      	movs	r2, #90	@ 0x5a
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	0018      	movs	r0, r3
 8003aee:	f7ff feb1 	bl	8003854 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2284      	movs	r2, #132	@ 0x84
 8003af6:	589b      	ldr	r3, [r3, r2]
 8003af8:	2210      	movs	r2, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2184      	movs	r1, #132	@ 0x84
 8003b00:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7fc ffed 	bl	8000ae4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b006      	add	sp, #24
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <memset>:
 8003b12:	0003      	movs	r3, r0
 8003b14:	1882      	adds	r2, r0, r2
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d100      	bne.n	8003b1c <memset+0xa>
 8003b1a:	4770      	bx	lr
 8003b1c:	7019      	strb	r1, [r3, #0]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	e7f9      	b.n	8003b16 <memset+0x4>
	...

08003b24 <__libc_init_array>:
 8003b24:	b570      	push	{r4, r5, r6, lr}
 8003b26:	2600      	movs	r6, #0
 8003b28:	4c0c      	ldr	r4, [pc, #48]	@ (8003b5c <__libc_init_array+0x38>)
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b60 <__libc_init_array+0x3c>)
 8003b2c:	1b64      	subs	r4, r4, r5
 8003b2e:	10a4      	asrs	r4, r4, #2
 8003b30:	42a6      	cmp	r6, r4
 8003b32:	d109      	bne.n	8003b48 <__libc_init_array+0x24>
 8003b34:	2600      	movs	r6, #0
 8003b36:	f000 f819 	bl	8003b6c <_init>
 8003b3a:	4c0a      	ldr	r4, [pc, #40]	@ (8003b64 <__libc_init_array+0x40>)
 8003b3c:	4d0a      	ldr	r5, [pc, #40]	@ (8003b68 <__libc_init_array+0x44>)
 8003b3e:	1b64      	subs	r4, r4, r5
 8003b40:	10a4      	asrs	r4, r4, #2
 8003b42:	42a6      	cmp	r6, r4
 8003b44:	d105      	bne.n	8003b52 <__libc_init_array+0x2e>
 8003b46:	bd70      	pop	{r4, r5, r6, pc}
 8003b48:	00b3      	lsls	r3, r6, #2
 8003b4a:	58eb      	ldr	r3, [r5, r3]
 8003b4c:	4798      	blx	r3
 8003b4e:	3601      	adds	r6, #1
 8003b50:	e7ee      	b.n	8003b30 <__libc_init_array+0xc>
 8003b52:	00b3      	lsls	r3, r6, #2
 8003b54:	58eb      	ldr	r3, [r5, r3]
 8003b56:	4798      	blx	r3
 8003b58:	3601      	adds	r6, #1
 8003b5a:	e7f2      	b.n	8003b42 <__libc_init_array+0x1e>
 8003b5c:	08003c04 	.word	0x08003c04
 8003b60:	08003c04 	.word	0x08003c04
 8003b64:	08003c08 	.word	0x08003c08
 8003b68:	08003c04 	.word	0x08003c04

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
